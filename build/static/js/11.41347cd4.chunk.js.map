{"version":3,"sources":["containers/navs/Breadcrumb.js","components/Layouts.js","constants/tableOptions.js","containers/modals/ApproveLaboratoryTestReportModal.js","containers/modals/ApproveLaboratoryTestRequestModal.js","containers/modals/DeleteLaboratoryTestRequestModal.js","containers/modals/DownloadLaboratoryTestDocumentModal.js","containers/modals/EditLaboratoryTestReportModal.js","constants/laboratoryTestValues.js","containers/modals/EditLaboratoryTestRequestModal.js","containers/modals/LaboratoryTestReportHistoryModal.js","containers/modals/ReceiveLaboratoryTestRequestModal.js","containers/modals/ReviseLaboratoryTestReportModal.js","containers/modals/SubmitLaboratoryTestReportModal.js","containers/modals/SubmitLaboratoryTestRequestModal.js","views/app/qaLaboratoryTest.js"],"names":["BreadcrumbContainer","heading","match","Separator","props","className","style","backgroundColor","organizationUnitTableOptions","download","elevation","filter","filterType","print","responsive","rowsPerPage","rowsPerPageOptions","searchPlaceholder","selectableRows","laboratoryTestUserTableOptions","chemicalSolutionControlUserTableOptions","electroplatingChemicalProcessControlUserTableOptions","laboratoryTestTableOptions","downloadOptions","filename","separator","draggableColumns","enabled","transitionTime","expandableRows","expandableRowsHeader","expandableRowsOnClick","filterList","renderExpandableRow","rowData","colSpan","length","chemicalSolutionControlWorksheetsTableOptions","selectableRowsHideCheckboxes","chemicalSolutionControlTableOptions","pagination","search","viewColumns","solutionTargetLimitsTableOptions","specificationReferencesTableOptions","chemicalSolutionAnalysisTableOptions","electroplatingChemicalProcessControlTableOptions","pdfjs","GlobalWorkerOptions","workerSrc","backEndUrl","ApproveLaboratoryTestReportModal","triggerApproveLaboratoryTestReport","token","loading","selectedLaboratoryTest","approveLaboratoryTestReport","userId","jwt_decode","id","reportApprover","this","downloadLaboratoryTestAttachment","fileName","reportAttachmentFileName","showApproveReportModal","toggleApproveReportModal","reportIds","Modal","backdrop","isOpen","toggle","Fragment","ModalHeader","ModalBody","size","file","pageNumber","width","ModalFooter","Button","color","onClick","type","variant","triggerDownloadLaboratoryTestAttachment","AttachmentOutlined","PureComponent","mapActionsToProps","connect","auth","qaLaboratoryTest","ApproveLaboratoryTestRequestModal","triggerApproveLaboratoryTestRequest","approveLaboratoryTestRequest","requestApprover","state","requestAttachmentFileName","showApproveRequestModal","toggleApproveRequestModal","requestIds","DeleteLaboratoryTestRequestModal","triggerDeleteLaboratoryTestRequest","deleteLaboratoryTestRequest","showDeleteRequestModal","toggleDeleteRequestModal","DownloadLaboratoryTestDocumentModal","downloadLaboratoryTestRequestDocument","qaLaboratoryTestId","downloadLaboratoryTestReportDocument","showDownloadDocumentModal","toggleDownloadDocumentModal","requesterName","requestApproverName","reporterName","reportApproverName","Row","Col","onLoadError","console","error","ButtonGroup","triggerDownloadLaboratoryTestRequestDocument","triggerDownloadLaboratoryTestRequestAttachment","triggerDownloadLaboratoryTestReportDocument","triggerDownloadLaboratoryTestReportAttachment","EditLaboratoryTestReportModal","onFileChange","event","setState","selectedFile","target","files","deleteAttachment","onTestResultChange","editorState","triggerEditLaboratoryTestReport","values","editLaboratoryTestReport","reportDate","reportNumber","laboratoryTest","FormData","append","JSON","stringify","convertToRaw","getCurrentContent","stateToHTML","reportAttachmentFileOriginalName","defaultEditorState","EditorState","createEmpty","prevProps","_prevState","showEditReportModal","testResult","substring","createWithContent","convertFromRaw","parse","toggleEditReportModal","laboratoryTestReportFormInitialValues","maxWidth","initialValues","onSubmit","validationSchema","laboratoryTestReportFormValidationSchema","touched","errors","handleChange","autoComplete","border","borderColor","marginLeft","marginRight","padding","paddingBottom","fontSize","fontWeight","paddingTop","textDecorationLine","TextField","fullWidth","helperText","InputLabelProps","shrink","name","onChange","value","disabled","paddingRight","IconButton","DeleteOutline","Input","disableUnderline","label","onEditorStateChange","readOnly","toolbar","options","laboratories","organizationUnitsDefault","organizationUnitsSolutionControl","organizationUnitsProcessControl","organizationUnitsKimia","organizationUnitsBondingAndComposite","organizationUnitsMetallurgy","requestNumbersDefault","requestNumbersSolutionControlDM6000","requestNumbersSolutionControlDM6100","requestNumbersSolutionControlDM6200","requestNumbersSolutionControlMPD","requestNumbersSolutionControlQA3100","requestNumbersSolutionControlQC3400","requestNumbersSolutionControlQC3500","requestNumbersSolutionControlQC5300","requestNumbersProcessControlDM6000","requestNumbersProcessControlDM6100","requestNumbersProcessControlDM6200","requestNumbersProcessControlMPD","requestNumbersProcessControlQA3100","requestNumbersProcessControlQC3400","requestNumbersProcessControlQC3500","requestNumbersProcessControlQC5300","requestNumbersBondingAndCompositeQC1300","requestNumbersBondingAndCompositeQC1500","requestNumbersBondingAndCompositeQC3100","requestNumbersBondingAndCompositeQC3300","requestNumbersBondingAndCompositeQC3500","requestNumbersBondingAndCompositeQC4000","requestNumbersBondingAndCompositeQC4100","requestNumbersBondingAndCompositeQC4400","requestNumbersBondingAndCompositeQC5300","requestNumbersBondingAndCompositeQC5500","requestNumbersBondingAndCompositeMDME","requestNumbersBondingAndCompositeACS","requestNumbersBondingAndCompositeTraining","requestNumbersMetallurgyQA3100","requestNumbersMetallurgyQA3400","requestNumbersMetallurgyQC1400","requestNumbersMetallurgyQC3500","requestNumbersMetallurgyMDME","programsDefault","programsSolutionControl","programsProcessControl","programsKimia","programsBondingAndComposite","programsMetallurgy","materialsDefault","materialsSolutionControl","materialsProcessControl","materialsKimia","materialsBondingAndComposite","materialsMetallurgy","typesDefault","typesSolutionControl","typesProcessControl","typesKimia","typesBondingAndComposite","typesMetallurgy","specificationsDefault","specificationsSolutionControl","specificationsProcessControl","specificationsKimia","specificationsBondingAndComposite","specificationsMetallurgy","manufacturersDefault","manufacturersSolutionControl","manufacturersProcessControl","manufacturersKimia","manufacturersBondingAndComposite","manufacturersMetallurgy","reasonOfTestsDefault","reasonOfTestsSolutionControl","reasonOfTestsProcessControl","reasonOfTestsKimia","reasonOfTestBondingAndComposite","reasonOfTestsMetallurgy","conditionsDefault","conditionsSolutionControl","conditionsProcessControl","conditionsKimia","conditionsBondingAndComposite","conditionsMetallurgy","units","typeOfTests","EditLaboratoryTestRequestModal","triggerEditLaboratoryTestRequest","editLaboratoryTestRequest","users","authorization","superAdmin","laboratoryTestAdmin","existingRequestReceiveDate","requestReceiveDate","laboratory","organizationUnit","requestNumber","budgetNumber","reasonOfTest","material","specification","manufacturer","manufacturingDate","expiryDate","program","batchNumber","sample","condition","unit","quantity","typeOfTest","testAccordingToSpecification","requestDate","estimationCloseDate","requester","reporter","requesterFound","find","user","nik","requestApproverFound","reporterFound","reportApproverFound","trim","delete","organizationUnits","requestNumbers","materials","types","specifications","programs","reasonOfTests","manufacturers","conditions","testAccordingToSpecifications","employees","requestAttachmentFileOriginalName","showEditRequestModal","requesterNik","requestApproverNik","reporterNik","reportApproverNik","today","moment","format","split","toggleEditRequestModal","laboratoryTestRequestFormInitialValues","laboratoryTestFormByAdminValidationSchema","laboratoryTestRequestFormValidationSchema","setFieldValue","utils","DateFnsUtils","Container","Autocomplete","defaultValue","getOptionLabel","option","openOnFocus","_event","renderInput","params","renderOption","inputValue","matches","parts","map","part","index","highlight","text","freeSolo","onInputChange","disableCloseOnSelect","multiple","join","selected","Checkbox","checked","checkedIcon","CheckBox","icon","CheckBoxOutlineBlank","borderTop","marginTop","_state","userManagement","LaboratoryTestReportHistoryModal","showReportHistoryModal","toggleReportHistoryModal","reportId","i","ReceiveLaboratoryTestRequestModal","triggerReceiveLaboratoryTestRequest","receiveLaboratoryTestRequest","Date","toastRequestReceiveDateMustBeBigger","toastEstimationCloseDateMustBeBigger","workdayEstimation","showReceiveRequestModal","toggleReceiveRequestModal","laboratoryTestRequestReceiveFormInitialValues","laboratoryTestRequestReceiveFormValidationSchema","Math","round","abs","min","test","parseInt","setDate","getDate","toISOString","step","ReviseLaboratoryTestReportModal","triggerReviseLaboratoryTestReport","reviseLaboratoryTestReport","showReviseReportModal","toggleReviseReportModal","SubmitLaboratoryTestReportModal","triggerSubmitLaboratoryTestReport","submitLaboratoryTestReport","showSubmitReportModal","tempReportNumber","date","toggleSubmitReportModal","SubmitLaboratoryTestRequestModal","triggerSubmitLaboratoryTestRequest","submitLaboratoryTestRequest","showSubmitRequestModal","toggleSubmitRequestModal","QaLaboratoryTest","componentDidMount","selectedLaboratoryTestYear","getLaboratoryTests","getUsers","_isMounted","laboratoryTests","changeSelectedLaboratoryTestYear","organization","usersOrganization","laboratoryTestRequest","laboratoryTestApproveRequest","laboratoryTestReceiveRequest","laboratoryTestReport","laboratoryTestApproveReport","yearPicker","laboratoryTestTableColumns","empty","searchable","sort","customBodyRender","requesterOrganization","DoneAllOutlined","requestReceiverName","EditOutlined","UpdateOutlined","DeleteForever","InsertDriveFileOutlined","ArchiveOutlined","sortThirdClickReset","Chip","CheckOutlined","SupervisorAccountOutlined","DonutLargeOutlined","LocalShippingOutlined","display","year","appLaunchYear","getFullYear","push","textLabels","body","noMatch","fallback","Grid","container","item","xs","Breadcrumb","window","location","href","marginBottom","CloudDownloadOutlined","FormControl","Select","MenuItem","Card","CardContent","alignItems","justifyContent","minHeight","minWidth","columns","data"],"mappings":"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AC3C,MACA,UACA,QACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAEIC,GAA8B,CAClC,UACA,QACA,UACA,UACA,UACA,WAIIC,GAAwB,GACxBC,GAAsC,CAAC,iBACvCC,GAAsC,CAAC,iBACvCC,GAAsC,CAAC,iBACvCC,GAAmC,CAAC,WACpCC,GAAsC,CAAC,uBACvCC,GAAsC,CAAC,eACvCC,GAAsC,CAC1C,iBACA,eACA,kBAEIC,GAAsC,CAAC,aACvCC,GAAqC,CAAC,iBACtCC,GAAqC,CAAC,iBACtCC,GAAqC,CAAC,iBACtCC,GAAkC,CAAC,WACnCC,GAAqC,CAAC,uBACtCC,GAAqC,CAAC,eACtCC,GAAqC,CACzC,iBACA,eACA,kBAEIC,GAAqC,CAAC,aACtCC,GAA0C,CAAC,eAC3CC,GAA0C,CAAC,eAC3CC,GAA0C,CAAC,YAC3CC,GAA0C,CAAC,eAC3CC,GAA0C,CAAC,kBAC3CC,GAA0C,CAAC,gBAC3CC,GAA0C,CAAC,YAC3CC,GAA0C,CAAC,eAC3CC,GAA0C,CAAC,eAC3CC,GAA0C,CAAC,eAC3CC,GAAwC,CAAC,WACzCC,GAAuC,CAAC,QACxCC,GAA4C,CAAC,cAC7CC,GAAiC,CAAC,eAClCC,GAAiC,CACrC,oBACA,cACA,cACA,QACA,QACA,QACA,QACA,MACA,SAEIC,GAAiC,CAAC,eAElCC,GAAiC,CAAC,kBAClCC,GAA+B,CAAC,WAGhCC,GAAkB,GAClBC,GAA0B,CAC9B,OACA,aACA,OACA,cACA,MACA,oBACA,aACA,kBACA,gBACA,qBACA,YACA,OACA,wBACA,uCACA,UACA,OACA,QAEIC,GAAyB,CAC7B,OACA,aACA,OACA,cACA,MACA,oBACA,aACA,kBACA,gBACA,qBACA,YACA,OACA,wBACA,uCACA,UACA,OACA,QAEIC,GAAgB,GAChBC,GAA8B,CAClC,cACA,WACA,gBACA,SACA,gBACA,SACA,kBACA,kBACA,cACA,OACA,OACA,QACA,SACA,SACA,kBACA,wBACA,gBACA,yBACA,gCACA,gBACA,MACA,kBACA,UAEIC,GAAqB,CACzB,cACA,SACA,SACA,cACA,OACA,SACA,gBACA,MACA,QACA,QACA,SACA,UAIIC,GAAmB,GACnBC,GAA2B,CAC/B,UACA,YACA,yBACA,0BACA,yBACA,2BACA,kBACA,uBACA,mBACA,WACA,qBACA,wBACA,uBACA,qBACA,oBACA,yBACA,uBACA,cACA,aACA,oBACA,aACA,uBACA,oCACA,yBACA,mBACA,qBACA,YACA,qBACA,0BACA,2BACA,oBACA,oBACA,kBACA,kBACA,qBACA,0BACA,mBACA,0BACA,uBACA,eACA,sBACA,kBACA,SACA,eACA,eACA,uBACA,qBACA,sBACA,iBACA,oBACA,qBACA,YACA,qBACA,QACA,gBACA,iBACA,oBACA,oBACA,uBACA,wBACA,mBAEIC,GAA0B,CAC9B,UACA,YACA,yBACA,0BACA,yBACA,2BACA,kBACA,uBACA,mBACA,WACA,qBACA,wBACA,uBACA,qBACA,oBACA,yBACA,uBACA,cACA,aACA,oBACA,aACA,uBACA,oCACA,yBACA,mBACA,qBACA,YACA,qBACA,0BACA,2BACA,oBACA,oBACA,kBACA,kBACA,qBACA,0BACA,mBACA,0BACA,uBACA,eACA,sBACA,kBACA,SACA,eACA,eACA,uBACA,qBACA,sBACA,iBACA,oBACA,qBACA,YACA,qBACA,QACA,gBACA,iBACA,oBACA,oBACA,uBACA,wBACA,mBAEIC,GAAiB,GACjBC,GAA+B,CACnC,UACA,WACA,uBACA,gBACA,gBACA,kBACA,WACA,sBACA,iBACA,eACA,cACA,UACA,OACA,iBACA,iBACA,oBACA,kBACA,eACA,aACA,iBACA,yBACA,UACA,iBACA,wBACA,gBACA,sBACA,uBACA,kCACA,iBACA,wBACA,mBACA,0BACA,QACA,UACA,eACA,iBACA,OACA,UAEIC,GAAsB,GAGtBC,GAAe,GACfC,GAAuB,CAC3B,UACA,YACA,YACA,kBACA,kBACA,SACA,MACA,aAEIC,GAAsB,CAC1B,UACA,YACA,YACA,kBACA,kBACA,SACA,MACA,aAEIC,GAAa,GACbC,GAA2B,CAC/B,WACA,yBACA,6BACA,mBACA,oBACA,mBACA,YACA,eACA,eACA,cACA,YACA,0BACA,0BACA,kBACA,kBACA,8BACA,UACA,aACA,aACA,aACA,2BACA,4BACA,2BACA,sCACA,2BACA,sCACA,YACA,eACA,WACA,WACA,sBACA,iCACA,sBACA,WACA,WACA,sBACA,WACA,sBACA,WACA,uBA6DIC,GAAkB,GAGlBC,GAAwB,GACxBC,GAAgC,CACpC,iBACA,MACA,eACA,eACA,eACA,oBACA,aACA,iBACA,iBACA,iBACA,WACA,WACA,UACA,iBACA,iBACA,kCACA,8BACA,uDACA,oCACA,WACA,4BACA,mCACA,gCACA,wCACA,qBACA,YACA,YACA,YACA,8BACA,oCACA,WACA,YACA,aACA,sCACA,cACA,oBACA,eACA,aACA,MACA,yBACA,wBACA,0BACA,0BACA,uBACA,uBACA,+CACA,uBACA,sBACA,sBACA,sBACA,sBACA,sBACA,kBACA,kBACA,kBACA,kBACA,kBACA,wCACA,kBACA,kBACA,aACA,YACA,YACA,YACA,WACA,wBAEIC,GAA+B,CACnC,iBACA,MACA,eACA,eACA,eACA,oBACA,aACA,iBACA,iBACA,iBACA,WACA,WACA,UACA,iBACA,iBACA,kCACA,8BACA,uDACA,oCACA,WACA,4BACA,mCACA,gCACA,wCACA,qBACA,YACA,YACA,YACA,8BACA,oCACA,WACA,YACA,aACA,sCACA,cACA,oBACA,eACA,aACA,MACA,yBACA,wBACA,0BACA,0BACA,uBACA,uBACA,+CACA,uBACA,sBACA,sBACA,sBACA,sBACA,sBACA,kBACA,kBACA,kBACA,kBACA,kBACA,wCACA,kBACA,kBACA,aACA,YACA,YACA,YACA,WACA,wBAEIC,GAAsB,GACtBC,GAAoC,CACxC,gBACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,gBACA,gBACA,gBACA,gBACA,WACA,WACA,aACA,aACA,aACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,aACA,cACA,cACA,aACA,aACA,cACA,aACA,aACA,cACA,aACA,cACA,aACA,aACA,aACA,WACA,WACA,WACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,UACA,UACA,UACA,UACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,gBACA,eACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,YACA,UACA,cACA,eACA,gBACA,gBACA,gBACA,YACA,aACA,WACA,WACA,aACA,aACA,UACA,kBACA,kBACA,kBACA,kBACA,kBACA,mBAEIC,GAA2B,CAC/B,YACA,YACA,YACA,YACA,WACA,gBACA,iBACA,UACA,kBACA,kBACA,mBAIIC,GAAuB,GACvBC,GAA+B,CAAC,MAAO,UAAW,SAClDC,GAA8B,CAAC,MAAO,UAAW,SACjDC,GAAqB,GACrBC,GAAmC,CACvC,oBACA,KACA,QACA,cACA,QACA,iBACA,gBACA,cACA,WACA,YACA,SACA,SACA,WACA,cACA,MACA,UACA,WACA,YACA,cACA,WACA,gBACA,cACA,gBACA,YACA,SACA,iBAEIC,GAA0B,GAG1BC,GAAuB,GACvBC,GAA+B,CAAC,kBAAmB,cACnDC,GAA8B,CAAC,kBAAmB,cAClDC,GAAqB,GACrBC,GAAkC,CACtC,uBACA,gBACA,cACA,aACA,gBACA,kBACA,UAEIC,GAA0B,CAC9B,cACA,gBACA,uBAIIC,GAAoB,GACpBC,GAA4B,CAAC,MAAO,OAAQ,YAC5CC,GAA2B,CAAC,MAAO,OAAQ,YAC3CC,GAAkB,CAAC,MAAO,OAAQ,YAClCC,GAAgC,CAAC,OAAQ,YACzCC,GAAuB,CAAC,OAAQ,YAAa,UAG7CC,GAAQ,CAAC,QAGTC,GAAc,CAClB,yBACA,gBACA,mBACA,kBACA,wBACA,0BACA,aACA,eACA,0BACA,kBACA,sBACA,eACA,sBACA,cACA,2BACA,4BACA,mBACA,uCACA,oBACA,wBACA,2BACA,4BACA,2BACA,yBACA,+BACA,0BACA,mBACA,0BACA,oBACA,eACA,gBACA,8BACA,eACA,uBACA,wBACA,uBACA,kBACA,oBACA,mBACA,gBACA,wBACA,qBACA,YACA,wBACA,sBACA,gBACA,+BACA,aACA,8BACA,gBACA,2BACA,iBACA,cACA,+BACA,gCACA,mCACA,uBACA,aACA,uBACA,kBACA,wBACA,yBACA,wBACA,0BACA,kBACA,qBACA,wBACA,MACA,4BACA,gCACA,8BACA,qBACA,iBACA,YACA,yBACA,uBACA,UACA,eACA,eACA,gBACA,kCACA,mBACA,oBACA,qBACA,mBACA,0BACA,mBACA,aACA,wBACA,iBACA,sBACA,aACA,qBACA,yBACA,wBACA,oBACA,cACA,gBACA,uBACA,YACA,WACA,qBACA,8BACA,uBACA,8BACA,wBACA,eACA,yBACA,iBACA,kBACA,mBACA,kBACA,iBACA,wBACA,qBACA,sBACA,qBACA,wBACA,wBACA,uBACA,qBACA,yBACA,Y,+FC/0BIC,G,kDACJ,WAAY3R,GAAQ,IAAD,8BACjB,cAAMA,IAoPR2H,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,aAAcF,EAAMG,OAAOC,MAAM,GACjCC,kBAAkB,KAxPH,EA4PnBA,iBAAmB,WACjB,EAAKJ,SAAS,CACZI,kBAAkB,KA9PH,EA0QnB2J,iCAAmC,SAACvJ,GAAY,IAAD,IAC7C,EAMI,EAAKrI,MALPiD,EADF,EACEA,MACAC,EAFF,EAEEA,QACAC,EAHF,EAGEA,uBACA0O,EAJF,EAIEA,0BACAC,EALF,EAKEA,MAEF,EAA2C,EAAKlM,MAAxCkC,EAAR,EAAQA,aAAcG,EAAtB,EAAsBA,iBAChB5E,EAAM,UAAGC,YAAWL,UAAd,aAAG,EAAmBM,GAClC,YACED,YAAWL,UADb,aACE,EAAmB8O,cADbC,EAAR,EAAQA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","file":"static/js/11.41347cd4.chunk.js","sourcesContent":["// import { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport React, { Fragment } from \"react\";\r\n\r\n// import IntlMessages from '../../helpers/IntlMessages';\r\n// import { NavLink } from 'react-router-dom';\r\n\r\n// const getMenuTitle = (sub) => {\r\n// \treturn <IntlMessages id={`menu.sidebar.${sub}`} />;\r\n// };\r\n\r\n// const getUrl = (path, sub, index) => {\r\n// \tif (index === 0) {\r\n// \t\treturn '';\r\n// \t} else {\r\n// \t\treturn path.split(sub)[0] + sub;\r\n// \t}\r\n// };\r\n\r\nconst BreadcrumbContainer = ({ heading, match }) => {\r\n  return (\r\n    <Fragment>\r\n      {heading && (\r\n        <h1>\r\n          {/* <IntlMessages id={heading} /> */}\r\n          {heading}\r\n        </h1>\r\n      )}\r\n      {/* <BreadcrumbItems match={match} /> */}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport const BreadcrumbItems = ({ match }) => {\r\n  const path = match.path.substr(1);\r\n  let paths = path.split(\"/\");\r\n\r\n  if (paths[paths.length - 1].indexOf(\":\") > -1) {\r\n    paths = paths.filter((x) => x.indexOf(\":\") === -1);\r\n  }\r\n  return (\r\n    <Fragment>\r\n      {/* <Breadcrumb className='pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block'>\r\n\t\t\t\t{paths.map((sub, index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<BreadcrumbItem key={index} active={paths.length === index + 1}>\r\n\t\t\t\t\t\t\t{paths.length !== index + 1 ? (\r\n\t\t\t\t\t\t\t\t<NavLink to={'/' + getUrl(path, sub, index)}>\r\n\t\t\t\t\t\t\t\t\t{getMenuTitle(sub)}\r\n\t\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\tgetMenuTitle(sub)\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</BreadcrumbItem>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</Breadcrumb> */}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbContainer;\r\n","import { Col } from 'reactstrap';\r\n\r\nconst Colxx = (props) => (\r\n  <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\r\n);\r\n\r\nconst Separator = (props) => (\r\n  <div\r\n    className={`separator ${props.className}`}\r\n    style={{ backgroundColor: 'transparent' }}\r\n  ></div>\r\n);\r\n\r\nexport { Colxx, Separator };\r\n","import { TableCell, TableRow } from \"@material-ui/core\";\r\n\r\nconst mediaVideoTableOptions = {\r\n  download: false,\r\n  elevation: 0,\r\n  filter: false,\r\n  filterType: \"multiselect\",\r\n  print: false,\r\n  responsive: \"standard\",\r\n  rowsPerPage: 3,\r\n  rowsPerPageOptions: [3],\r\n  selectableRows: \"none\",\r\n  viewColumns: false,\r\n};\r\n\r\nconst organizationUnitTableOptions = {\r\n  download: false,\r\n  elevation: 0,\r\n  filter: true,\r\n  filterType: \"multiselect\",\r\n  print: false,\r\n  responsive: \"vertical\",\r\n  rowsPerPage: 5,\r\n  rowsPerPageOptions: [5, 10, 25, 50],\r\n  searchPlaceholder:\r\n    \"NIK / Name / Gender Education / Major / Organization / Email / Phone No.\",\r\n  selectableRows: \"none\",\r\n};\r\n\r\nconst laboratoryTestUserTableOptions = {\r\n  download: false,\r\n  elevation: 0,\r\n  filter: true,\r\n  filterType: \"multiselect\",\r\n  print: false,\r\n  responsive: \"vertical\",\r\n  rowsPerPage: 5,\r\n  rowsPerPageOptions: [5, 10, 25, 50],\r\n  selectableRows: \"none\",\r\n};\r\n\r\nconst chemicalSolutionControlUserTableOptions = {\r\n  download: false,\r\n  elevation: 0,\r\n  filter: true,\r\n  filterType: \"multiselect\",\r\n  print: false,\r\n  responsive: \"vertical\",\r\n  rowsPerPage: 5,\r\n  rowsPerPageOptions: [5, 10, 25, 50],\r\n  selectableRows: \"none\",\r\n};\r\n\r\nconst electroplatingChemicalProcessControlUserTableOptions = {\r\n  download: false,\r\n  elevation: 0,\r\n  filter: true,\r\n  filterType: \"multiselect\",\r\n  print: false,\r\n  responsive: \"vertical\",\r\n  rowsPerPage: 5,\r\n  rowsPerPageOptions: [5, 10, 25, 50],\r\n  selectableRows: \"none\",\r\n};\r\n\r\nconst laboratoryTestTableOptions = {\r\n  downloadOptions: { filename: \"Laboratory Test.csv\", separator: \",\" },\r\n  draggableColumns: { enabled: true, transitionTime: 1 },\r\n  elevation: 0,\r\n  expandableRows: true,\r\n  expandableRowsHeader: true,\r\n  expandableRowsOnClick: false,\r\n  filter: true,\r\n  filterType: \"multiselect\",\r\n  filterList: [[\"PE8000\"], [], [], [], []],\r\n  print: false,\r\n  responsive: \"vertical\",\r\n  rowsPerPage: 100,\r\n  rowsPerPageOptions: [5, 10, 25, 50, 100, 250, 500],\r\n  selectableRows: \"none\",\r\n  renderExpandableRow: (rowData) => {\r\n    return (\r\n      <TableRow>\r\n        <TableCell colSpan={3}>\r\n          <b>Request for Laboratory</b>\r\n          <br />\r\n          <b>Material</b>\r\n          <br />\r\n          <b>Type / Code / Model</b>\r\n          <br />\r\n          <b>Material Specification</b>\r\n          <br />\r\n          <b>Manufactured by</b>\r\n          <br />\r\n          <b>Condition</b>\r\n          <br />\r\n          <b>Unit</b>\r\n          <br />\r\n          <b>Batch / Roll Number</b>\r\n          <br />\r\n          <b>Manufacturing Date</b>\r\n          <br />\r\n          <b>Expired Date</b>\r\n          <br />\r\n          <b>Program</b>\r\n          <br />\r\n          <b>Budget No. / RV No. / JID No.</b>\r\n          <br />\r\n          <b>Quantity of Sample</b>\r\n          <br />\r\n          <b>Quantity of Material</b>\r\n          <br />\r\n          <b>Reason of Test</b>\r\n          <br />\r\n          <b>Type of Test</b>\r\n          <br />\r\n          <b>Test According to Specification</b>\r\n          <br />\r\n        </TableCell>\r\n        <TableCell colSpan={rowData.length - 2}>\r\n          {rowData[13]}\r\n          <br />\r\n          {rowData[14]}\r\n          <br />\r\n          {rowData[15]}\r\n          <br />\r\n          {rowData[16]}\r\n          <br />\r\n          {rowData[17]}\r\n          <br />\r\n          {rowData[18]}\r\n          <br />\r\n          {rowData[19]}\r\n          <br />\r\n          {rowData[20]}\r\n          <br />\r\n          {rowData[21]}\r\n          <br />\r\n          {rowData[22]}\r\n          <br />\r\n          {rowData[23]}\r\n          <br />\r\n          {rowData[24]}\r\n          <br />\r\n          {rowData[25]}\r\n          <br />\r\n          {rowData[26]}\r\n          <br />\r\n          {rowData[27]}\r\n          <br />\r\n          {rowData[28]}\r\n          <br />\r\n          {rowData[29]}\r\n          <br />\r\n        </TableCell>\r\n      </TableRow>\r\n    );\r\n  },\r\n};\r\n\r\nconst chemicalSolutionControlWorksheetsTableOptions = {\r\n  downloadOptions: {\r\n    filename: \"Chemical Solution Control Worksheets.csv\",\r\n    separator: \",\",\r\n  },\r\n  elevation: 0,\r\n  filter: true,\r\n  filterType: \"multiselect\",\r\n  print: false,\r\n  responsive: \"vertical\",\r\n  rowsPerPage: 250,\r\n  rowsPerPageOptions: [5, 10, 25, 50, 100, 250, 500],\r\n  selectableRows: \"single\",\r\n  selectableRowsHideCheckboxes: true,\r\n};\r\n\r\nconst chemicalSolutionControlTableOptions = {\r\n  download: false,\r\n  draggableColumns: {\r\n    enabled: false,\r\n    transitionTime: 1,\r\n  },\r\n  elevation: 0,\r\n  filter: false,\r\n  pagination: false,\r\n  print: false,\r\n  responsive: \"vertical\",\r\n  rowsPerPage: 15,\r\n  rowsPerPageOptions: [15],\r\n  search: false,\r\n  selectableRows: \"none\",\r\n  viewColumns: false,\r\n};\r\n\r\nconst solutionTargetLimitsTableOptions = {\r\n  downloadOptions: {\r\n    filename: \"Chemical Solution Control Worksheet Solution Target Limits.csv\",\r\n    separator: \",\",\r\n  },\r\n  draggableColumns: {\r\n    enabled: false,\r\n    transitionTime: 1,\r\n  },\r\n  elevation: 0,\r\n  filter: false,\r\n  pagination: false,\r\n  print: false,\r\n  responsive: \"vertical\",\r\n  rowsPerPage: 15,\r\n  rowsPerPageOptions: [15],\r\n  search: false,\r\n  selectableRows: \"none\",\r\n};\r\n\r\nconst specificationReferencesTableOptions = {\r\n  downloadOptions: {\r\n    filename:\r\n      \"Chemical Solution Control Worksheet Specification References.csv\",\r\n    separator: \",\",\r\n  },\r\n  draggableColumns: {\r\n    enabled: false,\r\n    transitionTime: 1,\r\n  },\r\n  elevation: 0,\r\n  filter: false,\r\n  pagination: false,\r\n  print: false,\r\n  responsive: \"vertical\",\r\n  rowsPerPage: 15,\r\n  rowsPerPageOptions: [15],\r\n  search: false,\r\n  selectableRows: \"none\",\r\n};\r\n\r\nconst chemicalSolutionAnalysisTableOptions = {\r\n  downloadOptions: {\r\n    filename: \"Chemical Solution Control Records.csv\",\r\n    separator: \",\",\r\n  },\r\n  draggableColumns: {\r\n    enabled: false,\r\n    transitionTime: 1,\r\n  },\r\n  elevation: 0,\r\n  filter: false,\r\n  print: false,\r\n  responsive: \"vertical\",\r\n  rowsPerPage: 5,\r\n  rowsPerPageOptions: [5, 10, 25, 50, 100, 250, 500],\r\n  search: false,\r\n  selectableRows: \"none\",\r\n};\r\n\r\nconst electroplatingChemicalProcessControlTableOptions = {\r\n  downloadOptions: {\r\n    filename: \"Control of Electroplating and Chemical Processes.csv\",\r\n    separator: \",\",\r\n  },\r\n  elevation: 0,\r\n  filter: true,\r\n  filterType: \"multiselect\",\r\n  print: false,\r\n  responsive: \"vertical\",\r\n  rowsPerPage: 100,\r\n  rowsPerPageOptions: [5, 10, 25, 50, 100, 250, 500],\r\n  selectableRows: \"single\",\r\n  selectableRowsHideCheckboxes: true,\r\n};\r\n\r\nexport {\r\n  mediaVideoTableOptions,\r\n  organizationUnitTableOptions,\r\n  laboratoryTestUserTableOptions,\r\n  chemicalSolutionControlUserTableOptions,\r\n  electroplatingChemicalProcessControlUserTableOptions,\r\n  laboratoryTestTableOptions,\r\n  chemicalSolutionControlWorksheetsTableOptions,\r\n  chemicalSolutionControlTableOptions,\r\n  solutionTargetLimitsTableOptions,\r\n  specificationReferencesTableOptions,\r\n  chemicalSolutionAnalysisTableOptions,\r\n  electroplatingChemicalProcessControlTableOptions,\r\n};\r\n","import { Document, Page, pdfjs } from \"react-pdf\";\r\nimport { Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\r\nimport React, { PureComponent } from \"react\";\r\nimport {\r\n  approveLaboratoryTestReport,\r\n  downloadLaboratoryTestAttachment,\r\n  toggleApproveReportModal,\r\n} from \"../../redux/actions\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { LoadingSpinner } from \"../../components/Miscellaneous\";\r\nimport { SizeMe } from \"react-sizeme\";\r\nimport { backEndUrl } from \"../../constants/defaultValues\";\r\nimport { connect } from \"react-redux\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { AttachmentOutlined } from \"@material-ui/icons\";\r\npdfjs.GlobalWorkerOptions.workerSrc = `${backEndUrl}/assets/js/pdf.worker.min.js`;\r\n\r\nclass ApproveLaboratoryTestReportModal extends PureComponent {\r\n  triggerDownloadLaboratoryTestAttachment() {\r\n    const { selectedLaboratoryTest, downloadLaboratoryTestAttachment } =\r\n      this.props;\r\n    const { reportAttachmentFileName } = selectedLaboratoryTest;\r\n\r\n    downloadLaboratoryTestAttachment({ fileName: reportAttachmentFileName });\r\n  }\r\n\r\n  triggerApproveLaboratoryTestReport = () => {\r\n    const {\r\n      token,\r\n      loading,\r\n      selectedLaboratoryTest,\r\n      approveLaboratoryTestReport,\r\n    } = this.props;\r\n    const userId = jwt_decode(token).id;\r\n    const { id } = selectedLaboratoryTest;\r\n\r\n    if (!loading) {\r\n      approveLaboratoryTestReport(id, { reportApprover: userId });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      loading,\r\n      showApproveReportModal,\r\n      selectedLaboratoryTest,\r\n      toggleApproveReportModal,\r\n    } = this.props;\r\n    const { reportIds, reportAttachmentFileName } =\r\n      selectedLaboratoryTest ?? {};\r\n\r\n    return (\r\n      <Modal\r\n        backdrop={true}\r\n        className={`modal-form-l`}\r\n        isOpen={showApproveReportModal}\r\n        toggle={toggleApproveReportModal}\r\n      >\r\n        {showApproveReportModal && selectedLaboratoryTest ? (\r\n          <React.Fragment>\r\n            <ModalHeader>Approve Laboratory Test Report</ModalHeader>\r\n            <ModalBody>\r\n              <SizeMe>\r\n                {({ size }) => (\r\n                  <Document\r\n                    file={`${backEndUrl}/temp/QA Laboratory Test Report ${\r\n                      reportIds[reportIds?.length - 1]\r\n                    }.pdf`}\r\n                  >\r\n                    <Page pageNumber={1} width={size.width ? size.width : 1} />\r\n                  </Document>\r\n                )}\r\n              </SizeMe>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button\r\n                className={`btn-shadow btn-multiple-state ${\r\n                  loading ? \"show-spinner\" : \"\"\r\n                }`}\r\n                color=\"secondary\"\r\n                onClick={\r\n                  !loading\r\n                    ? () => {\r\n                        toggleApproveReportModal({});\r\n                      }\r\n                    : null\r\n                }\r\n                type=\"button\"\r\n                variant=\"contained\"\r\n              >\r\n                <LoadingSpinner />\r\n                <span className=\"label\">Cancel</span>\r\n              </Button>\r\n              {reportAttachmentFileName ? (\r\n                <Button\r\n                  className={`btn-shadow btn-multiple-state ${\r\n                    loading ? \"show-spinner\" : \"\"\r\n                  }`}\r\n                  color=\"primary\"\r\n                  onClick={\r\n                    !loading\r\n                      ? () => {\r\n                          this.triggerDownloadLaboratoryTestAttachment();\r\n                        }\r\n                      : null\r\n                  }\r\n                  type=\"button\"\r\n                  variant=\"contained\"\r\n                >\r\n                  <LoadingSpinner />\r\n                  <span className=\"label\">\r\n                    <AttachmentOutlined />\r\n                  </span>\r\n                </Button>\r\n              ) : null}\r\n              <Button\r\n                className={`btn-shadow btn-multiple-state ml-1 ${\r\n                  loading ? \"show-spinner\" : \"\"\r\n                }`}\r\n                color=\"primary\"\r\n                onClick={\r\n                  !loading\r\n                    ? () => {\r\n                        this.triggerApproveLaboratoryTestReport();\r\n                      }\r\n                    : null\r\n                }\r\n                type=\"button\"\r\n                variant=\"contained\"\r\n              >\r\n                <LoadingSpinner />\r\n                <span className=\"label\">Approve</span>\r\n              </Button>\r\n            </ModalFooter>\r\n          </React.Fragment>\r\n        ) : null}\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ auth, qaLaboratoryTest }) => {\r\n  const { token } = auth;\r\n  const { loading, showApproveReportModal, selectedLaboratoryTest } =\r\n    qaLaboratoryTest;\r\n\r\n  return {\r\n    token,\r\n    loading,\r\n    showApproveReportModal,\r\n    selectedLaboratoryTest,\r\n  };\r\n};\r\n\r\nconst mapActionsToProps = {\r\n  downloadLaboratoryTestAttachment,\r\n  approveLaboratoryTestReport,\r\n  toggleApproveReportModal,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionsToProps\r\n)(ApproveLaboratoryTestReportModal);\r\n","import { Document, Page, pdfjs } from \"react-pdf\";\r\nimport { Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\r\nimport React, { PureComponent } from \"react\";\r\nimport {\r\n  approveLaboratoryTestRequest,\r\n  downloadLaboratoryTestAttachment,\r\n  toggleApproveRequestModal,\r\n} from \"../../redux/actions\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { LoadingSpinner } from \"../../components/Miscellaneous\";\r\nimport { SizeMe } from \"react-sizeme\";\r\nimport { backEndUrl } from \"../../constants/defaultValues\";\r\nimport { connect } from \"react-redux\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { AttachmentOutlined } from \"@material-ui/icons\";\r\npdfjs.GlobalWorkerOptions.workerSrc = `${backEndUrl}/assets/js/pdf.worker.min.js`;\r\n\r\nclass ApproveLaboratoryTestRequestModal extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      pageNumber: 1,\r\n    };\r\n  }\r\n\r\n  triggerDownloadLaboratoryTestAttachment() {\r\n    const { selectedLaboratoryTest, downloadLaboratoryTestAttachment } =\r\n      this.props;\r\n    const { requestAttachmentFileName } = selectedLaboratoryTest;\r\n\r\n    downloadLaboratoryTestAttachment({ fileName: requestAttachmentFileName });\r\n  }\r\n\r\n  triggerApproveLaboratoryTestRequest = () => {\r\n    const {\r\n      token,\r\n      loading,\r\n      selectedLaboratoryTest,\r\n      approveLaboratoryTestRequest,\r\n    } = this.props;\r\n    const userId = jwt_decode(token).id;\r\n    const { id } = selectedLaboratoryTest;\r\n\r\n    if (!loading) {\r\n      approveLaboratoryTestRequest(id, { requestApprover: userId });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      loading,\r\n      showApproveRequestModal,\r\n      selectedLaboratoryTest,\r\n      toggleApproveRequestModal,\r\n    } = this.props;\r\n    const { pageNumber } = this.state;\r\n    const { requestIds, requestAttachmentFileName } =\r\n      selectedLaboratoryTest ?? {};\r\n\r\n    return (\r\n      <Modal\r\n        backdrop={true}\r\n        className={`modal-form-l`}\r\n        isOpen={showApproveRequestModal}\r\n        toggle={toggleApproveRequestModal}\r\n      >\r\n        {showApproveRequestModal && selectedLaboratoryTest ? (\r\n          <React.Fragment>\r\n            <ModalHeader>Approve Laboratory Test Request</ModalHeader>\r\n            <ModalBody>\r\n              <SizeMe>\r\n                {({ size }) => (\r\n                  <div>\r\n                    <Document\r\n                      file={`${backEndUrl}/temp/QA Laboratory Test Request ${\r\n                        requestIds[requestIds?.length - 1]\r\n                      }.pdf`}\r\n                    >\r\n                      <Page\r\n                        pageNumber={pageNumber}\r\n                        width={size.width ? size.width : 1}\r\n                      />\r\n                    </Document>\r\n                  </div>\r\n                )}\r\n              </SizeMe>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button\r\n                className={`btn-shadow btn-multiple-state ${\r\n                  loading ? \"show-spinner\" : \"\"\r\n                }`}\r\n                color=\"secondary\"\r\n                onClick={\r\n                  !loading\r\n                    ? () => {\r\n                        toggleApproveRequestModal({});\r\n                      }\r\n                    : null\r\n                }\r\n                type=\"button\"\r\n                variant=\"contained\"\r\n              >\r\n                <LoadingSpinner />\r\n                <span className=\"label\">Cancel</span>\r\n              </Button>\r\n              {requestAttachmentFileName ? (\r\n                <Button\r\n                  className={`btn-shadow btn-multiple-state ${\r\n                    loading ? \"show-spinner\" : \"\"\r\n                  }`}\r\n                  color=\"primary\"\r\n                  onClick={\r\n                    !loading\r\n                      ? () => {\r\n                          this.triggerDownloadLaboratoryTestAttachment();\r\n                        }\r\n                      : null\r\n                  }\r\n                  type=\"button\"\r\n                  variant=\"contained\"\r\n                >\r\n                  <LoadingSpinner />\r\n                  <span className=\"label\">\r\n                    <AttachmentOutlined />\r\n                  </span>\r\n                </Button>\r\n              ) : null}\r\n              <Button\r\n                className={`btn-shadow btn-multiple-state ml-1 ${\r\n                  loading ? \"show-spinner\" : \"\"\r\n                }`}\r\n                color=\"primary\"\r\n                onClick={\r\n                  !loading\r\n                    ? () => {\r\n                        this.triggerApproveLaboratoryTestRequest();\r\n                      }\r\n                    : null\r\n                }\r\n                type=\"button\"\r\n                variant=\"contained\"\r\n              >\r\n                <LoadingSpinner />\r\n                <span className=\"label\">Approve</span>\r\n              </Button>\r\n            </ModalFooter>\r\n          </React.Fragment>\r\n        ) : null}\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ auth, qaLaboratoryTest }) => {\r\n  const { token } = auth;\r\n  const { loading, showApproveRequestModal, selectedLaboratoryTest } =\r\n    qaLaboratoryTest;\r\n\r\n  return {\r\n    token,\r\n    loading,\r\n    showApproveRequestModal,\r\n    selectedLaboratoryTest,\r\n  };\r\n};\r\n\r\nconst mapActionsToProps = {\r\n  toggleApproveRequestModal,\r\n  downloadLaboratoryTestAttachment,\r\n  approveLaboratoryTestRequest,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionsToProps\r\n)(ApproveLaboratoryTestRequestModal);\r\n","import { Document, Page, pdfjs } from \"react-pdf\";\r\nimport { Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\r\nimport React, { PureComponent } from \"react\";\r\nimport {\r\n  deleteLaboratoryTestRequest,\r\n  downloadLaboratoryTestAttachment,\r\n  toggleDeleteRequestModal,\r\n} from \"../../redux/actions\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { LoadingSpinner } from \"../../components/Miscellaneous\";\r\nimport { SizeMe } from \"react-sizeme\";\r\nimport { backEndUrl } from \"../../constants/defaultValues\";\r\nimport { connect } from \"react-redux\";\r\nimport { AttachmentOutlined } from \"@material-ui/icons\";\r\npdfjs.GlobalWorkerOptions.workerSrc = `${backEndUrl}/assets/js/pdf.worker.min.js`;\r\n\r\nclass DeleteLaboratoryTestRequestModal extends PureComponent {\r\n  triggerDownloadLaboratoryTestAttachment() {\r\n    const { selectedLaboratoryTest, downloadLaboratoryTestAttachment } =\r\n      this.props;\r\n    const { requestAttachmentFileName } = selectedLaboratoryTest;\r\n\r\n    downloadLaboratoryTestAttachment({ fileName: requestAttachmentFileName });\r\n  }\r\n\r\n  triggerDeleteLaboratoryTestRequest = () => {\r\n    const { loading, selectedLaboratoryTest, deleteLaboratoryTestRequest } =\r\n      this.props;\r\n    const { id } = selectedLaboratoryTest;\r\n\r\n    if (!loading) {\r\n      deleteLaboratoryTestRequest(id);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      loading,\r\n      showDeleteRequestModal,\r\n      selectedLaboratoryTest,\r\n      toggleDeleteRequestModal,\r\n    } = this.props;\r\n    const { requestIds, requestAttachmentFileName } =\r\n      selectedLaboratoryTest ?? {};\r\n\r\n    return (\r\n      <Modal\r\n        backdrop={true}\r\n        className={`modal-form-l`}\r\n        isOpen={showDeleteRequestModal}\r\n        toggle={toggleDeleteRequestModal}\r\n      >\r\n        {showDeleteRequestModal && selectedLaboratoryTest ? (\r\n          <React.Fragment>\r\n            <ModalHeader>Delete Laboratory Test Request</ModalHeader>\r\n            <ModalBody>\r\n              <SizeMe>\r\n                {({ size }) => (\r\n                  <Document\r\n                    file={`${backEndUrl}/temp/QA Laboratory Test Request ${\r\n                      requestIds[requestIds?.length - 1]\r\n                    }.pdf`}\r\n                  >\r\n                    <Page pageNumber={1} width={size.width ? size.width : 1} />\r\n                  </Document>\r\n                )}\r\n              </SizeMe>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button\r\n                className={`btn-shadow btn-multiple-state ${\r\n                  loading ? \"show-spinner\" : \"\"\r\n                }`}\r\n                color=\"secondary\"\r\n                onClick={\r\n                  !loading\r\n                    ? () => {\r\n                        toggleDeleteRequestModal({});\r\n                      }\r\n                    : null\r\n                }\r\n                type=\"button\"\r\n                variant=\"contained\"\r\n              >\r\n                <LoadingSpinner />\r\n                <span className=\"label\">Cancel</span>\r\n              </Button>\r\n              {requestAttachmentFileName ? (\r\n                <Button\r\n                  className={`btn-shadow btn-multiple-state ${\r\n                    loading ? \"show-spinner\" : \"\"\r\n                  }`}\r\n                  color=\"primary\"\r\n                  onClick={\r\n                    !loading\r\n                      ? () => {\r\n                          this.triggerDownloadLaboratoryTestAttachment();\r\n                        }\r\n                      : null\r\n                  }\r\n                  type=\"button\"\r\n                  variant=\"contained\"\r\n                >\r\n                  <LoadingSpinner />\r\n                  <span className=\"label\">\r\n                    <AttachmentOutlined />\r\n                  </span>\r\n                </Button>\r\n              ) : null}\r\n              <Button\r\n                className={`btn-shadow btn-multiple-state ${\r\n                  loading ? \"show-spinner\" : \"\"\r\n                }`}\r\n                color=\"primary\"\r\n                onClick={\r\n                  !loading\r\n                    ? () => {\r\n                        this.triggerDeleteLaboratoryTestRequest();\r\n                      }\r\n                    : null\r\n                }\r\n                type=\"button\"\r\n                variant=\"contained\"\r\n              >\r\n                <LoadingSpinner />\r\n                <span className=\"label\">Delete</span>\r\n              </Button>\r\n            </ModalFooter>\r\n          </React.Fragment>\r\n        ) : null}\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ auth, qaLaboratoryTest }) => {\r\n  const { token } = auth;\r\n  const { loading, showDeleteRequestModal, selectedLaboratoryTest } =\r\n    qaLaboratoryTest;\r\n\r\n  return {\r\n    token,\r\n    loading,\r\n    showDeleteRequestModal,\r\n    selectedLaboratoryTest,\r\n  };\r\n};\r\n\r\nconst mapActionsToProps = {\r\n  downloadLaboratoryTestAttachment,\r\n  deleteLaboratoryTestRequest,\r\n  toggleDeleteRequestModal,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionsToProps\r\n)(DeleteLaboratoryTestRequestModal);\r\n","import { Button, ButtonGroup } from \"@material-ui/core\";\r\nimport {\r\n  Col,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport { Document, Page, pdfjs } from \"react-pdf\";\r\nimport React, { PureComponent } from \"react\";\r\nimport {\r\n  downloadLaboratoryTestAttachment,\r\n  downloadLaboratoryTestReportDocument,\r\n  downloadLaboratoryTestRequestDocument,\r\n  toggleDownloadDocumentModal,\r\n} from \"../../redux/actions\";\r\nimport { LoadingSpinner } from \"../../components/Miscellaneous\";\r\nimport { SizeMe } from \"react-sizeme\";\r\nimport { backEndUrl } from \"../../constants/defaultValues\";\r\nimport { connect } from \"react-redux\";\r\nimport { AttachmentOutlined } from \"@material-ui/icons\";\r\npdfjs.GlobalWorkerOptions.workerSrc = `${backEndUrl}/assets/js/pdf.worker.min.js`;\r\n\r\nclass DownloadLaboratoryTestDocumentModal extends PureComponent {\r\n  triggerDownloadLaboratoryTestRequestDocument() {\r\n    const { selectedLaboratoryTest, downloadLaboratoryTestRequestDocument } =\r\n      this.props;\r\n    const { requestIds } = selectedLaboratoryTest;\r\n\r\n    downloadLaboratoryTestRequestDocument({\r\n      qaLaboratoryTestId: requestIds[requestIds?.length - 1],\r\n    });\r\n  }\r\n\r\n  triggerDownloadLaboratoryTestRequestAttachment() {\r\n    const { selectedLaboratoryTest, downloadLaboratoryTestAttachment } =\r\n      this.props;\r\n    const { requestAttachmentFileName } = selectedLaboratoryTest;\r\n\r\n    downloadLaboratoryTestAttachment({ fileName: requestAttachmentFileName });\r\n  }\r\n\r\n  triggerDownloadLaboratoryTestReportDocument() {\r\n    const { selectedLaboratoryTest, downloadLaboratoryTestReportDocument } =\r\n      this.props;\r\n    const { reportIds } = selectedLaboratoryTest;\r\n\r\n    downloadLaboratoryTestReportDocument({\r\n      qaLaboratoryTestId: reportIds[reportIds?.length - 1],\r\n    });\r\n  }\r\n\r\n  triggerDownloadLaboratoryTestReportAttachment() {\r\n    const { selectedLaboratoryTest, downloadLaboratoryTestAttachment } =\r\n      this.props;\r\n    const { reportAttachmentFileName } = selectedLaboratoryTest;\r\n\r\n    downloadLaboratoryTestAttachment({ fileName: reportAttachmentFileName });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      loading,\r\n      showDownloadDocumentModal,\r\n      selectedLaboratoryTest,\r\n      toggleDownloadDocumentModal,\r\n    } = this.props;\r\n    const {\r\n      requestIds,\r\n      reportIds,\r\n      requesterName,\r\n      requestApproverName,\r\n      requestAttachmentFileName,\r\n      reporterName,\r\n      reportApproverName,\r\n      reportAttachmentFileName,\r\n    } = selectedLaboratoryTest ?? {};\r\n\r\n    return (\r\n      <Modal\r\n        backdrop={true}\r\n        className={reporterName ? `modal-form-xl` : `modal-form-l`}\r\n        isOpen={showDownloadDocumentModal}\r\n        toggle={toggleDownloadDocumentModal}\r\n      >\r\n        {showDownloadDocumentModal && selectedLaboratoryTest ? (\r\n          <React.Fragment>\r\n            <ModalHeader>Download Laboratory Test Document</ModalHeader>\r\n            <ModalBody>\r\n              <Row>\r\n                {requesterName ? (\r\n                  <Col>\r\n                    <SizeMe>\r\n                      {({ size }) => (\r\n                        <Document\r\n                          file={`${backEndUrl}/temp/QA Laboratory Test Request ${\r\n                            requestIds[requestIds?.length - 1]\r\n                          }.pdf`}\r\n                          onLoadError={console.error}\r\n                        >\r\n                          <Page\r\n                            pageNumber={1}\r\n                            width={size.width ? size.width : 1}\r\n                          />\r\n                        </Document>\r\n                      )}\r\n                    </SizeMe>\r\n                  </Col>\r\n                ) : null}\r\n                {reporterName ? (\r\n                  <Col>\r\n                    <SizeMe>\r\n                      {({ size }) => (\r\n                        <Document\r\n                          file={`${backEndUrl}/temp/QA Laboratory Test Report ${\r\n                            reportIds[reportIds?.length - 1]\r\n                          }.pdf`}\r\n                        >\r\n                          <Page\r\n                            pageNumber={1}\r\n                            width={size.width ? size.width : 1}\r\n                          />\r\n                        </Document>\r\n                      )}\r\n                    </SizeMe>\r\n                  </Col>\r\n                ) : null}\r\n              </Row>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button\r\n                className={`btn-shadow btn-multiple-state ${\r\n                  loading ? \"show-spinner\" : \"\"\r\n                }`}\r\n                color=\"secondary\"\r\n                onClick={\r\n                  !loading\r\n                    ? () => {\r\n                        toggleDownloadDocumentModal({});\r\n                      }\r\n                    : null\r\n                }\r\n                type=\"button\"\r\n                variant=\"contained\"\r\n              >\r\n                <LoadingSpinner />\r\n                <span className=\"label\">Close</span>\r\n              </Button>\r\n              <ButtonGroup>\r\n                {requestApproverName ? (\r\n                  <Button\r\n                    className={`btn-shadow btn-multiple-state ${\r\n                      loading ? \"show-spinner\" : \"\"\r\n                    }`}\r\n                    color=\"primary\"\r\n                    onClick={\r\n                      !loading\r\n                        ? () => {\r\n                            this.triggerDownloadLaboratoryTestRequestDocument();\r\n                          }\r\n                        : null\r\n                    }\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                  >\r\n                    <LoadingSpinner />\r\n                    <span className=\"label\">\r\n                      Download Laboratory Request PDF\r\n                    </span>\r\n                  </Button>\r\n                ) : null}\r\n                {requestAttachmentFileName && requestApproverName ? (\r\n                  <Button\r\n                    className={`btn-shadow btn-multiple-state ${\r\n                      loading ? \"show-spinner\" : \"\"\r\n                    }`}\r\n                    color=\"primary\"\r\n                    onClick={\r\n                      !loading\r\n                        ? () => {\r\n                            this.triggerDownloadLaboratoryTestRequestAttachment();\r\n                          }\r\n                        : null\r\n                    }\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                  >\r\n                    <LoadingSpinner />\r\n                    <span className=\"label\">\r\n                      <AttachmentOutlined />\r\n                    </span>\r\n                  </Button>\r\n                ) : null}\r\n              </ButtonGroup>\r\n              {reportApproverName ? (\r\n                <ButtonGroup>\r\n                  {reportApproverName ? (\r\n                    <Button\r\n                      className={`btn-shadow btn-multiple-state ${\r\n                        loading ? \"show-spinner\" : \"\"\r\n                      }`}\r\n                      color=\"primary\"\r\n                      onClick={\r\n                        !loading\r\n                          ? () => {\r\n                              this.triggerDownloadLaboratoryTestReportDocument();\r\n                            }\r\n                          : null\r\n                      }\r\n                      type=\"button\"\r\n                      variant=\"contained\"\r\n                    >\r\n                      <LoadingSpinner />\r\n                      <span className=\"label\">\r\n                        Download Laboratory Report PDF\r\n                      </span>\r\n                    </Button>\r\n                  ) : null}\r\n                  {reportAttachmentFileName && reportApproverName ? (\r\n                    <Button\r\n                      className={`btn-shadow btn-multiple-state ${\r\n                        loading ? \"show-spinner\" : \"\"\r\n                      }`}\r\n                      color=\"primary\"\r\n                      onClick={\r\n                        !loading\r\n                          ? () => {\r\n                              this.triggerDownloadLaboratoryTestReportAttachment();\r\n                            }\r\n                          : null\r\n                      }\r\n                      type=\"button\"\r\n                      variant=\"contained\"\r\n                    >\r\n                      <LoadingSpinner />\r\n                      <span className=\"label\">\r\n                        <AttachmentOutlined />\r\n                      </span>\r\n                    </Button>\r\n                  ) : null}\r\n                </ButtonGroup>\r\n              ) : null}\r\n            </ModalFooter>\r\n          </React.Fragment>\r\n        ) : null}\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ auth, qaLaboratoryTest }) => {\r\n  const { token } = auth;\r\n  const { loading, showDownloadDocumentModal, selectedLaboratoryTest } =\r\n    qaLaboratoryTest;\r\n\r\n  return {\r\n    token,\r\n    loading,\r\n    showDownloadDocumentModal,\r\n    selectedLaboratoryTest,\r\n  };\r\n};\r\n\r\nconst mapActionsToProps = {\r\n  downloadLaboratoryTestAttachment,\r\n  downloadLaboratoryTestRequestDocument,\r\n  downloadLaboratoryTestReportDocument,\r\n  toggleDownloadDocumentModal,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionsToProps\r\n)(DownloadLaboratoryTestDocumentModal);\r\n","import { Button, IconButton, Input, TextField } from \"@material-ui/core\";\r\nimport {\r\n  Col,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport { Document, Page, pdfjs } from \"react-pdf\";\r\nimport { EditorState, convertFromRaw, convertToRaw } from \"draft-js\";\r\nimport { Form, Formik } from \"formik\";\r\nimport React, { PureComponent, Fragment } from \"react\";\r\nimport {\r\n  downloadLaboratoryTestAttachment,\r\n  editLaboratoryTestReport,\r\n  toggleEditReportModal,\r\n} from \"../../redux/actions\";\r\nimport { DeleteOutline as DeleteOutlineIcon } from \"@material-ui/icons\";\r\nimport { Editor } from \"react-draft-wysiwyg\";\r\nimport { LoadingSpinner } from \"../../components/Miscellaneous\";\r\nimport { SizeMe } from \"react-sizeme\";\r\nimport { backEndUrl } from \"../../constants/defaultValues\";\r\nimport { connect } from \"react-redux\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { laboratoryTestReportFormValidationSchema } from \"../../constants/validationSchemas\";\r\nimport { stateToHTML } from \"draft-js-export-html\";\r\npdfjs.GlobalWorkerOptions.workerSrc = `${backEndUrl}/assets/js/pdf.worker.min.js`;\r\n\r\nclass EditLaboratoryTestReportModal extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      reportDate: \"\",\r\n      reportNumber: \"\",\r\n      reportAttachmentFileName: null,\r\n      reportAttachmentFileOriginalName: null,\r\n      selectedFile: null,\r\n      deleteAttachment: false,\r\n      defaultEditorState: EditorState.createEmpty(),\r\n      editorState: EditorState.createEmpty(),\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, _prevState) {\r\n    const { showEditReportModal, selectedLaboratoryTest } = this.props;\r\n\r\n    if (\r\n      showEditReportModal !== prevProps.showEditReportModal &&\r\n      showEditReportModal\r\n    ) {\r\n      const {\r\n        reportDate,\r\n        reportNumber,\r\n        reportAttachmentFileName,\r\n        reportAttachmentFileOriginalName,\r\n        testResult,\r\n      } = selectedLaboratoryTest;\r\n\r\n      this.setState({\r\n        reportDate: reportDate?.substring(0, 10),\r\n        reportNumber,\r\n        reportAttachmentFileName,\r\n        reportAttachmentFileOriginalName,\r\n        selectedFile: null,\r\n        deleteAttachment: false,\r\n        defaultEditorState: EditorState.createWithContent(\r\n          convertFromRaw(JSON.parse(testResult))\r\n        ),\r\n        editorState: EditorState.createWithContent(\r\n          convertFromRaw(JSON.parse(testResult))\r\n        ),\r\n      });\r\n    }\r\n  }\r\n\r\n  onFileChange = (event) => {\r\n    this.setState({\r\n      selectedFile: event.target.files[0],\r\n      deleteAttachment: false,\r\n    });\r\n  };\r\n\r\n  deleteAttachment = () => {\r\n    this.setState({\r\n      deleteAttachment: true,\r\n    });\r\n  };\r\n\r\n  onTestResultChange = (editorState) => {\r\n    this.setState({ editorState });\r\n  };\r\n\r\n  triggerDownloadLaboratoryTestAttachment() {\r\n    const { selectedLaboratoryTest, downloadLaboratoryTestAttachment } =\r\n      this.props;\r\n    const { reportAttachmentFileName } = selectedLaboratoryTest;\r\n\r\n    downloadLaboratoryTestAttachment({ fileName: reportAttachmentFileName });\r\n  }\r\n\r\n  triggerEditLaboratoryTestReport = (values) => {\r\n    const { token, loading, selectedLaboratoryTest, editLaboratoryTestReport } =\r\n      this.props;\r\n    const { selectedFile, deleteAttachment, editorState } = this.state;\r\n    const userId = jwt_decode(token).id;\r\n    const { id } = selectedLaboratoryTest;\r\n    const { reportDate, reportNumber } = values;\r\n    let laboratoryTest = new FormData();\r\n\r\n    if (!loading) {\r\n      laboratoryTest.append(\"reporter\", userId);\r\n      laboratoryTest.append(\"reportDate\", reportDate);\r\n      laboratoryTest.append(\"reportNumber\", reportNumber);\r\n      laboratoryTest.append(\r\n        \"testResult\",\r\n        JSON.stringify(convertToRaw(editorState.getCurrentContent()))\r\n      );\r\n      laboratoryTest.append(\r\n        \"testResultHtml\",\r\n        stateToHTML(editorState.getCurrentContent())\r\n      );\r\n      if (selectedFile) {\r\n        laboratoryTest.append(\"file\", selectedFile);\r\n      }\r\n      if (deleteAttachment) {\r\n        laboratoryTest.append(\"file\", null);\r\n      }\r\n      editLaboratoryTestReport(id, laboratoryTest);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      loading,\r\n      showEditReportModal,\r\n      selectedLaboratoryTest,\r\n      toggleEditReportModal,\r\n    } = this.props;\r\n    const {\r\n      reportNumber,\r\n      reportDate,\r\n      reportAttachmentFileOriginalName,\r\n      deleteAttachment,\r\n      defaultEditorState,\r\n      editorState,\r\n    } = this.state;\r\n    const { requestIds } = selectedLaboratoryTest ?? {};\r\n    let laboratoryTestReportFormInitialValues = {};\r\n\r\n    if (showEditReportModal) {\r\n      laboratoryTestReportFormInitialValues = {\r\n        reportNumber,\r\n        reportDate,\r\n      };\r\n    }\r\n    return (\r\n      <Fragment>\r\n        <Modal\r\n          backdrop={true}\r\n          isOpen={showEditReportModal}\r\n          toggle={toggleEditReportModal}\r\n          style={{\r\n            maxWidth: \"1080px\",\r\n          }}\r\n        >\r\n          <Formik\r\n            initialValues={laboratoryTestReportFormInitialValues}\r\n            onSubmit={this.triggerEditLaboratoryTestReport}\r\n            validationSchema={laboratoryTestReportFormValidationSchema}\r\n          >\r\n            {({ values, touched, errors, handleChange }) => (\r\n              <Form autoComplete=\"off\">\r\n                <ModalHeader>Edit Laboratory Test Report</ModalHeader>\r\n                <ModalBody>\r\n                  {showEditReportModal ? (\r\n                    <SizeMe>\r\n                      {({ size }) => (\r\n                        <div>\r\n                          <Document\r\n                            file={`${backEndUrl}/temp/QA Laboratory Test Request ${\r\n                              requestIds[requestIds?.length - 1]\r\n                            }.pdf`}\r\n                          >\r\n                            <Page\r\n                              pageNumber={1}\r\n                              width={size.width ? size.width : 1}\r\n                            />\r\n                          </Document>\r\n                          <div\r\n                            style={{\r\n                              border: \"2.65px solid\",\r\n                              borderColor: \"#000000\",\r\n                              marginLeft: \"65px\",\r\n                              marginRight: \"50px\",\r\n                              padding: \"10px\",\r\n                            }}\r\n                          >\r\n                            <Row\r\n                              style={{\r\n                                paddingBottom: \"20px\",\r\n                              }}\r\n                            >\r\n                              <Col>\r\n                                <div\r\n                                  style={{\r\n                                    fontSize: 18,\r\n                                    fontWeight: \"bold\",\r\n                                    paddingBottom: \"10px\",\r\n                                    paddingTop: \"10px\",\r\n                                    textDecorationLine: \"underline\",\r\n                                  }}\r\n                                >\r\n                                  Report Date:\r\n                                </div>\r\n                                <TextField\r\n                                  error={\r\n                                    errors.reportDate && touched.reportDate\r\n                                  }\r\n                                  fullWidth\r\n                                  helperText={\r\n                                    errors.reportDate &&\r\n                                    touched.reportDate &&\r\n                                    errors.reportDate\r\n                                  }\r\n                                  InputLabelProps={{ shrink: false }}\r\n                                  name=\"reportDate\"\r\n                                  onChange={handleChange}\r\n                                  type=\"date\"\r\n                                  value={values.reportDate}\r\n                                />\r\n                              </Col>\r\n                              <Col>\r\n                                <div\r\n                                  style={{\r\n                                    fontSize: 18,\r\n                                    fontWeight: \"bold\",\r\n                                    paddingBottom: \"10px\",\r\n                                    paddingTop: \"10px\",\r\n                                    textDecorationLine: \"underline\",\r\n                                  }}\r\n                                >\r\n                                  Report Number:\r\n                                </div>\r\n                                <TextField\r\n                                  disabled\r\n                                  error={\r\n                                    errors.reportNumber && touched.reportNumber\r\n                                  }\r\n                                  fullWidth\r\n                                  helperText={\r\n                                    errors.reportNumber &&\r\n                                    touched.reportNumber &&\r\n                                    errors.reportNumber\r\n                                  }\r\n                                  InputLabelProps={{ shrink: false }}\r\n                                  name=\"reportNumber\"\r\n                                  onChange={handleChange}\r\n                                  type=\"text\"\r\n                                  value={values.reportNumber}\r\n                                />\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                {reportAttachmentFileOriginalName &&\r\n                                !deleteAttachment ? (\r\n                                  <div>\r\n                                    <span\r\n                                      style={{\r\n                                        fontSize: 18,\r\n                                        fontWeight: \"bold\",\r\n                                        paddingRight: \"10px\",\r\n                                        paddingTop: \"10px\",\r\n                                        textDecorationLine: \"underline\",\r\n                                      }}\r\n                                    >\r\n                                      Attachment File | Uploaded :\r\n                                    </span>{\" \"}\r\n                                    <Button\r\n                                      onClick={\r\n                                        !loading\r\n                                          ? () => {\r\n                                              this.triggerDownloadLaboratoryTestAttachment();\r\n                                            }\r\n                                          : null\r\n                                      }\r\n                                      size=\"small\"\r\n                                      variant=\"outlined\"\r\n                                    >\r\n                                      {reportAttachmentFileOriginalName}\r\n                                    </Button>\r\n                                    <IconButton\r\n                                      aria-label=\"delete\"\r\n                                      onClick={this.deleteAttachment}\r\n                                    >\r\n                                      <DeleteOutlineIcon fontSize=\"small\" />\r\n                                    </IconButton>\r\n                                  </div>\r\n                                ) : (\r\n                                  <div>\r\n                                    <span\r\n                                      style={{\r\n                                        fontSize: 18,\r\n                                        fontWeight: \"bold\",\r\n                                        paddingRight: \"10px\",\r\n                                        paddingTop: \"10px\",\r\n                                        textDecorationLine: \"underline\",\r\n                                      }}\r\n                                    >\r\n                                      Attachment File | Uploaded :\r\n                                    </span>\r\n                                    <label\r\n                                      style={{\r\n                                        fontSize: 18,\r\n                                      }}\r\n                                    >\r\n                                      No File Uploaded\r\n                                    </label>\r\n                                  </div>\r\n                                )}\r\n                                <Input\r\n                                  disableUnderline\r\n                                  label=\"Attachment File\"\r\n                                  onChange={this.onFileChange}\r\n                                  style={{\r\n                                    paddingBottom: \"20px\",\r\n                                  }}\r\n                                  type=\"file\"\r\n                                />\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <div\r\n                                  style={{\r\n                                    fontSize: 18,\r\n                                    fontWeight: \"bold\",\r\n                                    paddingBottom: \"10px\",\r\n                                    paddingTop: \"10px\",\r\n                                    textDecorationLine: \"underline\",\r\n                                  }}\r\n                                >\r\n                                  Description of Test Results:\r\n                                </div>\r\n                                <Editor\r\n                                  defaultEditorState={defaultEditorState}\r\n                                  editorState={editorState}\r\n                                  onEditorStateChange={this.onTestResultChange}\r\n                                  readOnly={false}\r\n                                  toolbar={{\r\n                                    options: [\"inline\", \"list\", \"history\"],\r\n                                  }}\r\n                                />\r\n                              </Col>\r\n                            </Row>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </SizeMe>\r\n                  ) : null}\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                  <Button\r\n                    className={`btn-shadow btn-multiple-state ${\r\n                      this.props.loading ? \"show-spinner\" : \"\"\r\n                    }`}\r\n                    color=\"primary\"\r\n                    type={!loading ? \"submit\" : \"button\"}\r\n                    variant=\"contained\"\r\n                  >\r\n                    <LoadingSpinner />\r\n                    <span className=\"label\">Save</span>\r\n                  </Button>\r\n                  <Button\r\n                    className={`btn-shadow btn-multiple-state ${\r\n                      this.props.loading ? \"show-spinner\" : \"\"\r\n                    }`}\r\n                    color=\"secondary\"\r\n                    onClick={\r\n                      !loading\r\n                        ? () => {\r\n                            toggleEditReportModal({});\r\n                          }\r\n                        : null\r\n                    }\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                  >\r\n                    <LoadingSpinner />\r\n                    <span className=\"label\">Cancel</span>\r\n                  </Button>\r\n                </ModalFooter>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Modal>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ auth, qaLaboratoryTest }) => {\r\n  const { token } = auth;\r\n  const { loading, showEditReportModal, selectedLaboratoryTest } =\r\n    qaLaboratoryTest;\r\n\r\n  return {\r\n    token,\r\n    loading,\r\n    showEditReportModal,\r\n    selectedLaboratoryTest,\r\n  };\r\n};\r\n\r\nconst mapActionsToProps = {\r\n  toggleEditReportModal,\r\n  downloadLaboratoryTestAttachment,\r\n  editLaboratoryTestReport,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionsToProps\r\n)(EditLaboratoryTestReportModal);\r\n","// Laboratories\r\nconst laboratories = [\r\n  \"QA 3100 - Solution Control\",\r\n  \"QA 3100 - Process Control\",\r\n  \"QA 3100 - Kimia\",\r\n  \"QA 3200 - Bonding & Composite\",\r\n  \"QA 3200 - Metallurgy\",\r\n];\r\n\r\n// Organization Units\r\nconst organizationUnitsDefault = [];\r\nconst organizationUnitsSolutionControl = [\r\n  \"DM 6000\",\r\n  \"DM 6100\",\r\n  \"DM 6200\",\r\n  \"MPD\",\r\n  \"QA 3100\",\r\n  \"QC 3400\",\r\n  \"QC 3500\",\r\n  \"QC 5300\",\r\n];\r\nconst organizationUnitsProcessControl = [\r\n  \"DM 6000\",\r\n  \"DM 6100\",\r\n  \"DM 6200\",\r\n  \"MPD\",\r\n  \"QA 3100\",\r\n  \"QC 3400\",\r\n  \"QC 3500\",\r\n  \"QC 5300\",\r\n];\r\nconst organizationUnitsKimia = [\r\n  \"DM 6000\",\r\n  \"DM 6100\",\r\n  \"DM 6200\",\r\n  \"MPD\",\r\n  \"QA 3100\",\r\n  \"QC 3400\",\r\n  \"QC 3500\",\r\n  \"QC 5300\",\r\n];\r\nconst organizationUnitsBondingAndComposite = [\r\n  \"ACS\",\r\n  \"MD - ME\",\r\n  \"Other\",\r\n  \"QC 1300\",\r\n  \"QC 1500\",\r\n  \"QC 3100\",\r\n  \"QC 3300\",\r\n  \"QC 3500\",\r\n  \"QC 4000\",\r\n  \"QC 4100\",\r\n  \"QC 4400\",\r\n  \"QC 5300\",\r\n  \"QC 5500\",\r\n  \"Training\",\r\n];\r\nconst organizationUnitsMetallurgy = [\r\n  \"MD - ME\",\r\n  \"Other\",\r\n  \"QA 3100\",\r\n  \"QA 3400\",\r\n  \"QC 1400\",\r\n  \"QC 3500\",\r\n];\r\n\r\n// Request Numbers\r\nconst requestNumbersDefault = [];\r\nconst requestNumbersSolutionControlDM6000 = [\"/RFLT/DM6000/\"];\r\nconst requestNumbersSolutionControlDM6100 = [\"/RFLT/DM6100/\"];\r\nconst requestNumbersSolutionControlDM6200 = [\"/RFLT/DM6200/\"];\r\nconst requestNumbersSolutionControlMPD = [\"/MD-ME/\"];\r\nconst requestNumbersSolutionControlQA3100 = [\"Laboratory Schedule\"];\r\nconst requestNumbersSolutionControlQC3400 = [\"/QC3400/HT/\"];\r\nconst requestNumbersSolutionControlQC3500 = [\r\n  \"/QC-ST/QC3500/\",\r\n  \"/SPT/QC3500/\",\r\n  \"/QC-ST/QC3500/\",\r\n];\r\nconst requestNumbersSolutionControlQC5300 = [\"/ QC5300/\"];\r\nconst requestNumbersProcessControlDM6000 = [\"/RFLT/DM6000/\"];\r\nconst requestNumbersProcessControlDM6100 = [\"/RFLT/DM6100/\"];\r\nconst requestNumbersProcessControlDM6200 = [\"/RFLT/DM6200/\"];\r\nconst requestNumbersProcessControlMPD = [\"/MD-ME/\"];\r\nconst requestNumbersProcessControlQA3100 = [\"Laboratory Schedule\"];\r\nconst requestNumbersProcessControlQC3400 = [\"/QC3400/HT/\"];\r\nconst requestNumbersProcessControlQC3500 = [\r\n  \"/QC-ST/QC3500/\",\r\n  \"/SPT/QC3500/\",\r\n  \"/QC-ST/QC3500/\",\r\n];\r\nconst requestNumbersProcessControlQC5300 = [\"/ QC5300/\"];\r\nconst requestNumbersBondingAndCompositeQC1300 = [\"/QC1300/RI/\"];\r\nconst requestNumbersBondingAndCompositeQC1500 = [\"/QC1500/CS/\"];\r\nconst requestNumbersBondingAndCompositeQC3100 = [\"/QC3100/\"];\r\nconst requestNumbersBondingAndCompositeQC3300 = [\"/QC3300/SP/\"];\r\nconst requestNumbersBondingAndCompositeQC3500 = [\"/QC-ST/QC3500/\"];\r\nconst requestNumbersBondingAndCompositeQC4000 = [\"/STK/QC4000/\"];\r\nconst requestNumbersBondingAndCompositeQC4100 = [\"/QC4100/\"];\r\nconst requestNumbersBondingAndCompositeQC4400 = [\"/QC4400/SP/\"];\r\nconst requestNumbersBondingAndCompositeQC5300 = [\"/QC5300/RI/\"];\r\nconst requestNumbersBondingAndCompositeQC5500 = [\"/QC5500/CS/\"];\r\nconst requestNumbersBondingAndCompositeMDME = [\"/MD-ME/\"];\r\nconst requestNumbersBondingAndCompositeACS = [\"RLT/\"];\r\nconst requestNumbersBondingAndCompositeTraining = [\"/Training/\"];\r\nconst requestNumbersMetallurgyQA3100 = [\"/QA3100/PC/\"];\r\nconst requestNumbersMetallurgyQA3400 = [\r\n  \"/TEST/.../QA3400/\",\r\n  \"/QC3400/SP/\",\r\n  \"/QC3400/HT/\",\r\n  \"NB/A/\",\r\n  \"AB/A/\",\r\n  \"CA/A/\",\r\n  \"CS/A/\",\r\n  \"KX/\",\r\n  \"ND/S/\",\r\n];\r\nconst requestNumbersMetallurgyQC1400 = [\"/QC1400/RI/\"];\r\nconst requestNumbersMetallurgyQC3100 = [\"/QC3100/\"];\r\nconst requestNumbersMetallurgyQC3500 = [\"/QC-ST/QC3500/\"];\r\nconst requestNumbersMetallurgyMDME = [\"/MD-ME/\"];\r\n\r\n// Programs\r\nconst programsDefault = [];\r\nconst programsSolutionControl = [\r\n  \"A321\",\r\n  \"A350 & BAe\",\r\n  \"A350\",\r\n  \"All Program\",\r\n  \"ADS\",\r\n  \"Airbus Helicopter\",\r\n  \"BAe/SPIRIT\",\r\n  \"Bell Helicopter\",\r\n  \"C-212 & C-295\",\r\n  \"C-212, C-295 & KFX\",\r\n  \"CASA & CN\",\r\n  \"CASA\",\r\n  \"CN 235 &  C212 & N219\",\r\n  \"CN-235, N-219, EC-MKII, MALE & NBELL\",\r\n  \"KFX/IFX\",\r\n  \"MALE\",\r\n  \"PS20\",\r\n];\r\nconst programsProcessControl = [\r\n  \"A321\",\r\n  \"A350 & BAe\",\r\n  \"A350\",\r\n  \"All Program\",\r\n  \"ADS\",\r\n  \"Airbus Helicopter\",\r\n  \"BAe/SPIRIT\",\r\n  \"Bell Helicopter\",\r\n  \"C-212 & C-295\",\r\n  \"C-212, C-295 & KFX\",\r\n  \"CASA & CN\",\r\n  \"CASA\",\r\n  \"CN 235 &  C212 & N219\",\r\n  \"CN-235, N-219, EC-MKII, MALE & NBELL\",\r\n  \"KFX/IFX\",\r\n  \"MALE\",\r\n  \"PS20\",\r\n];\r\nconst programsKimia = [];\r\nconst programsBondingAndComposite = [\r\n  \"All Program\",\r\n  \"AH/MK II\",\r\n  \"Certification\",\r\n  \"CN 235\",\r\n  \"CN 235, N 219\",\r\n  \"CN 295\",\r\n  \"CN 295 & CN 235\",\r\n  \"CN 295 & NC 212\",\r\n  \"Development\",\r\n  \"IF-X\",\r\n  \"Male\",\r\n  \"N 219\",\r\n  \"NB 412\",\r\n  \"NC 212\",\r\n  \"NC 212 & CN 235\",\r\n  \"NC 212, CN 235, N 219\",\r\n  \"NC 212, N 219\",\r\n  \"NC 212, NC 295, CN 235\",\r\n  \"NC 212, NC 295, CN 235, N 219\",\r\n  \"Qualification\",\r\n  \"R/I\",\r\n  \"Requalification\",\r\n  \"Retest\",\r\n];\r\nconst programsMetallurgy = [\r\n  \"All Program\",\r\n  \"AIRBUS\",\r\n  \"CN 295\",\r\n  \"CALIBRATION\",\r\n  \"CASA\",\r\n  \"CN 235\",\r\n  \"EC-COM 225 AE\",\r\n  \"KFX\",\r\n  \"MK II\",\r\n  \"N 219\",\r\n  \"N BELL\",\r\n  \"NC 212\",\r\n];\r\n\r\n// Materials\r\nconst materialsDefault = [];\r\nconst materialsSolutionControl = [\r\n  \"35NCD16\",\r\n  \"AISI 4340\",\r\n  \"ALODINE 1200S by brush\",\r\n  \"Acid pickling of copper\",\r\n  \"Acid pickling penetran\",\r\n  \"Act Before Supplementary\",\r\n  \"Activating bath\",\r\n  \"Activating for steel\",\r\n  \"Activating steel\",\r\n  \"Al Alloy\",\r\n  \"Alkaline Clean CAA\",\r\n  \"Alkaline clean Copper\",\r\n  \"Alkaline clean D / L\",\r\n  \"Alkaline clean PAA\",\r\n  \"Alkaline clean Ti\",\r\n  \"Alkaline clean anodize\",\r\n  \"Alkaline clean steel\",\r\n  \"Alodine CAA\",\r\n  \"Aluminetch\",\r\n  \"Anodic Degreasing\",\r\n  \"Anodize Ti\",\r\n  \"Cadmium plating CASA\",\r\n  \"Chemical Conversion coating D / L\",\r\n  \"Chemical milling D / L\",\r\n  \"Chromic acid CAA\",\r\n  \"Chromic acid D / L\",\r\n  \"Deionized\",\r\n  \"Demin water organo\",\r\n  \"Demineralized water LKI\",\r\n  \"Deoxidizing Ardrox 295GD\",\r\n  \"Deoxidizing D / L\",\r\n  \"Deoxidizing H / A\",\r\n  \"Deoxidizing PAA\",\r\n  \"Desmuting D / L\",\r\n  \"Desmuting Solution\",\r\n  \"Dilute chromate sealing\",\r\n  \"Etching Solution\",\r\n  \"Fluo nitric pickling Ti\",\r\n  \"Fluo nitric pickling\",\r\n  \"Hard anodize\",\r\n  \"Hard chrome plating\",\r\n  \"Hot water rinse\",\r\n  \"Marbel\",\r\n  \"Neutralizing\",\r\n  \"Nikel strike\",\r\n  \"Nitric acid pickling\",\r\n  \"Passivating type I\",\r\n  \"Passivating type II\",\r\n  \"Phosporic acid\",\r\n  \"Pickling solution\",\r\n  \"Post nikel plating\",\r\n  \"Pre Nikel\",\r\n  \"Pre Silver plating\",\r\n  \"STEEL\",\r\n  \"Sealing H / A\",\r\n  \"Silver plating\",\r\n  \"Sodium dichromate\",\r\n  \"Stripping Cadmium\",\r\n  \"Sulphuric acid D / L\",\r\n  \"Supplementary type II\",\r\n  \"Water quenching\",\r\n];\r\nconst materialsProcessControl = [\r\n  \"35NCD16\",\r\n  \"AISI 4340\",\r\n  \"ALODINE 1200S by brush\",\r\n  \"Acid pickling of copper\",\r\n  \"Acid pickling penetran\",\r\n  \"Act Before Supplementary\",\r\n  \"Activating bath\",\r\n  \"Activating for steel\",\r\n  \"Activating steel\",\r\n  \"Al Alloy\",\r\n  \"Alkaline Clean CAA\",\r\n  \"Alkaline clean Copper\",\r\n  \"Alkaline clean D / L\",\r\n  \"Alkaline clean PAA\",\r\n  \"Alkaline clean Ti\",\r\n  \"Alkaline clean anodize\",\r\n  \"Alkaline clean steel\",\r\n  \"Alodine CAA\",\r\n  \"Aluminetch\",\r\n  \"Anodic Degreasing\",\r\n  \"Anodize Ti\",\r\n  \"Cadmium plating CASA\",\r\n  \"Chemical Conversion coating D / L\",\r\n  \"Chemical milling D / L\",\r\n  \"Chromic acid CAA\",\r\n  \"Chromic acid D / L\",\r\n  \"Deionized\",\r\n  \"Demin water organo\",\r\n  \"Demineralized water LKI\",\r\n  \"Deoxidizing Ardrox 295GD\",\r\n  \"Deoxidizing D / L\",\r\n  \"Deoxidizing H / A\",\r\n  \"Deoxidizing PAA\",\r\n  \"Desmuting D / L\",\r\n  \"Desmuting Solution\",\r\n  \"Dilute chromate sealing\",\r\n  \"Etching Solution\",\r\n  \"Fluo nitric pickling Ti\",\r\n  \"Fluo nitric pickling\",\r\n  \"Hard anodize\",\r\n  \"Hard chrome plating\",\r\n  \"Hot water rinse\",\r\n  \"Marbel\",\r\n  \"Neutralizing\",\r\n  \"Nikel strike\",\r\n  \"Nitric acid pickling\",\r\n  \"Passivating type I\",\r\n  \"Passivating type II\",\r\n  \"Phosporic acid\",\r\n  \"Pickling solution\",\r\n  \"Post nikel plating\",\r\n  \"Pre Nikel\",\r\n  \"Pre Silver plating\",\r\n  \"STEEL\",\r\n  \"Sealing H / A\",\r\n  \"Silver plating\",\r\n  \"Sodium dichromate\",\r\n  \"Stripping Cadmium\",\r\n  \"Sulphuric acid D / L\",\r\n  \"Supplementary type II\",\r\n  \"Water quenching\",\r\n];\r\nconst materialsKimia = [];\r\nconst materialsBondingAndComposite = [\r\n  \"Acrylic\",\r\n  \"Adhesive\",\r\n  \"Adhesive + Pasa Jell\",\r\n  \"Adhesive Film\",\r\n  \"Adhesive Foam\",\r\n  \"Adhesive Primer\",\r\n  \"Compound\",\r\n  \"Decorative Laminate\",\r\n  \"Epoxy Adhesive\",\r\n  \"Epoxy Filler\",\r\n  \"Epoxy Resin\",\r\n  \"FM 1000\",\r\n  \"Foil\",\r\n  \"Honeycomb Core\",\r\n  \"Locking System\",\r\n  \"Low Density Resin\",\r\n  \"Maskant Chemill\",\r\n  \"Masking Tape\",\r\n  \"Panel Assy\",\r\n  \"Phenolic Resin\",\r\n  \"Polyurethane Elastomer\",\r\n  \"Prepreg\",\r\n  \"Prepreg Carbon\",\r\n  \"Prepreg Carbon + Core\",\r\n  \"Prepreg Glass\",\r\n  \"Prepreg Glass (304)\",\r\n  \"Prepreg Glass + Core\",\r\n  \"Prepreg Glass + Core + Adhesive\",\r\n  \"Prepreg Kevlar\",\r\n  \"Prepreg Kevlar + Core\",\r\n  \"Prepreg Phenolic\",\r\n  \"Prepreg Phenolic + Core\",\r\n  \"Resin\",\r\n  \"Sealant\",\r\n  \"Sealant Tape\",\r\n  \"Silicon Rubber\",\r\n  \"Tape\",\r\n  \"Thread\",\r\n];\r\nconst materialsMetallurgy = [];\r\n\r\n// Types\r\nconst typesDefault = [];\r\nconst typesSolutionControl = [\r\n  \"15-5 PH\",\r\n  \"AISI 4130\",\r\n  \"AISI 4340\",\r\n  \"Al 2024 T3 Bare\",\r\n  \"Al 7075 T6 Bare\",\r\n  \"F7CT13\",\r\n  \"N/A\",\r\n  \"Z2CN18-10\",\r\n];\r\nconst typesProcessControl = [\r\n  \"15-5 PH\",\r\n  \"AISI 4130\",\r\n  \"AISI 4340\",\r\n  \"Al 2024 T3 Bare\",\r\n  \"Al 7075 T6 Bare\",\r\n  \"F7CT13\",\r\n  \"N/A\",\r\n  \"Z2CN18-10\",\r\n];\r\nconst typesKimia = [];\r\nconst typesBondingAndComposite = [\r\n  \"Z-19.101\",\r\n  \"299-947-100 TY II CL 2\",\r\n  \"299-947-121 Ty 1 + MB 1665\",\r\n  \"299-947-320 TY I\",\r\n  \"299-947-320 TY II\",\r\n  \"299-947-359 TY I\",\r\n  \"3 M # 250\",\r\n  \"AF 163-2K.03\",\r\n  \"AF 163-2K.06\",\r\n  \"AF 191-K.08\",\r\n  \"EC 3924 B\",\r\n  \"FM 300K . 05 (Z-19.435)\",\r\n  \"FM 300M . 03 (Z-19.425)\",\r\n  \"FM 73 M. OST 03\",\r\n  \"FM 73 M. OST 06\",\r\n  \"FM 73 M. OST 06 + EC 3924 B\",\r\n  \"LN9135B\",\r\n  \"N09 - 1009\",\r\n  \"N09 - 1010\",\r\n  \"N09 - 1013\",\r\n  \"NMS 8 - 514 TY I CLASS 1\",\r\n  \"NMS 8 - 514 TY II CLASS 2\",\r\n  \"NMS 8-226 TY II Class 3A\",\r\n  \"NMS 8-226 TY II Class 3A + Z-17.607\",\r\n  \"NMS 8-226 TY II Class 3B\",\r\n  \"NMS 8-226 TY II Class 3B + Z-17.607\",\r\n  \"Non Metal\",\r\n  \"Turco 5580 G\",\r\n  \"Z-15.415\",\r\n  \"Z-15.915\",\r\n  \"Z-19.101 + Z-17.654\",\r\n  \"Z-19.101 + Z-17.654 + Z-15.429\",\r\n  \"Z-19.226 + Z-17.655\",\r\n  \"Z-19.304\",\r\n  \"Z-19.776\",\r\n  \"Z-19.776 + Z-17.654\",\r\n  \"Z-19.904\",\r\n  \"Z-19.904 + Z-17.654\",\r\n  \"Z-19.905\",\r\n  \"Z-19.905 + Z-17.654\",\r\n];\r\nconst typesBondingAndCompositeAdhesive = [\r\n  \"299 - 947 - 100 TY II CL 2\",\r\n  \"299 - 947 - 359 TY I\",\r\n];\r\nconst typesBondingAndCompositeAdhesivePasaJell = [\r\n  \"299 - 947 - 121 TY 1 + MB 1665\",\r\n];\r\nconst typesBondingAndCompositeAdhesiveFilm = [\r\n  \"299 - 947 - 320 TY I\",\r\n  \"299 - 947 - 320 TY II\",\r\n  \"AF 163 - 2K.06\",\r\n  \"AF 163 - 2K.03\",\r\n  \"AF 191 - K.08\",\r\n  \"FM 73 M. OST 03\",\r\n  \"FM 73 M. OST 06\",\r\n  \"FM 73 M. OST 06 + EC 3924 B\",\r\n  \"FM 300M . 03 (Z-19.425)\",\r\n  \"FM 300K . 05 (Z-19.435)\",\r\n];\r\nconst typesBondingAndCompositeAdhesiveFoam = [\"Z-15.415\"];\r\nconst typesBondingAndCompositeAdhesivePrimer = [\"Z-15.915\", \"EC 3924 B\"];\r\nconst typesBondingAndCompositeAdhesiveMaskantChemill = [\"Turco 5580 G\"];\r\nconst typesBondingAndCompositeAdhesiveMaskingTape = [\"3 M # 250\"];\r\nconst typesBondingAndCompositePhenolicResin = [\"Non Metal\"];\r\nconst typesBondingAndCompositePrepregCarbon = [\r\n  \"N09 - 1009\",\r\n  \"N09 - 1010\",\r\n  \"N09 - 1013\",\r\n  \"NMS 8 - 514 TY I CLASS 1\",\r\n  \"NMS 8 - 514 TY II CLASS 2\",\r\n  \"Z-19.776\",\r\n];\r\nconst typesBondingAndCompositePrepregCarbonCore = [\r\n  \"Z-19.776 + Z-17.654\",\r\n  \"Z-19.226 + Z-17.655\",\r\n];\r\nconst typesBondingAndCompositePrepregGlass = [\"Z-19.101\"];\r\nconst typesBondingAndCompositePrepregGlass304 = [\"Z-19.304\"];\r\nconst typesBondingAndCompositePrepregGlassCore = [\"Z-19.101 + Z-17.654\"];\r\nconst typesBondingAndCompositePrepregGlassCoreAdhesive = [\r\n  \"Z-19.101 + Z-17.654 + Z-15.429\",\r\n];\r\nconst typesBondingAndCompositePrepregKevlar = [\"Z-19.904\", \"Z-19.905\"];\r\nconst typesBondingAndCompositePrepregKevlarCore = [\r\n  \"Z-19.904 + Z-17.654\",\r\n  \"Z-19.905 + Z-17.654\",\r\n];\r\nconst typesBondingAndCompositePrepregPhenolic = [\r\n  \"NMS 8-226 TY II Class 3A\",\r\n  \"NMS 8-226 TY II Class 3B\",\r\n];\r\nconst typesBondingAndCompositePrepregPhenolicCore = [\r\n  \"NMS 8-226 TY II Class 3A + Z-17.607\",\r\n  \"NMS 8-226 TY II Class 3B + Z-17.607\",\r\n];\r\nconst typesBondingAndCompositeThread = [\r\n  \"NMS 8-226 TY II Class 3A + Z-17.607\",\r\n  \"NMS 8-226 TY II Class 3B + Z-17.607\",\r\n];\r\nconst typesMetallurgy = [];\r\n\r\n// Specifications\r\nconst specificationsDefault = [];\r\nconst specificationsSolutionControl = [\r\n  \"05/RFD/07/2009\",\r\n  \"21F\",\r\n  \"ABP 1 - 1022\",\r\n  \"ABP 1 - 4041\",\r\n  \"ABP 1 - 5057\",\r\n  \"ABP 1 – 1023\",\r\n  \"ABP 8-1296\",\r\n  \"AIMS 09-00-003\",\r\n  \"AIPI 02-01-003\",\r\n  \"AIPI 04-01-001\",\r\n  \"AMS 5510\",\r\n  \"AMS 5529\",\r\n  \"AMS2700\",\r\n  \"ASN-A3104-8622\",\r\n  \"ASNA 3100-8581\",\r\n  \"BPS 4001, BVAR–FW-2015-021\",\r\n  \"BPS 4006 & BVAR-FW-2015-023\",\r\n  \"BPS 4007 , BVAR-FW-2015-025, PIC No: ST/NB/CAP-ST-07\",\r\n  \"BPS 4182  & BVAR–FW-2015-022\",\r\n  \"BPS 4352\",\r\n  \"BPS 4352, BVAR-FW-2015-24\",\r\n  \"BPS 4387, BVAR–FW -2015-026\",\r\n  \"D048ND04010 & PS 20-O-35-3000\",\r\n  \"I + D - P 072, RFD NO. 03/RFD/05/2009\",\r\n  \"I + D – P 115\",\r\n  \"I+D-P 038\",\r\n  \"I+D-P 202\",\r\n  \"I+D-P 202\",\r\n  \"I+D-P 213 & PS 20-O-35-2100\",\r\n  \"I+D-P 213 , RFD NO.22/RFD/01/2010\",\r\n  \"I+D-P 46\",\r\n  \"I+D-P-038\",\r\n  \"I+D-P-110 \",\r\n  \"MIL A-8625, PIC No. ST/KX/HAD-AL-01\",\r\n  \"MIL S 18729\",\r\n  \"MIL-A-8625 Type 1\",\r\n  \"MIL-DTL-5541\",\r\n  \"MIL-T-9046\",\r\n  \"N/A\",\r\n  \"PIC NO.ST/KX/CBP-AL-02\",\r\n  \"PIC No : ST/EC/ECP-01\",\r\n  \"PIC No. ST/AB/TSA-AL-01\",\r\n  \"PIC No. ST/AB/TSA-AL-03\",\r\n  \"PIC No. ST/EC/CAA-01\",\r\n  \"PIC No. ST/EC/CCC-01\",\r\n  \"PIC No. ST/EC/ECP-01 & RFD 07/ECP/EC/05/2009\",\r\n  \"PIC No. ST/EC/SAA-01\",\r\n  \"PIC No.ST/EC/CAP-01\",\r\n  \"PIC No.ST/EC/CAP-02\",\r\n  \"PIC No.ST/EC/CBP-02\",\r\n  \"PIC No.ST/EC/CBP-03\",\r\n  \"PIC ST/AB/CCC-AL-01\",\r\n  \"PS 20-O-35-0106\",\r\n  \"PS 20-O-35-0114\",\r\n  \"PS 20-O-35-1100\",\r\n  \"PS 20-O-35-3000\",\r\n  \"PS 20-O-35-3808\",\r\n  \"PS. 20 – 0 – 35 – 0020\",\r\n  \"PS.20-O-35-2200\",\r\n  \"PS.20-O-35-3310\",\r\n  \"QQA 250/12\",\r\n  \"QQA 250/4\",\r\n  \"QQA200/11\",\r\n  \"QQA250/13\",\r\n  \"QQA250/5\",\r\n  \"RFD No.03/CN/05/2008\",\r\n];\r\nconst specificationsProcessControl = [\r\n  \"05/RFD/07/2009\",\r\n  \"21F\",\r\n  \"ABP 1 - 1022\",\r\n  \"ABP 1 - 4041\",\r\n  \"ABP 1 - 5057\",\r\n  \"ABP 1 – 1023\",\r\n  \"ABP 8-1296\",\r\n  \"AIMS 09-00-003\",\r\n  \"AIPI 02-01-003\",\r\n  \"AIPI 04-01-001\",\r\n  \"AMS 5510\",\r\n  \"AMS 5529\",\r\n  \"AMS2700\",\r\n  \"ASN-A3104-8622\",\r\n  \"ASNA 3100-8581\",\r\n  \"BPS 4001, BVAR–FW-2015-021\",\r\n  \"BPS 4006 & BVAR-FW-2015-023\",\r\n  \"BPS 4007 , BVAR-FW-2015-025, PIC No: ST/NB/CAP-ST-07\",\r\n  \"BPS 4182  & BVAR–FW-2015-022\",\r\n  \"BPS 4352\",\r\n  \"BPS 4352, BVAR-FW-2015-24\",\r\n  \"BPS 4387, BVAR–FW -2015-026\",\r\n  \"D048ND04010 & PS 20-O-35-3000\",\r\n  \"I + D - P 072, RFD NO. 03/RFD/05/2009\",\r\n  \"I + D – P 115\",\r\n  \"I+D-P 038\",\r\n  \"I+D-P 202\",\r\n  \"I+D-P 202\",\r\n  \"I+D-P 213 & PS 20-O-35-2100\",\r\n  \"I+D-P 213 , RFD NO.22/RFD/01/2010\",\r\n  \"I+D-P 46\",\r\n  \"I+D-P-038\",\r\n  \"I+D-P-110 \",\r\n  \"MIL A-8625, PIC No. ST/KX/HAD-AL-01\",\r\n  \"MIL S 18729\",\r\n  \"MIL-A-8625 Type 1\",\r\n  \"MIL-DTL-5541\",\r\n  \"MIL-T-9046\",\r\n  \"N/A\",\r\n  \"PIC NO.ST/KX/CBP-AL-02\",\r\n  \"PIC No : ST/EC/ECP-01\",\r\n  \"PIC No. ST/AB/TSA-AL-01\",\r\n  \"PIC No. ST/AB/TSA-AL-03\",\r\n  \"PIC No. ST/EC/CAA-01\",\r\n  \"PIC No. ST/EC/CCC-01\",\r\n  \"PIC No. ST/EC/ECP-01 & RFD 07/ECP/EC/05/2009\",\r\n  \"PIC No. ST/EC/SAA-01\",\r\n  \"PIC No.ST/EC/CAP-01\",\r\n  \"PIC No.ST/EC/CAP-02\",\r\n  \"PIC No.ST/EC/CBP-02\",\r\n  \"PIC No.ST/EC/CBP-03\",\r\n  \"PIC ST/AB/CCC-AL-01\",\r\n  \"PS 20-O-35-0106\",\r\n  \"PS 20-O-35-0114\",\r\n  \"PS 20-O-35-1100\",\r\n  \"PS 20-O-35-3000\",\r\n  \"PS 20-O-35-3808\",\r\n  \"PS. 20 – 0 – 35 – 0020\",\r\n  \"PS.20-O-35-2200\",\r\n  \"PS.20-O-35-3310\",\r\n  \"QQA 250/12\",\r\n  \"QQA 250/4\",\r\n  \"QQA200/11\",\r\n  \"QQA250/13\",\r\n  \"QQA250/5\",\r\n  \"RFD No.03/CN/05/2008\",\r\n];\r\nconst specificationsKimia = [];\r\nconst specificationsBondingAndComposite = [\r\n  \"I + D - P 052\",\r\n  \"299-947-038\",\r\n  \"299-947-076\",\r\n  \"299-947-079\",\r\n  \"299-947-091\",\r\n  \"299-947-097\",\r\n  \"299-947-099\",\r\n  \"299-947-100\",\r\n  \"299-947-104\",\r\n  \"299-947-107\",\r\n  \"299-947-121\",\r\n  \"299-947-125\",\r\n  \"299-947-152\",\r\n  \"299-947-299\",\r\n  \"299-947-320\",\r\n  \"299-947-326\",\r\n  \"299-947-359\",\r\n  \"299-947-399\",\r\n  \"AIMS 04-05-010\",\r\n  \"AIMS 04-05-012\",\r\n  \"AIMS 04-05-014\",\r\n  \"AIMS 04-05-015\",\r\n  \"AIMS 05-01-005\",\r\n  \"AIMS 10-01-001\",\r\n  \"AIMS 10-01-003\",\r\n  \"AIMS 10-01-005\",\r\n  \"AIMS 10-01-006\",\r\n  \"AIMS 10-02-001\",\r\n  \"AIMS 10-04-020\",\r\n  \"AIMS 10-04-023\",\r\n  \"AIMS 10-04-026\",\r\n  \"AIMS 10-07-004\",\r\n  \"AIMS 11-02-001\",\r\n  \"AIPI 09-03-001\",\r\n  \"AITM 1 - 0002\",\r\n  \"AITM 1 - 0003\",\r\n  \"AITM 1 - 0030\",\r\n  \"AITM 2 - 0013\",\r\n  \"AMS 3276\",\r\n  \"AMS 3374\",\r\n  \"AMS A-8576\",\r\n  \"ASTM C 273\",\r\n  \"ASTM C 365\",\r\n  \"ASTM D 1000\",\r\n  \"ASTM D 1002\",\r\n  \"ASTM D 1876\",\r\n  \"ASTM D 2256\",\r\n  \"ASTM D 2344\",\r\n  \"ASTM D 3039\",\r\n  \"ASTM D 3330\",\r\n  \"ASTM D 3410\",\r\n  \"ASTM D 349\",\r\n  \"ASTM D 3518\",\r\n  \"ASTM D 3759\",\r\n  \"ASTM D 412\",\r\n  \"ASTM D 575\",\r\n  \"ASTM D 5961\",\r\n  \"ASTM D 624\",\r\n  \"ASTM D 638\",\r\n  \"ASTM D 6641\",\r\n  \"ASTM D 695\",\r\n  \"ASTM D 7078\",\r\n  \"ASTM D 790\",\r\n  \"ASTM D 882\",\r\n  \"ASTM D 903\",\r\n  \"BMS 5-28\",\r\n  \"BMS 5-30\",\r\n  \"BPS 4352\",\r\n  \"CAN 36046\",\r\n  \"CAN 36078\",\r\n  \"CAN 36082\",\r\n  \"CAN 36094\",\r\n  \"CAN 36107\",\r\n  \"CAN 36140\",\r\n  \"CAN 36161\",\r\n  \"CAN 36165\",\r\n  \"CASA 1125\",\r\n  \"EN 2243\",\r\n  \"EN 2377\",\r\n  \"EN 2563\",\r\n  \"EN 2667\",\r\n  \"I + D - E 127\",\r\n  \"I + D - E 128\",\r\n  \"I + D - E 129\",\r\n  \"I + D - E 130\",\r\n  \"I + D - E 146\",\r\n  \"I + D - E 246\",\r\n  \"I + D - E 253\",\r\n  \"I + D - E 254\",\r\n  \"I + D - E 255\",\r\n  \"I + D - E 258\",\r\n  \"I + D - E 286\",\r\n  \"I + D - E 288\",\r\n  \"I + D - E 289\",\r\n  \"I + D - E 51\",\r\n  \"I + D - N 11\",\r\n  \"I + D - N 12\",\r\n  \"I + D - N 13\",\r\n  \"I + D - N 14\",\r\n  \"I + D - N 15\",\r\n  \"I + D - N 16\",\r\n  \"I + D - N 17\",\r\n  \"I + D - N 18\",\r\n  \"I + D - N 19\",\r\n  \"I + D - N 200\",\r\n  \"I + D - N 24\",\r\n  \"I + D - P 176\",\r\n  \"I + D - P 233\",\r\n  \"I + D - P 237\",\r\n  \"I + D - P 250\",\r\n  \"I + D - P 251\",\r\n  \"I + D - P 330\",\r\n  \"ISO 527-2\",\r\n  \"ISO 604\",\r\n  \"MIL A 46106\",\r\n  \"MIL A 46146B\",\r\n  \"MIL A 52194 A\",\r\n  \"MIL PRF 81733\",\r\n  \"MMM - A - 121\",\r\n  \"MMM A 132\",\r\n  \"MMM A 1617\",\r\n  \"N09-1013\",\r\n  \"NMS 5-35\",\r\n  \"NMS 8 -226\",\r\n  \"NMS 8 -514\",\r\n  \"NMS 9-4\",\r\n  \"PS 20-0-34-0151\",\r\n  \"PS 20-0-34-0154\",\r\n  \"PS 20-0-34-9030\",\r\n  \"PS 20-0-34-9106\",\r\n  \"PS 20-0-34-9107\",\r\n  \"PS 20-0-34-9108\",\r\n];\r\nconst specificationsMetallurgy = [\r\n  \"ASTM B487\",\r\n  \"ASTM B582\",\r\n  \"AWS D17.1\",\r\n  \"AWS D17.2\",\r\n  \"BPS 4006\",\r\n  \"I + D - E 082\",\r\n  \"I + D - P 182A\",\r\n  \"IK-E018\",\r\n  \"PS.20-0-35-0020\",\r\n  \"PS.20-0-35-0114\",\r\n  \"PS.20-0-35-3000\",\r\n];\r\n\r\n// Manufacturers\r\nconst manufacturersDefault = [];\r\nconst manufacturersSolutionControl = [\"N/A\", \"BS.AERO\", \"PT DI\"];\r\nconst manufacturersProcessControl = [\"N/A\", \"BS.AERO\", \"PT DI\"];\r\nconst manufacturersKimia = [];\r\nconst manufacturersBondingAndComposite = [\r\n  \"Bonding Composite\",\r\n  \"3M\",\r\n  \"Cytec\",\r\n  \"Dow Corning\",\r\n  \"Drimm\",\r\n  \"Euro Composite\",\r\n  \"Federal Mogul\",\r\n  \"Flamemaster\",\r\n  \"Goodrich\",\r\n  \"HB Fuller\",\r\n  \"Henkel\",\r\n  \"Hexcel\",\r\n  \"Huntsman\",\r\n  \"Lamart Corp\",\r\n  \"LJF\",\r\n  \"Loctite\",\r\n  \"Magnolia\",\r\n  \"Momentive\",\r\n  \"Norplex Inc\",\r\n  \"Plascore\",\r\n  \"PPG Aerospace\",\r\n  \"Rogers Corp\",\r\n  \"Scotchal 3669\",\r\n  \"Smooth On\",\r\n  \"Solvay\",\r\n  \"Sandbond Corp\",\r\n];\r\nconst manufacturersMetallurgy = [];\r\n\r\n// Reason of Tests\r\nconst reasonOfTestsDefault = [];\r\nconst reasonOfTestsSolutionControl = [\"Periodical Test\", \"Before Use\"];\r\nconst reasonOfTestsProcessControl = [\"Periodical Test\", \"Before Use\"];\r\nconst reasonOfTestsKimia = [];\r\nconst reasonOfTestBondingAndComposite = [\r\n  \"Receiving Inspection\",\r\n  \"Certification\",\r\n  \"Development\",\r\n  \"Production\",\r\n  \"Qualification\",\r\n  \"Requalification\",\r\n  \"Retest\",\r\n];\r\nconst reasonOfTestsMetallurgy = [\r\n  \"Calibration\",\r\n  \"Certification\",\r\n  \"Pre Production Test\",\r\n];\r\n\r\n// Conditions\r\nconst conditionsDefault = [];\r\nconst conditionsSolutionControl = [\"N/A\", \"Good\", \"Not Good\"];\r\nconst conditionsProcessControl = [\"N/A\", \"Good\", \"Not Good\"];\r\nconst conditionsKimia = [\"N/A\", \"Good\", \"Not Good\"];\r\nconst conditionsBondingAndComposite = [\"Good\", \"Not Good\"];\r\nconst conditionsMetallurgy = [\"Good\", \"Corrosion\", \"Gouged\"];\r\n\r\n// Units\r\nconst units = [\"Roll\"];\r\n\r\n// Type of Tests\r\nconst typeOfTests = [\r\n  \"Adhesion Painting Test\",\r\n  \"Adhesion Test\",\r\n  \"Api Gravity Test\",\r\n  \"Appearance Test\",\r\n  \"Application Time Test\",\r\n  \"Areal Fiber Weight Test\",\r\n  \"Assay Test\",\r\n  \"Bending Test\",\r\n  \"Bondline Thickness Test\",\r\n  \"Brightness Test\",\r\n  \"Clad Diffusion Test\",\r\n  \"Cloride Test\",\r\n  \"Coating Weight Test\",\r\n  \"Colour Test\",\r\n  \"Compression Modulus Test\",\r\n  \"Compression Strength Test\",\r\n  \"Compression Test\",\r\n  \"Concentration of Alodine 1200 S Test\",\r\n  \"Conductivity Test\",\r\n  \"Copper Corrosion Test\",\r\n  \"Corrosion Inhibitor Test\",\r\n  \"Corrosion Inspection Test\",\r\n  \"Corrosion ResistanceTest\",\r\n  \"Crack Propagation Test\",\r\n  \"Crimp & Soldering Cable Test\",\r\n  \"Cured Thickness Per Ply\",\r\n  \"Curing Time Test\",\r\n  \"Defect Measurement Test\",\r\n  \"Delamination Test\",\r\n  \"Density Test\",\r\n  \"Dry Time Test\",\r\n  \"Electrical Resistivity Test\",\r\n  \"Etching Rate\",\r\n  \"Eutetic Melting Test\",\r\n  \"Evaporation Loss Test\",\r\n  \"Expansion Ratio Test\",\r\n  \"Filtration Test\",\r\n  \"Flammability Test\",\r\n  \"Flash Point Test\",\r\n  \"Flatwise Test\",\r\n  \"Flexure Sandwich Test\",\r\n  \"Flow of Resin Test\",\r\n  \"Flow Test\",\r\n  \"Fluid Resistance Test\",\r\n  \"Fusion Welding Test\",\r\n  \"Gel Time Test\",\r\n  \"General Micro Structure Test\",\r\n  \"Gloss Test\",\r\n  \"Grain Size Measurement Test\",\r\n  \"Hardness Test\",\r\n  \"High Temp Oxidation Test\",\r\n  \"IGA & EGP Test\",\r\n  \"Impact Test\",\r\n  \"In Plane Shear Strength Test\",\r\n  \"Inter Granular Corrosion Test\",\r\n  \"Interlaminar Shear Strength Test\",\r\n  \"IR Spectroscopy Test\",\r\n  \"Knife Test\",\r\n  \"Lack of Streaks Test\",\r\n  \"Lap Shear  Test\",\r\n  \"Layer Continuity Test\",\r\n  \"Long Beam Flexure Test\",\r\n  \"Loss on Ignition Test\",\r\n  \"Mass per Unit Area Test\",\r\n  \"Mechanical Test\",\r\n  \"Microhardness Test\",\r\n  \"Moisture Content Test\",\r\n  \"N/A\",\r\n  \"Non Volatile Content Test\",\r\n  \"Particle / Contamination Test\",\r\n  \"Particle Sedimentation Test\",\r\n  \"Peel Adhesion Test\",\r\n  \"Peel Drum Test\",\r\n  \"Peel Test\",\r\n  \"Penetration / Unworked\",\r\n  \"Penetration / Worked\",\r\n  \"PH Test\",\r\n  \"Plating Test\",\r\n  \"Plating Test\",\r\n  \"Pot Life Test\",\r\n  \"Qualitative / Quantitative Test\",\r\n  \"Qualitative Test\",\r\n  \"Quantitative Test\",\r\n  \"Resin Content Test\",\r\n  \"Resistivity Test\",\r\n  \"Sealing Absorption Test\",\r\n  \"Shear L / W Test\",\r\n  \"Shear Test\",\r\n  \"Short Beam Shear Test\",\r\n  \"Shrinkage Test\",\r\n  \"Sieve Analisis Test\",\r\n  \"Slump Test\",\r\n  \"Solid Content Test\",\r\n  \"Solution Concentration\",\r\n  \"Specific gravity Test\",\r\n  \"Spot Welding Test\",\r\n  \"Spring Test\",\r\n  \"Swelling Test\",\r\n  \"Tack  Free Time Test\",\r\n  \"Tack Test\",\r\n  \"TDS Test\",\r\n  \"Tear Strength Test\",\r\n  \"Temperature Resistance Test\",\r\n  \"Tensile Modulus Test\",\r\n  \"Tensile Shear Strength Test\",\r\n  \"Tensile Strength Test\",\r\n  \"Texture Test\",\r\n  \"Thermal Stability Test\",\r\n  \"Thickness Test\",\r\n  \"Total Acid Test\",\r\n  \"Transversal Test\",\r\n  \"Tube Shear Test\",\r\n  \"Viscosity Test\",\r\n  \"Volatile Content Test\",\r\n  \"Volume Change Test\",\r\n  \"Wall Thickness Test\",\r\n  \"Water Content Test\",\r\n  \"Water Repellency Test\",\r\n  \"Water Resistance Test\",\r\n  \"Water Tolerance Test\",\r\n  \"Weight Change Test\",\r\n  \"Weight per Gallon Test\",\r\n  \"Wet Test\",\r\n];\r\n\r\nexport {\r\n  laboratories,\r\n  organizationUnitsDefault,\r\n  organizationUnitsSolutionControl,\r\n  organizationUnitsProcessControl,\r\n  organizationUnitsKimia,\r\n  organizationUnitsBondingAndComposite,\r\n  organizationUnitsMetallurgy,\r\n  requestNumbersDefault,\r\n  requestNumbersSolutionControlDM6000,\r\n  requestNumbersSolutionControlDM6100,\r\n  requestNumbersSolutionControlDM6200,\r\n  requestNumbersSolutionControlMPD,\r\n  requestNumbersSolutionControlQA3100,\r\n  requestNumbersSolutionControlQC3400,\r\n  requestNumbersSolutionControlQC3500,\r\n  requestNumbersSolutionControlQC5300,\r\n  requestNumbersProcessControlDM6000,\r\n  requestNumbersProcessControlDM6100,\r\n  requestNumbersProcessControlDM6200,\r\n  requestNumbersProcessControlMPD,\r\n  requestNumbersProcessControlQA3100,\r\n  requestNumbersProcessControlQC3400,\r\n  requestNumbersProcessControlQC3500,\r\n  requestNumbersProcessControlQC5300,\r\n  requestNumbersBondingAndCompositeQC1300,\r\n  requestNumbersBondingAndCompositeQC1500,\r\n  requestNumbersBondingAndCompositeQC3100,\r\n  requestNumbersBondingAndCompositeQC3300,\r\n  requestNumbersBondingAndCompositeQC3500,\r\n  requestNumbersBondingAndCompositeQC4000,\r\n  requestNumbersBondingAndCompositeQC4100,\r\n  requestNumbersBondingAndCompositeQC4400,\r\n  requestNumbersBondingAndCompositeQC5300,\r\n  requestNumbersBondingAndCompositeQC5500,\r\n  requestNumbersBondingAndCompositeMDME,\r\n  requestNumbersBondingAndCompositeACS,\r\n  requestNumbersBondingAndCompositeTraining,\r\n  requestNumbersMetallurgyQA3100,\r\n  requestNumbersMetallurgyQA3400,\r\n  requestNumbersMetallurgyQC1400,\r\n  requestNumbersMetallurgyQC3100,\r\n  requestNumbersMetallurgyQC3500,\r\n  requestNumbersMetallurgyMDME,\r\n  programsDefault,\r\n  programsSolutionControl,\r\n  programsProcessControl,\r\n  programsKimia,\r\n  programsBondingAndComposite,\r\n  programsMetallurgy,\r\n  materialsDefault,\r\n  materialsSolutionControl,\r\n  materialsProcessControl,\r\n  materialsKimia,\r\n  materialsBondingAndComposite,\r\n  materialsMetallurgy,\r\n  typesDefault,\r\n  typesSolutionControl,\r\n  typesProcessControl,\r\n  typesKimia,\r\n  typesBondingAndComposite,\r\n  typesBondingAndCompositeAdhesive,\r\n  typesBondingAndCompositeAdhesivePasaJell,\r\n  typesBondingAndCompositeAdhesiveFilm,\r\n  typesBondingAndCompositeAdhesiveFoam,\r\n  typesBondingAndCompositeAdhesivePrimer,\r\n  typesBondingAndCompositeAdhesiveMaskantChemill,\r\n  typesBondingAndCompositeAdhesiveMaskingTape,\r\n  typesBondingAndCompositePhenolicResin,\r\n  typesBondingAndCompositePrepregCarbon,\r\n  typesBondingAndCompositePrepregCarbonCore,\r\n  typesBondingAndCompositePrepregGlass,\r\n  typesBondingAndCompositePrepregGlass304,\r\n  typesBondingAndCompositePrepregGlassCore,\r\n  typesBondingAndCompositePrepregGlassCoreAdhesive,\r\n  typesBondingAndCompositePrepregKevlar,\r\n  typesBondingAndCompositePrepregKevlarCore,\r\n  typesBondingAndCompositePrepregPhenolic,\r\n  typesBondingAndCompositePrepregPhenolicCore,\r\n  typesBondingAndCompositeThread,\r\n  typesMetallurgy,\r\n  specificationsDefault,\r\n  specificationsSolutionControl,\r\n  specificationsProcessControl,\r\n  specificationsKimia,\r\n  specificationsBondingAndComposite,\r\n  specificationsMetallurgy,\r\n  manufacturersDefault,\r\n  manufacturersSolutionControl,\r\n  manufacturersProcessControl,\r\n  manufacturersKimia,\r\n  manufacturersBondingAndComposite,\r\n  manufacturersMetallurgy,\r\n  reasonOfTestsDefault,\r\n  reasonOfTestsSolutionControl,\r\n  reasonOfTestsProcessControl,\r\n  reasonOfTestsKimia,\r\n  reasonOfTestBondingAndComposite,\r\n  reasonOfTestsMetallurgy,\r\n  conditionsDefault,\r\n  conditionsSolutionControl,\r\n  conditionsProcessControl,\r\n  conditionsKimia,\r\n  conditionsBondingAndComposite,\r\n  conditionsMetallurgy,\r\n  units,\r\n  typeOfTests,\r\n};\r\n","import {\r\n  Button,\r\n  Checkbox,\r\n  IconButton,\r\n  Input,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  CheckBox as CheckBoxIcon,\r\n  CheckBoxOutlineBlank as CheckBoxOutlineBlankIcon,\r\n  DeleteOutline as DeleteOutlineIcon,\r\n} from \"@material-ui/icons\";\r\nimport {\r\n  Col,\r\n  Container,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport { Form, Formik } from \"formik\";\r\nimport React, { PureComponent } from \"react\";\r\nimport {\r\n  conditionsBondingAndComposite,\r\n  conditionsDefault,\r\n  conditionsKimia,\r\n  conditionsMetallurgy,\r\n  conditionsProcessControl,\r\n  conditionsSolutionControl,\r\n  laboratories,\r\n  manufacturersBondingAndComposite,\r\n  manufacturersDefault,\r\n  manufacturersKimia,\r\n  manufacturersMetallurgy,\r\n  manufacturersProcessControl,\r\n  manufacturersSolutionControl,\r\n  materialsBondingAndComposite,\r\n  materialsDefault,\r\n  materialsKimia,\r\n  materialsMetallurgy,\r\n  materialsProcessControl,\r\n  materialsSolutionControl,\r\n  organizationUnitsBondingAndComposite,\r\n  organizationUnitsDefault,\r\n  organizationUnitsKimia,\r\n  organizationUnitsMetallurgy,\r\n  organizationUnitsProcessControl,\r\n  organizationUnitsSolutionControl,\r\n  programsBondingAndComposite,\r\n  programsDefault,\r\n  programsKimia,\r\n  programsMetallurgy,\r\n  programsProcessControl,\r\n  programsSolutionControl,\r\n  reasonOfTestBondingAndComposite,\r\n  reasonOfTestsDefault,\r\n  reasonOfTestsKimia,\r\n  reasonOfTestsMetallurgy,\r\n  reasonOfTestsProcessControl,\r\n  reasonOfTestsSolutionControl,\r\n  requestNumbersBondingAndCompositeACS,\r\n  requestNumbersBondingAndCompositeMDME,\r\n  requestNumbersBondingAndCompositeQC1300,\r\n  requestNumbersBondingAndCompositeQC1500,\r\n  requestNumbersBondingAndCompositeQC3100,\r\n  requestNumbersBondingAndCompositeQC3300,\r\n  requestNumbersBondingAndCompositeQC3500,\r\n  requestNumbersBondingAndCompositeQC4000,\r\n  requestNumbersBondingAndCompositeQC4100,\r\n  requestNumbersBondingAndCompositeQC4400,\r\n  requestNumbersBondingAndCompositeQC5300,\r\n  requestNumbersBondingAndCompositeQC5500,\r\n  requestNumbersBondingAndCompositeTraining,\r\n  requestNumbersDefault,\r\n  requestNumbersMetallurgyMDME,\r\n  requestNumbersMetallurgyQA3100,\r\n  requestNumbersMetallurgyQA3400,\r\n  requestNumbersMetallurgyQC1400,\r\n  requestNumbersMetallurgyQC3500,\r\n  requestNumbersProcessControlDM6000,\r\n  requestNumbersProcessControlDM6100,\r\n  requestNumbersProcessControlDM6200,\r\n  requestNumbersProcessControlMPD,\r\n  requestNumbersProcessControlQA3100,\r\n  requestNumbersProcessControlQC3400,\r\n  requestNumbersProcessControlQC3500,\r\n  requestNumbersProcessControlQC5300,\r\n  requestNumbersSolutionControlDM6000,\r\n  requestNumbersSolutionControlDM6100,\r\n  requestNumbersSolutionControlDM6200,\r\n  requestNumbersSolutionControlMPD,\r\n  requestNumbersSolutionControlQA3100,\r\n  requestNumbersSolutionControlQC3400,\r\n  requestNumbersSolutionControlQC3500,\r\n  requestNumbersSolutionControlQC5300,\r\n  specificationsBondingAndComposite,\r\n  specificationsDefault,\r\n  specificationsKimia,\r\n  specificationsMetallurgy,\r\n  specificationsProcessControl,\r\n  specificationsSolutionControl,\r\n  typeOfTests,\r\n  typesBondingAndComposite,\r\n  typesDefault,\r\n  typesKimia,\r\n  typesMetallurgy,\r\n  typesProcessControl,\r\n  typesSolutionControl,\r\n  units,\r\n} from \"../../constants/laboratoryTestValues\";\r\nimport {\r\n  downloadLaboratoryTestAttachment,\r\n  editLaboratoryTestRequest,\r\n  toggleEditRequestModal,\r\n} from \"../../redux/actions\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport { LoadingSpinner } from \"../../components/Miscellaneous\";\r\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport { connect } from \"react-redux\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport {\r\n  laboratoryTestRequestFormValidationSchema,\r\n  laboratoryTestFormByAdminValidationSchema,\r\n} from \"../../constants/validationSchemas\";\r\nimport match from \"autosuggest-highlight/match\";\r\nimport parse from \"autosuggest-highlight/parse\";\r\nimport moment from \"moment\";\r\n\r\nclass EditLaboratoryTestRequestModal extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      organizationUnits: [],\r\n      requestNumbers: [],\r\n      materials: [],\r\n      types: [],\r\n      specifications: [],\r\n      programs: [],\r\n      reasonOfTests: [],\r\n      manufacturers: [],\r\n      conditions: [],\r\n      testAccordingToSpecifications: [],\r\n      employees: [],\r\n      laboratory: \"\",\r\n      organizationUnit: \"\",\r\n      requestNumber: \"\",\r\n      budgetNumber: \"\",\r\n      reasonOfTest: \"\",\r\n      material: \"\",\r\n      type: \"\",\r\n      specification: \"\",\r\n      manufacturer: \"\",\r\n      manufacturingDate: \"\",\r\n      expiryDate: \"\",\r\n      program: \"\",\r\n      batchNumber: \"\",\r\n      sample: \"\",\r\n      condition: \"\",\r\n      unit: \"\",\r\n      quantity: \"\",\r\n      typeOfTest: \"\",\r\n      testAccordingToSpecification: \"\",\r\n      requestAttachmentFileName: null,\r\n      requestAttachmentFileOriginalName: null,\r\n      requestDate: \"\",\r\n      requestReceiveDate: \"\",\r\n      estimationCloseDate: \"\",\r\n      requester: \"\",\r\n      requestApprover: \"\",\r\n      reporter: \"\",\r\n      reportApprover: \"\",\r\n      selectedFile: null,\r\n      deleteAttachment: false,\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, _state) {\r\n    const { showEditRequestModal, selectedLaboratoryTest, users } = props;\r\n\r\n    if (showEditRequestModal) {\r\n      let { laboratory, testAccordingToSpecification } = selectedLaboratoryTest;\r\n      let organizationUnits = [];\r\n      let requestNumbers = [];\r\n      let programs = [];\r\n      let conditions = [];\r\n      let specifications = [];\r\n      let manufacturers = [];\r\n      let reasonOfTests = [];\r\n      let materials = [];\r\n      let types = [];\r\n      let employees = users?.map((user) => `${user.nik} - ${user.name}`) ?? [];\r\n\r\n      switch (laboratory) {\r\n        case \"QA 3100 - Solution Control\":\r\n          organizationUnits = organizationUnitsSolutionControl;\r\n          requestNumbers = requestNumbersDefault;\r\n          programs = programsSolutionControl;\r\n          materials = materialsSolutionControl;\r\n          types = typesSolutionControl;\r\n          specifications = specificationsSolutionControl;\r\n          manufacturers = manufacturersSolutionControl;\r\n          reasonOfTests = reasonOfTestsSolutionControl;\r\n          conditions = conditionsSolutionControl;\r\n          break;\r\n        case \"QA 3100 - Process Control\":\r\n          organizationUnits = organizationUnitsProcessControl;\r\n          requestNumbers = requestNumbersDefault;\r\n          programs = programsProcessControl;\r\n          materials = materialsProcessControl;\r\n          types = typesProcessControl;\r\n          specifications = specificationsProcessControl;\r\n          manufacturers = manufacturersProcessControl;\r\n          reasonOfTests = reasonOfTestsProcessControl;\r\n          conditions = conditionsProcessControl;\r\n          break;\r\n        case \"QA 3100 - Kimia\":\r\n          organizationUnits = organizationUnitsKimia;\r\n          requestNumbers = requestNumbersDefault;\r\n          programs = programsKimia;\r\n          materials = materialsKimia;\r\n          types = typesKimia;\r\n          specifications = specificationsKimia;\r\n          manufacturers = manufacturersKimia;\r\n          reasonOfTests = reasonOfTestsKimia;\r\n          conditions = conditionsKimia;\r\n          break;\r\n        case \"QA 3200 - Bonding & Composite\":\r\n          organizationUnits = organizationUnitsBondingAndComposite;\r\n          requestNumbers = requestNumbersDefault;\r\n          programs = programsBondingAndComposite;\r\n          materials = materialsBondingAndComposite;\r\n          types = typesBondingAndComposite;\r\n          specifications = specificationsBondingAndComposite;\r\n          manufacturers = manufacturersBondingAndComposite;\r\n          reasonOfTests = reasonOfTestBondingAndComposite;\r\n          conditions = conditionsBondingAndComposite;\r\n          break;\r\n        case \"QA 3200 - Metallurgy\":\r\n          organizationUnits = organizationUnitsMetallurgy;\r\n          requestNumbers = requestNumbersDefault;\r\n          programs = programsMetallurgy;\r\n          materials = materialsMetallurgy;\r\n          types = typesMetallurgy;\r\n          specifications = specificationsMetallurgy;\r\n          manufacturers = manufacturersMetallurgy;\r\n          reasonOfTests = reasonOfTestsMetallurgy;\r\n          conditions = conditionsMetallurgy;\r\n          break;\r\n        default:\r\n          organizationUnits = organizationUnitsDefault;\r\n          requestNumbers = requestNumbersDefault;\r\n          programs = programsDefault;\r\n          materials = materialsDefault;\r\n          types = typesDefault;\r\n          specifications = specificationsDefault;\r\n          manufacturers = manufacturersDefault;\r\n          reasonOfTests = reasonOfTestsDefault;\r\n          conditions = conditionsDefault;\r\n      }\r\n      return {\r\n        organizationUnits: organizationUnits,\r\n        requestNumbers: requestNumbers,\r\n        programs: programs,\r\n        conditions: conditions,\r\n        specifications: specifications,\r\n        manufacturers: manufacturers,\r\n        reasonOfTests: reasonOfTests,\r\n        materials: materials,\r\n        types: types,\r\n        testAccordingToSpecifications: [testAccordingToSpecification],\r\n        employees: employees,\r\n      };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  componentDidUpdate(prevProps, _prevState) {\r\n    const { showEditRequestModal, selectedLaboratoryTest, users } = this.props;\r\n\r\n    if (\r\n      showEditRequestModal !== prevProps.showEditRequestModal &&\r\n      showEditRequestModal &&\r\n      selectedLaboratoryTest\r\n    ) {\r\n      let {\r\n        laboratory,\r\n        organizationUnit,\r\n        requestNumber,\r\n        material,\r\n        type,\r\n        specification,\r\n        program,\r\n        budgetNumber,\r\n        reasonOfTest,\r\n        manufacturer,\r\n        manufacturingDate,\r\n        expiryDate,\r\n        batchNumber,\r\n        sample,\r\n        condition,\r\n        unit,\r\n        quantity,\r\n        typeOfTest,\r\n        requestAttachmentFileName,\r\n        requestAttachmentFileOriginalName,\r\n        testAccordingToSpecification,\r\n        requesterName,\r\n        requesterNik,\r\n        requestApproverName,\r\n        requestApproverNik,\r\n        reporterName,\r\n        reporterNik,\r\n        reportApproverName,\r\n        reportApproverNik,\r\n      } = selectedLaboratoryTest;\r\n      const today = moment().format(\"YYYY-MM-DD\");\r\n      const requester = users?.find(\r\n        (user) => user?.name === requesterName && user?.nik === requesterNik\r\n      );\r\n      const requestApprover = users?.find(\r\n        (user) =>\r\n          user?.name === requestApproverName && user?.nik === requestApproverNik\r\n      );\r\n      const reporter = users?.find(\r\n        (user) => user?.name === reporterName && user?.nik === reporterNik\r\n      );\r\n      const reportApprover = users?.find(\r\n        (user) =>\r\n          user?.name === reportApproverName && user?.nik === reportApproverNik\r\n      );\r\n\r\n      this.setState({\r\n        laboratory,\r\n        organizationUnit,\r\n        requestNumber,\r\n        material: material?.split(\", \"),\r\n        type: type?.split(\", \"),\r\n        specification: specification?.split(\", \"),\r\n        program,\r\n        budgetNumber,\r\n        reasonOfTest,\r\n        manufacturer,\r\n        manufacturingDate,\r\n        expiryDate,\r\n        batchNumber,\r\n        sample,\r\n        condition,\r\n        unit,\r\n        quantity,\r\n        typeOfTest: typeOfTest?.split(\",\"),\r\n        requestAttachmentFileName,\r\n        requestAttachmentFileOriginalName,\r\n        testAccordingToSpecification,\r\n        requestDate:\r\n          selectedLaboratoryTest?.requestDate?.substring(0, 10) ?? today,\r\n        requestReceiveDate:\r\n          selectedLaboratoryTest?.requestReceiveDate?.substring(0, 10) ?? today,\r\n        estimationCloseDate:\r\n          selectedLaboratoryTest?.estimationCloseDate?.substring(0, 10) ??\r\n          today,\r\n        requester: requester ? `${requester.nik} - ${requester?.name}` : \"\",\r\n        requestApprover: requestApprover\r\n          ? `${requestApprover.nik} - ${requestApprover?.name}`\r\n          : \"\",\r\n        reporter: reporter ? `${reporter.nik} - ${reporter?.name}` : \"\",\r\n        reportApprover: reportApprover\r\n          ? `${reportApprover.nik} - ${reportApprover?.name}`\r\n          : \"\",\r\n        selectedFile: null,\r\n        deleteAttachment: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  onFileChange = (event) => {\r\n    this.setState({\r\n      selectedFile: event.target.files[0],\r\n      deleteAttachment: false,\r\n    });\r\n  };\r\n\r\n  deleteAttachment = () => {\r\n    this.setState({\r\n      deleteAttachment: true,\r\n    });\r\n  };\r\n\r\n  triggerDownloadLaboratoryTestAttachment() {\r\n    const { selectedLaboratoryTest, downloadLaboratoryTestAttachment } =\r\n      this.props;\r\n    const { requestAttachmentFileName } = selectedLaboratoryTest;\r\n\r\n    downloadLaboratoryTestAttachment({ fileName: requestAttachmentFileName });\r\n  }\r\n\r\n  triggerEditLaboratoryTestRequest = (values) => {\r\n    const {\r\n      token,\r\n      loading,\r\n      selectedLaboratoryTest,\r\n      editLaboratoryTestRequest,\r\n      users,\r\n    } = this.props;\r\n    const { selectedFile, deleteAttachment } = this.state;\r\n    const userId = jwt_decode(token)?.id;\r\n    const { superAdmin, laboratoryTestAdmin } =\r\n      jwt_decode(token)?.authorization;\r\n    const { id, requestReceiveDate: existingRequestReceiveDate } =\r\n      selectedLaboratoryTest;\r\n    const {\r\n      laboratory,\r\n      organizationUnit,\r\n      requestNumber,\r\n      budgetNumber,\r\n      reasonOfTest,\r\n      material,\r\n      type,\r\n      specification,\r\n      manufacturer,\r\n      manufacturingDate,\r\n      expiryDate,\r\n      program,\r\n      batchNumber,\r\n      sample,\r\n      condition,\r\n      unit,\r\n      quantity,\r\n      typeOfTest,\r\n      testAccordingToSpecification,\r\n      requestDate,\r\n      requestReceiveDate,\r\n      estimationCloseDate,\r\n      requester,\r\n      requestApprover,\r\n      reporter,\r\n      reportApprover,\r\n    } = values;\r\n    let laboratoryTest = new FormData();\r\n\r\n    const requesterFound = users?.find(\r\n      (user) =>\r\n        user?.name === requester?.substring(9) &&\r\n        user?.nik === requester?.substring(0, 6)\r\n    );\r\n    const requestApproverFound = users?.find(\r\n      (user) =>\r\n        user?.name === requestApprover?.substring(9) &&\r\n        user?.nik === requestApprover?.substring(0, 6)\r\n    );\r\n    const reporterFound = users?.find(\r\n      (user) =>\r\n        user?.name === reporter?.substring(9) &&\r\n        user?.nik === reporter?.substring(0, 6)\r\n    );\r\n    const reportApproverFound = users?.find(\r\n      (user) =>\r\n        user?.name === reportApprover?.substring(9) &&\r\n        user?.nik === reportApprover?.substring(0, 6)\r\n    );\r\n\r\n    if (!loading) {\r\n      laboratoryTest.append(\"laboratory\", laboratory?.trim());\r\n      laboratoryTest.append(\"organizationUnit\", organizationUnit?.trim());\r\n      laboratoryTest.append(\"requestNumber\", requestNumber?.trim());\r\n      laboratoryTest.append(\"budgetNumber\", budgetNumber?.trim());\r\n      laboratoryTest.append(\"reasonOfTest\", reasonOfTest?.trim());\r\n      laboratoryTest.append(\"material\", material);\r\n      laboratoryTest.append(\"type\", type);\r\n      laboratoryTest.append(\"specification\", specification);\r\n      laboratoryTest.append(\"manufacturer\", manufacturer?.trim());\r\n      laboratoryTest.append(\"manufacturingDate\", manufacturingDate?.trim());\r\n      laboratoryTest.append(\"expiryDate\", expiryDate?.trim());\r\n      laboratoryTest.append(\"program\", program?.trim());\r\n      laboratoryTest.append(\"batchNumber\", batchNumber?.trim());\r\n      laboratoryTest.append(\"sample\", sample?.trim());\r\n      laboratoryTest.append(\"condition\", condition?.trim());\r\n      laboratoryTest.append(\"unit\", unit?.trim());\r\n      laboratoryTest.append(\"quantity\", quantity?.trim());\r\n      laboratoryTest.append(\"typeOfTest\", typeOfTest);\r\n      laboratoryTest.append(\r\n        \"testAccordingToSpecification\",\r\n        testAccordingToSpecification?.trim()\r\n      );\r\n      if (selectedFile) {\r\n        laboratoryTest.append(\"file\", selectedFile);\r\n      }\r\n      if (deleteAttachment) {\r\n        laboratoryTest.append(\"file\", null);\r\n      }\r\n\r\n      if (existingRequestReceiveDate) {\r\n        laboratoryTest.append(\"requestDate\", requestDate);\r\n        laboratoryTest.append(\"requestReceiveDate\", requestReceiveDate);\r\n        laboratoryTest.append(\"estimationCloseDate\", estimationCloseDate);\r\n\r\n        if (requesterFound && requesterFound?.id) {\r\n          laboratoryTest.append(\"requester\", requesterFound.id);\r\n        }\r\n        if (requestApproverFound && requestApproverFound?.id) {\r\n          laboratoryTest.append(\"requestApprover\", requestApproverFound.id);\r\n        }\r\n        if (reporterFound && reporterFound?.id) {\r\n          laboratoryTest.append(\"reporter\", reporterFound.id);\r\n        }\r\n        if (reportApproverFound && reportApproverFound?.id) {\r\n          laboratoryTest.append(\"reportApprover\", reportApproverFound.id);\r\n        }\r\n      } else {\r\n        laboratoryTest.append(\"requester\", userId);\r\n      }\r\n\r\n      if (!existingRequestReceiveDate && superAdmin) {\r\n        laboratoryTest.delete(\"requester\");\r\n      }\r\n      if (!existingRequestReceiveDate && laboratoryTestAdmin) {\r\n        laboratoryTest.delete(\"requester\");\r\n      }\r\n\r\n      editLaboratoryTestRequest(id, laboratoryTest);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      loading,\r\n      showEditRequestModal,\r\n      selectedLaboratoryTest,\r\n      toggleEditRequestModal,\r\n    } = this.props;\r\n    const {\r\n      organizationUnits,\r\n      requestNumbers,\r\n      materials,\r\n      types,\r\n      specifications,\r\n      programs,\r\n      reasonOfTests,\r\n      manufacturers,\r\n      conditions,\r\n      testAccordingToSpecifications,\r\n      employees,\r\n      laboratory,\r\n      organizationUnit,\r\n      requestNumber,\r\n      material,\r\n      type,\r\n      specification,\r\n      program,\r\n      budgetNumber,\r\n      reasonOfTest,\r\n      batchNumber,\r\n      sample,\r\n      condition,\r\n      manufacturer,\r\n      manufacturingDate,\r\n      expiryDate,\r\n      unit,\r\n      quantity,\r\n      requestAttachmentFileOriginalName,\r\n      typeOfTest,\r\n      testAccordingToSpecification,\r\n      requestDate,\r\n      requestReceiveDate,\r\n      estimationCloseDate,\r\n      requester,\r\n      requestApprover,\r\n      reporter,\r\n      reportApprover,\r\n      deleteAttachment,\r\n    } = this.state;\r\n    let laboratoryTestRequestFormInitialValues = {};\r\n\r\n    if (showEditRequestModal) {\r\n      laboratoryTestRequestFormInitialValues = {\r\n        laboratory,\r\n        organizationUnit,\r\n        requestNumber,\r\n        program,\r\n        budgetNumber,\r\n        reasonOfTest,\r\n        material: selectedLaboratoryTest?.material,\r\n        type: selectedLaboratoryTest?.type,\r\n        specification: selectedLaboratoryTest?.specification,\r\n        manufacturer,\r\n        manufacturingDate,\r\n        expiryDate,\r\n        batchNumber,\r\n        sample,\r\n        condition,\r\n        unit,\r\n        quantity,\r\n        typeOfTest: selectedLaboratoryTest?.typeOfTest,\r\n        testAccordingToSpecification,\r\n        requestDate,\r\n        requestReceiveDate,\r\n        estimationCloseDate,\r\n        requester,\r\n        requestApprover,\r\n        reporter,\r\n        reportApprover,\r\n      };\r\n    }\r\n    return (\r\n      <Modal\r\n        className={`modal-form-xl`}\r\n        isOpen={showEditRequestModal}\r\n        toggle={toggleEditRequestModal}\r\n        backdrop={true}\r\n      >\r\n        {showEditRequestModal && selectedLaboratoryTest ? (\r\n          <React.Fragment>\r\n            <Formik\r\n              initialValues={laboratoryTestRequestFormInitialValues}\r\n              onSubmit={this.triggerEditLaboratoryTestRequest}\r\n              validationSchema={\r\n                selectedLaboratoryTest?.requestReceiveDate\r\n                  ? laboratoryTestFormByAdminValidationSchema\r\n                  : laboratoryTestRequestFormValidationSchema\r\n              }\r\n            >\r\n              {({ setFieldValue, values, touched, errors, handleChange }) => (\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Form autoComplete=\"off\">\r\n                    <ModalHeader>Edit Laboratory Test Request</ModalHeader>\r\n                    <ModalBody>\r\n                      <Container>\r\n                        <Row className=\"mb-4 pb-4 mt-4 pt-4\">\r\n                          <Col>\r\n                            <Autocomplete\r\n                              defaultValue={laboratory}\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              openOnFocus\r\n                              onChange={(_event, value) => {\r\n                                setFieldValue(\"laboratory\", value);\r\n                                switch (value) {\r\n                                  case \"QA 3100 - Solution Control\":\r\n                                    this.setState(() => ({\r\n                                      organizationUnits:\r\n                                        organizationUnitsDefault,\r\n                                      requestNumbers: requestNumbersDefault,\r\n                                      programs: programsSolutionControl,\r\n                                      materials: materialsSolutionControl,\r\n                                      types: typesSolutionControl,\r\n                                      specifications:\r\n                                        specificationsSolutionControl,\r\n                                      manufacturers:\r\n                                        manufacturersSolutionControl,\r\n                                      reasonOfTests:\r\n                                        reasonOfTestsSolutionControl,\r\n                                      conditions: conditionsSolutionControl,\r\n                                    }));\r\n                                    break;\r\n                                  case \"QA 3100 - Process Control\":\r\n                                    this.setState(() => ({\r\n                                      organizationUnits:\r\n                                        organizationUnitsDefault,\r\n                                      requestNumbers: requestNumbersDefault,\r\n                                      programs: programsProcessControl,\r\n                                      materials: materialsProcessControl,\r\n                                      types: typesProcessControl,\r\n                                      specifications:\r\n                                        specificationsProcessControl,\r\n                                      manufacturers:\r\n                                        manufacturersProcessControl,\r\n                                      reasonOfTests:\r\n                                        reasonOfTestsProcessControl,\r\n                                      conditions: conditionsProcessControl,\r\n                                    }));\r\n                                    break;\r\n                                  case \"QA 3100 - Kimia\":\r\n                                    this.setState(() => ({\r\n                                      organizationUnits:\r\n                                        organizationUnitsDefault,\r\n                                      requestNumbers: requestNumbersDefault,\r\n                                      programs: programsKimia,\r\n                                      materials: materialsKimia,\r\n                                      types: typesKimia,\r\n                                      specifications: specificationsKimia,\r\n                                      manufacturers: manufacturersKimia,\r\n                                      reasonOfTests: reasonOfTestsKimia,\r\n                                      conditions: conditionsKimia,\r\n                                    }));\r\n                                    break;\r\n                                  case \"QA 3200 - Bonding & Composite\":\r\n                                    this.setState(() => ({\r\n                                      organizationUnits:\r\n                                        organizationUnitsBondingAndComposite,\r\n                                      requestNumbers: requestNumbersDefault,\r\n                                      programs: programsBondingAndComposite,\r\n                                      materials: materialsBondingAndComposite,\r\n                                      types: typesBondingAndComposite,\r\n                                      specifications:\r\n                                        specificationsBondingAndComposite,\r\n                                      manufacturers:\r\n                                        manufacturersBondingAndComposite,\r\n                                      reasonOfTests:\r\n                                        reasonOfTestBondingAndComposite,\r\n                                      conditions: conditionsBondingAndComposite,\r\n                                    }));\r\n                                    break;\r\n                                  case \"QA 3200 - Metallurgy\":\r\n                                    this.setState(() => ({\r\n                                      organizationUnits:\r\n                                        organizationUnitsMetallurgy,\r\n                                      requestNumbers: requestNumbersDefault,\r\n                                      programs: programsMetallurgy,\r\n                                      materials: materialsMetallurgy,\r\n                                      types: typesMetallurgy,\r\n                                      specifications: specificationsMetallurgy,\r\n                                      manufacturers: manufacturersMetallurgy,\r\n                                      reasonOfTests: reasonOfTestsMetallurgy,\r\n                                      conditions: conditionsMetallurgy,\r\n                                    }));\r\n                                    break;\r\n                                  default:\r\n                                    this.setState(() => ({\r\n                                      organizationUnits: organizationUnit,\r\n                                      requestNumbers: requestNumbersDefault,\r\n                                      programs: programsDefault,\r\n                                      materials: materialsDefault,\r\n                                      types: typesDefault,\r\n                                      specifications: specificationsDefault,\r\n                                      manufacturers: manufacturersDefault,\r\n                                      reasonOfTests: reasonOfTestsDefault,\r\n                                      conditions: conditionsDefault,\r\n                                    }));\r\n                                }\r\n                              }}\r\n                              options={laboratories}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  name=\"laboratory\"\r\n                                  label=\"Request for Laboratory\"\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  error={\r\n                                    errors.laboratory && touched.laboratory\r\n                                  }\r\n                                  helperText={\r\n                                    errors.laboratory &&\r\n                                    touched.laboratory &&\r\n                                    errors.laboratory\r\n                                  }\r\n                                  value={values.laboratory}\r\n                                />\r\n                              )}\r\n                              renderOption={(option, { inputValue }) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <div>\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </div>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <Autocomplete\r\n                              defaultValue={organizationUnit}\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              openOnFocus\r\n                              onInputChange={(_event, value) => {\r\n                                setFieldValue(\"organizationUnit\", value);\r\n                                switch (values.laboratory) {\r\n                                  case \"QA 3100 - Solution Control\":\r\n                                    switch (value) {\r\n                                      case \"DM 6000\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersSolutionControlDM6000,\r\n                                        }));\r\n                                        break;\r\n                                      case \"DM 6100\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersSolutionControlDM6100,\r\n                                        }));\r\n                                        break;\r\n                                      case \"DM 6200\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersSolutionControlDM6200,\r\n                                        }));\r\n                                        break;\r\n                                      case \"MPD\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersSolutionControlMPD,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QA 3100\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersSolutionControlQA3100,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 3400\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersSolutionControlQC3400,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 3500\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersSolutionControlQC3500,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 5300\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersSolutionControlQC5300,\r\n                                        }));\r\n                                        break;\r\n                                      default:\r\n                                        this.setState(() => ({\r\n                                          requestNumbers: requestNumbersDefault,\r\n                                        }));\r\n                                    }\r\n                                    break;\r\n                                  case \"QA 3100 - Process Control\":\r\n                                    switch (value) {\r\n                                      case \"DM 6000\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersProcessControlDM6000,\r\n                                        }));\r\n                                        break;\r\n                                      case \"DM 6100\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersProcessControlDM6100,\r\n                                        }));\r\n                                        break;\r\n                                      case \"DM 6200\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersProcessControlDM6200,\r\n                                        }));\r\n                                        break;\r\n                                      case \"MPD\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersProcessControlMPD,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QA 3100\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersProcessControlQA3100,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 3400\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersProcessControlQC3400,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 3500\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersProcessControlQC3500,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 5300\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersProcessControlQC5300,\r\n                                        }));\r\n                                        break;\r\n                                      default:\r\n                                        this.setState(() => ({\r\n                                          requestNumbers: requestNumbersDefault,\r\n                                        }));\r\n                                    }\r\n                                    break;\r\n                                  case \"QA 3200 - Bonding & Composite\":\r\n                                    switch (value) {\r\n                                      case \"QC 1300\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeQC1300,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 1500\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeQC1500,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 3100\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeQC3100,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 3300\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeQC3300,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 3500\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeQC3500,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 4000\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeQC4000,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 4100\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeQC4100,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 4400\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeQC4400,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 5300\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeQC5300,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 5500\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeQC5500,\r\n                                        }));\r\n                                        break;\r\n                                      case \"ACS\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeACS,\r\n                                        }));\r\n                                        break;\r\n                                      case \"MD - ME\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeMDME,\r\n                                        }));\r\n                                        break;\r\n                                      case \"Training\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeTraining,\r\n                                        }));\r\n                                        break;\r\n                                      default:\r\n                                        this.setState(() => ({\r\n                                          requestNumbers: requestNumbersDefault,\r\n                                        }));\r\n                                    }\r\n                                    break;\r\n                                  case \"QA 3200 - Metallurgy\":\r\n                                    switch (value) {\r\n                                      case \"QA 3100\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersMetallurgyQA3100,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QA 3400\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersMetallurgyQA3400,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 1400\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersMetallurgyQC1400,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 3500\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersMetallurgyQC3500,\r\n                                        }));\r\n                                        break;\r\n                                      case \"MD - ME\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersMetallurgyMDME,\r\n                                        }));\r\n                                        break;\r\n                                      default:\r\n                                        this.setState(() => ({\r\n                                          requestNumbers: requestNumbersDefault,\r\n                                        }));\r\n                                    }\r\n                                    break;\r\n                                  default:\r\n                                    this.setState(() => ({\r\n                                      requestNumbers: requestNumbersDefault,\r\n                                    }));\r\n                                }\r\n                              }}\r\n                              options={organizationUnits}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  name=\"organizationUnit\"\r\n                                  label=\"Organization Unit\"\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  value={values.organizationUnit}\r\n                                  error={\r\n                                    errors.organizationUnit &&\r\n                                    touched.organizationUnit\r\n                                  }\r\n                                  helperText={\r\n                                    errors.organizationUnit &&\r\n                                    touched.organizationUnit &&\r\n                                    errors.organizationUnit\r\n                                  }\r\n                                />\r\n                              )}\r\n                              renderOption={(option, { inputValue }) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <div>\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </div>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <Autocomplete\r\n                              defaultValue={requestNumber}\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              onInputChange={(_event, value) => {\r\n                                setFieldValue(\"requestNumber\", value);\r\n                              }}\r\n                              options={requestNumbers}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  name=\"requestNumber\"\r\n                                  label=\"Request Number\"\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  value={values.requestNumber}\r\n                                  error={\r\n                                    errors.requestNumber &&\r\n                                    touched.requestNumber\r\n                                  }\r\n                                  helperText={\r\n                                    errors.requestNumber &&\r\n                                    touched.requestNumber &&\r\n                                    errors.requestNumber\r\n                                  }\r\n                                />\r\n                              )}\r\n                              renderOption={(option, { inputValue }) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <div>\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </div>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className=\"mb-4 pb-4 mt-4 pt-4\">\r\n                          <Col>\r\n                            <Autocomplete\r\n                              defaultValue={material}\r\n                              disableCloseOnSelect\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              multiple\r\n                              onChange={(_event, value) => {\r\n                                setFieldValue(\"material\", value.join(\", \"));\r\n                              }}\r\n                              openOnFocus\r\n                              options={materials}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  name=\"material\"\r\n                                  label=\"Material\"\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  value={values.material}\r\n                                  error={errors.material && touched.material}\r\n                                  helperText={\r\n                                    errors.material &&\r\n                                    touched.material &&\r\n                                    errors.material\r\n                                  }\r\n                                />\r\n                              )}\r\n                              renderOption={(\r\n                                option,\r\n                                { inputValue, selected }\r\n                              ) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <React.Fragment>\r\n                                    <Checkbox\r\n                                      checked={selected}\r\n                                      checkedIcon={\r\n                                        <CheckBoxIcon fontSize=\"small\" />\r\n                                      }\r\n                                      icon={\r\n                                        <CheckBoxOutlineBlankIcon fontSize=\"small\" />\r\n                                      }\r\n                                      style={{ marginRight: 8 }}\r\n                                    />\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </React.Fragment>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <Autocomplete\r\n                              defaultValue={type}\r\n                              disableCloseOnSelect\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              multiple\r\n                              onChange={(_event, value) => {\r\n                                setFieldValue(\"type\", value.join(\", \"));\r\n                              }}\r\n                              openOnFocus\r\n                              options={types}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  error={errors.type && touched.type}\r\n                                  helperText={\r\n                                    errors.type && touched.type && errors.type\r\n                                  }\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  label=\"Type / Code\"\r\n                                  name=\"type\"\r\n                                  value={values.type}\r\n                                />\r\n                              )}\r\n                              renderOption={(\r\n                                option,\r\n                                { inputValue, selected }\r\n                              ) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <React.Fragment>\r\n                                    <Checkbox\r\n                                      checked={selected}\r\n                                      checkedIcon={\r\n                                        <CheckBoxIcon fontSize=\"small\" />\r\n                                      }\r\n                                      icon={\r\n                                        <CheckBoxOutlineBlankIcon fontSize=\"small\" />\r\n                                      }\r\n                                      style={{ marginRight: 8 }}\r\n                                    />\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </React.Fragment>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <Autocomplete\r\n                              defaultValue={specification}\r\n                              disableCloseOnSelect\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              multiple\r\n                              onChange={(_event, value) => {\r\n                                setFieldValue(\r\n                                  \"specification\",\r\n                                  value.join(\", \")\r\n                                );\r\n                                this.setState(() => ({\r\n                                  testAccordingToSpecifications: [\r\n                                    value.join(\", \"),\r\n                                  ],\r\n                                }));\r\n                              }}\r\n                              openOnFocus\r\n                              options={specifications}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  name=\"specification\"\r\n                                  label=\"Material Specification\"\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  value={values.specification}\r\n                                  error={\r\n                                    errors.specification &&\r\n                                    touched.specification\r\n                                  }\r\n                                  helperText={\r\n                                    errors.specification &&\r\n                                    touched.specification &&\r\n                                    errors.specification\r\n                                  }\r\n                                />\r\n                              )}\r\n                              renderOption={(\r\n                                option,\r\n                                { inputValue, selected }\r\n                              ) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <React.Fragment>\r\n                                    <Checkbox\r\n                                      checked={selected}\r\n                                      checkedIcon={\r\n                                        <CheckBoxIcon fontSize=\"small\" />\r\n                                      }\r\n                                      icon={\r\n                                        <CheckBoxOutlineBlankIcon fontSize=\"small\" />\r\n                                      }\r\n                                      style={{ marginRight: 8 }}\r\n                                    />\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </React.Fragment>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className=\"mb-4 pb-4 mt-4 pt-4\">\r\n                          <Col>\r\n                            <Autocomplete\r\n                              defaultValue={program}\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              onInputChange={(_event, value) => {\r\n                                setFieldValue(\"program\", value);\r\n                              }}\r\n                              openOnFocus\r\n                              options={programs}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  error={errors.program && touched.program}\r\n                                  helperText={\r\n                                    errors.program &&\r\n                                    touched.program &&\r\n                                    errors.program\r\n                                  }\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  label=\"Program\"\r\n                                  name=\"program\"\r\n                                  value={values.program}\r\n                                />\r\n                              )}\r\n                              renderOption={(option, { inputValue }) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <div>\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </div>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <TextField\r\n                              error={\r\n                                errors.budgetNumber && touched.budgetNumber\r\n                              }\r\n                              fullWidth\r\n                              helperText={\r\n                                errors.budgetNumber &&\r\n                                touched.budgetNumber &&\r\n                                errors.budgetNumber\r\n                              }\r\n                              InputLabelProps={{ shrink: true }}\r\n                              label=\"Budget No. / RV No. / JID No.\"\r\n                              name=\"budgetNumber\"\r\n                              onChange={handleChange}\r\n                              type=\"text\"\r\n                              value={values.budgetNumber}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <Autocomplete\r\n                              defaultValue={reasonOfTest}\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              onInputChange={(_event, value) => {\r\n                                setFieldValue(\"reasonOfTest\", value);\r\n                              }}\r\n                              openOnFocus\r\n                              options={reasonOfTests}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  error={\r\n                                    errors.reasonOfTest && touched.reasonOfTest\r\n                                  }\r\n                                  helperText={\r\n                                    errors.reasonOfTest &&\r\n                                    touched.reasonOfTest &&\r\n                                    errors.reasonOfTest\r\n                                  }\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  label=\"Reason of Test\"\r\n                                  name=\"reasonOfTest\"\r\n                                  value={values.reasonOfTest}\r\n                                />\r\n                              )}\r\n                              renderOption={(option, { inputValue }) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <div>\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </div>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n\r\n                        <Row className=\"mb-4 pb-4 mt-4 pt-4\">\r\n                          <Col>\r\n                            <Autocomplete\r\n                              defaultValue={manufacturer}\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              onInputChange={(_event, value) => {\r\n                                setFieldValue(\"manufacturer\", value);\r\n                              }}\r\n                              openOnFocus\r\n                              options={manufacturers}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  error={\r\n                                    errors.manufacturer && touched.manufacturer\r\n                                  }\r\n                                  helperText={\r\n                                    errors.manufacturer &&\r\n                                    touched.manufacturer &&\r\n                                    errors.manufacturer\r\n                                  }\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  label=\"Manufactured\"\r\n                                  name=\"manufacturer\"\r\n                                  value={values.manufacturer}\r\n                                />\r\n                              )}\r\n                              renderOption={(option, { inputValue }) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <div>\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </div>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <TextField\r\n                              error={\r\n                                errors.manufacturingDate &&\r\n                                touched.manufacturingDate\r\n                              }\r\n                              fullWidth\r\n                              helperText={\r\n                                errors.manufacturingDate &&\r\n                                touched.manufacturingDate &&\r\n                                errors.manufacturingDate\r\n                              }\r\n                              InputLabelProps={{ shrink: true }}\r\n                              label=\"Manufacturing Date\"\r\n                              name=\"manufacturingDate\"\r\n                              onChange={handleChange}\r\n                              type=\"text\"\r\n                              value={values.manufacturingDate}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <TextField\r\n                              error={errors.expiryDate && touched.expiryDate}\r\n                              fullWidth\r\n                              helperText={\r\n                                errors.expiryDate &&\r\n                                touched.expiryDate &&\r\n                                errors.expiryDate\r\n                              }\r\n                              InputLabelProps={{ shrink: true }}\r\n                              label=\"Expire Date\"\r\n                              name=\"expiryDate\"\r\n                              onChange={handleChange}\r\n                              type=\"text\"\r\n                              value={values.expiryDate}\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className=\"mb-4 pb-4 mt-4 pt-4\">\r\n                          <Col>\r\n                            <TextField\r\n                              error={errors.batchNumber && touched.batchNumber}\r\n                              fullWidth\r\n                              helperText={\r\n                                errors.batchNumber &&\r\n                                touched.batchNumber &&\r\n                                errors.batchNumber\r\n                              }\r\n                              InputLabelProps={{ shrink: true }}\r\n                              label=\"Batch / Roll Number\"\r\n                              name=\"batchNumber\"\r\n                              onChange={handleChange}\r\n                              type=\"text\"\r\n                              value={values.batchNumber}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <TextField\r\n                              fullWidth\r\n                              value={values.sample}\r\n                              onChange={handleChange}\r\n                              type=\"text\"\r\n                              name=\"sample\"\r\n                              label=\"Quantity of Sample\"\r\n                              InputLabelProps={{ shrink: true }}\r\n                              error={errors.sample && touched.sample}\r\n                              helperText={\r\n                                errors.sample && touched.sample && errors.sample\r\n                              }\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <Autocomplete\r\n                              defaultValue={condition}\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              onInputChange={(_event, value) => {\r\n                                setFieldValue(\"condition\", value);\r\n                              }}\r\n                              openOnFocus\r\n                              options={conditions}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  error={errors.condition && touched.condition}\r\n                                  helperText={\r\n                                    errors.condition &&\r\n                                    touched.condition &&\r\n                                    errors.condition\r\n                                  }\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  label=\"Condition\"\r\n                                  name=\"condition\"\r\n                                  value={values.condition}\r\n                                />\r\n                              )}\r\n                              renderOption={(option, { inputValue }) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <div>\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </div>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <Autocomplete\r\n                              defaultValue={unit}\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              onInputChange={(_event, value) => {\r\n                                setFieldValue(\"unit\", value);\r\n                              }}\r\n                              openOnFocus\r\n                              options={units}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  error={errors.unit && touched.unit}\r\n                                  helperText={\r\n                                    errors.unit && touched.unit && errors.unit\r\n                                  }\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  label=\"Unit\"\r\n                                  name=\"unit\"\r\n                                  value={values.unit}\r\n                                />\r\n                              )}\r\n                              renderOption={(option, { inputValue }) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <div>\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </div>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <TextField\r\n                              error={errors.quantity && touched.quantity}\r\n                              fullWidth\r\n                              helperText={\r\n                                errors.quantity &&\r\n                                touched.quantity &&\r\n                                errors.quantity\r\n                              }\r\n                              InputLabelProps={{ shrink: true }}\r\n                              label=\"Quantity of Material\"\r\n                              name=\"quantity\"\r\n                              onChange={handleChange}\r\n                              type=\"text\"\r\n                              value={values.quantity}\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className=\"mb-4 pb-4 mt-4 pt-4\">\r\n                          <Col>\r\n                            <Autocomplete\r\n                              defaultValue={typeOfTest}\r\n                              disableCloseOnSelect\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              multiple\r\n                              onChange={(_event, value) => {\r\n                                setFieldValue(\"typeOfTest\", value.join(\", \"));\r\n                              }}\r\n                              openOnFocus\r\n                              options={typeOfTests}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  error={\r\n                                    errors.typeOfTest && touched.typeOfTest\r\n                                  }\r\n                                  helperText={\r\n                                    errors.typeOfTest &&\r\n                                    touched.typeOfTest &&\r\n                                    errors.typeOfTest\r\n                                  }\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  label=\"Type of Test\"\r\n                                  name=\"typeOfTest\"\r\n                                  value={values.typeOfTest}\r\n                                />\r\n                              )}\r\n                              renderOption={(\r\n                                option,\r\n                                { inputValue, selected }\r\n                              ) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <React.Fragment>\r\n                                    <Checkbox\r\n                                      checked={selected}\r\n                                      checkedIcon={\r\n                                        <CheckBoxIcon fontSize=\"small\" />\r\n                                      }\r\n                                      icon={\r\n                                        <CheckBoxOutlineBlankIcon fontSize=\"small\" />\r\n                                      }\r\n                                      style={{ marginRight: 8 }}\r\n                                    />\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </React.Fragment>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className=\"mb-4 pb-4 mt-4 pt-4\">\r\n                          <Col>\r\n                            <Autocomplete\r\n                              defaultValue={testAccordingToSpecification}\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              onInputChange={(_event, value) => {\r\n                                setFieldValue(\r\n                                  \"testAccordingToSpecification\",\r\n                                  value\r\n                                );\r\n                              }}\r\n                              openOnFocus\r\n                              options={testAccordingToSpecifications}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  error={\r\n                                    errors.testAccordingToSpecification &&\r\n                                    touched.testAccordingToSpecification\r\n                                  }\r\n                                  helperText={\r\n                                    errors.testAccordingToSpecification &&\r\n                                    touched.testAccordingToSpecification &&\r\n                                    errors.testAccordingToSpecification\r\n                                  }\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  label=\"Test According to Specification\"\r\n                                  name=\"testAccordingToSpecification\"\r\n                                  value={values.testAccordingToSpecification}\r\n                                />\r\n                              )}\r\n                              renderOption={(option, { inputValue }) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <div>\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </div>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            {requestAttachmentFileOriginalName &&\r\n                            !deleteAttachment ? (\r\n                              <div>\r\n                                <span className=\"label\">\r\n                                  Attachment File | Uploaded :\r\n                                </span>{\" \"}\r\n                                <Button\r\n                                  onClick={\r\n                                    !loading\r\n                                      ? () => {\r\n                                          this.triggerDownloadLaboratoryTestAttachment();\r\n                                        }\r\n                                      : null\r\n                                  }\r\n                                  size=\"small\"\r\n                                  variant=\"outlined\"\r\n                                >\r\n                                  {requestAttachmentFileOriginalName}\r\n                                </Button>\r\n                                <IconButton\r\n                                  aria-label=\"delete\"\r\n                                  color=\"secondary\"\r\n                                  onClick={this.deleteAttachment}\r\n                                >\r\n                                  <DeleteOutlineIcon fontSize=\"small\" />\r\n                                </IconButton>\r\n                              </div>\r\n                            ) : (\r\n                              <div>\r\n                                <span className=\"label\">\r\n                                  Attachment File | Uploaded : No File Uploaded\r\n                                </span>{\" \"}\r\n                              </div>\r\n                            )}\r\n                            <Input\r\n                              disableUnderline\r\n                              label=\"Attachment File\"\r\n                              onChange={this.onFileChange}\r\n                              type=\"file\"\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n\r\n                        {selectedLaboratoryTest?.requestReceiveDate ? (\r\n                          <div\r\n                            style={{\r\n                              borderTop: \"1px solid\",\r\n                              borderColor: \"#000000\",\r\n                              paddingTop: \"50px\",\r\n                              marginTop: \"50px\",\r\n                            }}\r\n                          >\r\n                            <Row\r\n                              style={{\r\n                                paddingBottom: \"20px\",\r\n                              }}\r\n                            >\r\n                              <Col>\r\n                                <div\r\n                                  style={{\r\n                                    fontSize: 14,\r\n                                    paddingBottom: \"10px\",\r\n                                    paddingTop: \"10px\",\r\n                                  }}\r\n                                >\r\n                                  Request Date:\r\n                                </div>\r\n                                <TextField\r\n                                  error={\r\n                                    errors.requestDate && touched.requestDate\r\n                                  }\r\n                                  fullWidth\r\n                                  helperText={\r\n                                    errors.requestDate &&\r\n                                    touched.requestDate &&\r\n                                    errors.requestDate\r\n                                  }\r\n                                  InputLabelProps={{ shrink: false }}\r\n                                  name=\"requestDate\"\r\n                                  onChange={handleChange}\r\n                                  type=\"date\"\r\n                                  value={values.requestDate}\r\n                                />\r\n                              </Col>\r\n                              <Col>\r\n                                <div\r\n                                  style={{\r\n                                    fontSize: 14,\r\n                                    paddingBottom: \"10px\",\r\n                                    paddingTop: \"10px\",\r\n                                  }}\r\n                                >\r\n                                  Sample Receive Date:\r\n                                </div>\r\n                                <TextField\r\n                                  error={\r\n                                    errors.requestReceiveDate &&\r\n                                    touched.requestReceiveDate\r\n                                  }\r\n                                  fullWidth\r\n                                  helperText={\r\n                                    errors.requestReceiveDate &&\r\n                                    touched.requestReceiveDate &&\r\n                                    errors.requestReceiveDate\r\n                                  }\r\n                                  InputLabelProps={{ shrink: false }}\r\n                                  name=\"requestReceiveDate\"\r\n                                  onChange={handleChange}\r\n                                  type=\"date\"\r\n                                  value={values.requestReceiveDate}\r\n                                />\r\n                              </Col>\r\n                              <Col>\r\n                                <div\r\n                                  style={{\r\n                                    fontSize: 14,\r\n                                    paddingBottom: \"10px\",\r\n                                    paddingTop: \"10px\",\r\n                                  }}\r\n                                >\r\n                                  Estimation Close Date:\r\n                                </div>\r\n                                <TextField\r\n                                  error={\r\n                                    errors.estimationCloseDate &&\r\n                                    touched.estimationCloseDate\r\n                                  }\r\n                                  fullWidth\r\n                                  helperText={\r\n                                    errors.estimationCloseDate &&\r\n                                    touched.estimationCloseDate &&\r\n                                    errors.estimationCloseDate\r\n                                  }\r\n                                  InputLabelProps={{ shrink: false }}\r\n                                  name=\"estimationCloseDate\"\r\n                                  onChange={handleChange}\r\n                                  type=\"date\"\r\n                                  value={values.estimationCloseDate}\r\n                                />\r\n                              </Col>\r\n                            </Row>\r\n                          </div>\r\n                        ) : null}\r\n\r\n                        {selectedLaboratoryTest?.requestReceiveDate ? (\r\n                          <div\r\n                            style={{\r\n                              borderTop: \"1px solid\",\r\n                              borderColor: \"#000000\",\r\n                              paddingTop: \"50px\",\r\n                              marginTop: \"50px\",\r\n                            }}\r\n                          >\r\n                            <Row className=\"mb-4 pb-4 mt-4 pt-4\">\r\n                              <Col>\r\n                                <Autocomplete\r\n                                  defaultValue={requester}\r\n                                  fullWidth\r\n                                  getOptionLabel={(option) => option}\r\n                                  onInputChange={(_event, value) => {\r\n                                    setFieldValue(\"requester\", value);\r\n                                  }}\r\n                                  openOnFocus\r\n                                  options={employees}\r\n                                  renderInput={(params) => (\r\n                                    <TextField\r\n                                      {...params}\r\n                                      error={\r\n                                        errors.requester && touched.requester\r\n                                      }\r\n                                      helperText={\r\n                                        errors.requester &&\r\n                                        touched.requester &&\r\n                                        errors.requester\r\n                                      }\r\n                                      InputLabelProps={{ shrink: true }}\r\n                                      label=\"Requester\"\r\n                                      name=\"requester\"\r\n                                      value={values.requester}\r\n                                    />\r\n                                  )}\r\n                                  renderOption={(option, { inputValue }) => {\r\n                                    const matches = match(option, inputValue);\r\n                                    const parts = parse(option, matches);\r\n                                    return (\r\n                                      <div>\r\n                                        {parts.map((part, index) => (\r\n                                          <span\r\n                                            key={index}\r\n                                            style={{\r\n                                              fontWeight: part.highlight\r\n                                                ? 700\r\n                                                : 400,\r\n                                            }}\r\n                                          >\r\n                                            {part.text}\r\n                                          </span>\r\n                                        ))}\r\n                                      </div>\r\n                                    );\r\n                                  }}\r\n                                />\r\n                              </Col>\r\n                              <Col>\r\n                                <Autocomplete\r\n                                  defaultValue={requestApprover}\r\n                                  fullWidth\r\n                                  getOptionLabel={(option) => option}\r\n                                  onInputChange={(_event, value) => {\r\n                                    setFieldValue(\"requestApprover\", value);\r\n                                  }}\r\n                                  openOnFocus\r\n                                  options={employees}\r\n                                  renderInput={(params) => (\r\n                                    <TextField\r\n                                      {...params}\r\n                                      error={\r\n                                        errors.requestApprover &&\r\n                                        touched.requestApprover\r\n                                      }\r\n                                      helperText={\r\n                                        errors.requestApprover &&\r\n                                        touched.requestApprover &&\r\n                                        errors.requestApprover\r\n                                      }\r\n                                      InputLabelProps={{ shrink: true }}\r\n                                      label=\"Request Approver\"\r\n                                      name=\"requestApprover\"\r\n                                      value={values.requestApprover}\r\n                                    />\r\n                                  )}\r\n                                  renderOption={(option, { inputValue }) => {\r\n                                    const matches = match(option, inputValue);\r\n                                    const parts = parse(option, matches);\r\n                                    return (\r\n                                      <div>\r\n                                        {parts.map((part, index) => (\r\n                                          <span\r\n                                            key={index}\r\n                                            style={{\r\n                                              fontWeight: part.highlight\r\n                                                ? 700\r\n                                                : 400,\r\n                                            }}\r\n                                          >\r\n                                            {part.text}\r\n                                          </span>\r\n                                        ))}\r\n                                      </div>\r\n                                    );\r\n                                  }}\r\n                                />\r\n                              </Col>\r\n                            </Row>\r\n                            <Row className=\"mb-4 pb-4 mt-4 pt-4\">\r\n                              <Col>\r\n                                <Autocomplete\r\n                                  defaultValue={reporter}\r\n                                  fullWidth\r\n                                  getOptionLabel={(option) => option}\r\n                                  onInputChange={(_event, value) => {\r\n                                    setFieldValue(\"reporter\", value);\r\n                                  }}\r\n                                  openOnFocus\r\n                                  options={employees}\r\n                                  renderInput={(params) => (\r\n                                    <TextField\r\n                                      {...params}\r\n                                      error={\r\n                                        errors.reporter && touched.reporter\r\n                                      }\r\n                                      helperText={\r\n                                        errors.reporter &&\r\n                                        touched.reporter &&\r\n                                        errors.reporter\r\n                                      }\r\n                                      InputLabelProps={{ shrink: true }}\r\n                                      label=\"Reporter\"\r\n                                      name=\"reporter\"\r\n                                      value={values.reporter}\r\n                                    />\r\n                                  )}\r\n                                  renderOption={(option, { inputValue }) => {\r\n                                    const matches = match(option, inputValue);\r\n                                    const parts = parse(option, matches);\r\n                                    return (\r\n                                      <div>\r\n                                        {parts.map((part, index) => (\r\n                                          <span\r\n                                            key={index}\r\n                                            style={{\r\n                                              fontWeight: part.highlight\r\n                                                ? 700\r\n                                                : 400,\r\n                                            }}\r\n                                          >\r\n                                            {part.text}\r\n                                          </span>\r\n                                        ))}\r\n                                      </div>\r\n                                    );\r\n                                  }}\r\n                                />\r\n                              </Col>\r\n                              <Col>\r\n                                <Autocomplete\r\n                                  defaultValue={reportApprover}\r\n                                  fullWidth\r\n                                  getOptionLabel={(option) => option}\r\n                                  onInputChange={(_event, value) => {\r\n                                    setFieldValue(\"reportApprover\", value);\r\n                                  }}\r\n                                  openOnFocus\r\n                                  options={employees}\r\n                                  renderInput={(params) => (\r\n                                    <TextField\r\n                                      {...params}\r\n                                      error={\r\n                                        errors.reportApprover &&\r\n                                        touched.reportApprover\r\n                                      }\r\n                                      helperText={\r\n                                        errors.reportApprover &&\r\n                                        touched.reportApprover &&\r\n                                        errors.reportApprover\r\n                                      }\r\n                                      InputLabelProps={{ shrink: true }}\r\n                                      label=\"Report Approver\"\r\n                                      name=\"reportApprover\"\r\n                                      value={values.reportApprover}\r\n                                    />\r\n                                  )}\r\n                                  renderOption={(option, { inputValue }) => {\r\n                                    const matches = match(option, inputValue);\r\n                                    const parts = parse(option, matches);\r\n                                    return (\r\n                                      <div>\r\n                                        {parts.map((part, index) => (\r\n                                          <span\r\n                                            key={index}\r\n                                            style={{\r\n                                              fontWeight: part.highlight\r\n                                                ? 700\r\n                                                : 400,\r\n                                            }}\r\n                                          >\r\n                                            {part.text}\r\n                                          </span>\r\n                                        ))}\r\n                                      </div>\r\n                                    );\r\n                                  }}\r\n                                />\r\n                              </Col>\r\n                            </Row>\r\n                          </div>\r\n                        ) : null}\r\n                      </Container>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                      <Button\r\n                        className={`btn-shadow btn-multiple-state ${\r\n                          loading ? \"show-spinner\" : \"\"\r\n                        }`}\r\n                        color=\"primary\"\r\n                        type={!loading ? \"submit\" : \"button\"}\r\n                        variant=\"contained\"\r\n                      >\r\n                        <LoadingSpinner />\r\n                        <span className=\"label\">Save</span>\r\n                      </Button>\r\n                      <Button\r\n                        className={`btn-shadow btn-multiple-state ${\r\n                          loading ? \"show-spinner\" : \"\"\r\n                        }`}\r\n                        color=\"secondary\"\r\n                        onClick={\r\n                          !loading\r\n                            ? () => {\r\n                                toggleEditRequestModal({});\r\n                              }\r\n                            : null\r\n                        }\r\n                        type=\"button\"\r\n                        variant=\"contained\"\r\n                      >\r\n                        <LoadingSpinner />\r\n                        <span className=\"label\">Cancel</span>\r\n                      </Button>\r\n                    </ModalFooter>\r\n                  </Form>\r\n                </MuiPickersUtilsProvider>\r\n              )}\r\n            </Formik>\r\n          </React.Fragment>\r\n        ) : null}\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ auth, qaLaboratoryTest, userManagement }) => {\r\n  const { token } = auth;\r\n  const { loading, showEditRequestModal, selectedLaboratoryTest } =\r\n    qaLaboratoryTest;\r\n  const { users } = userManagement;\r\n\r\n  return {\r\n    token,\r\n    loading,\r\n    showEditRequestModal,\r\n    selectedLaboratoryTest,\r\n    users,\r\n  };\r\n};\r\n\r\nconst mapActionsToProps = {\r\n  toggleEditRequestModal,\r\n  editLaboratoryTestRequest,\r\n  downloadLaboratoryTestAttachment,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionsToProps\r\n)(EditLaboratoryTestRequestModal);\r\n","import {\r\n  Col,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport { Document, Page, pdfjs } from \"react-pdf\";\r\nimport React, { PureComponent } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { LoadingSpinner } from \"../../components/Miscellaneous\";\r\nimport { SizeMe } from \"react-sizeme\";\r\nimport { backEndUrl } from \"../../constants/defaultValues\";\r\nimport { connect } from \"react-redux\";\r\nimport { toggleReportHistoryModal } from \"../../redux/actions\";\r\npdfjs.GlobalWorkerOptions.workerSrc = `${backEndUrl}/assets/js/pdf.worker.min.js`;\r\n\r\nclass LaboratoryTestReportHistoryModal extends PureComponent {\r\n  render() {\r\n    const {\r\n      loading,\r\n      showReportHistoryModal,\r\n      selectedLaboratoryTest,\r\n      toggleReportHistoryModal,\r\n    } = this.props;\r\n    const { reportIds } = selectedLaboratoryTest ?? {};\r\n\r\n    return (\r\n      <Modal\r\n        backdrop={true}\r\n        className={`modal-form-l`}\r\n        isOpen={showReportHistoryModal}\r\n        toggle={toggleReportHistoryModal}\r\n      >\r\n        {showReportHistoryModal && selectedLaboratoryTest ? (\r\n          <React.Fragment>\r\n            <ModalHeader>Laboratory Test Report History Archive</ModalHeader>\r\n            <ModalBody>\r\n              <Row>\r\n                <Col>\r\n                  {reportIds?.map((reportId, i) => {\r\n                    if (i < reportIds?.length - 1) {\r\n                      return (\r\n                        <SizeMe>\r\n                          {({ size }) => (\r\n                            <Document\r\n                              file={\r\n                                `${backEndUrl}/temp/QA Laboratory Test Report ` +\r\n                                reportId +\r\n                                \".pdf\"\r\n                              }\r\n                            >\r\n                              <Page\r\n                                pageNumber={1}\r\n                                width={size.width ? size.width : 1}\r\n                              />\r\n                            </Document>\r\n                          )}\r\n                        </SizeMe>\r\n                      );\r\n                    }\r\n                    return null;\r\n                  })}\r\n                </Col>\r\n              </Row>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button\r\n                className={`btn-shadow btn-multiple-state`}\r\n                color=\"secondary\"\r\n                onClick={\r\n                  !loading\r\n                    ? () => {\r\n                        toggleReportHistoryModal({});\r\n                      }\r\n                    : null\r\n                }\r\n                type=\"button\"\r\n                variant=\"contained\"\r\n              >\r\n                <LoadingSpinner />\r\n                <span className=\"label\">Close</span>\r\n              </Button>\r\n            </ModalFooter>\r\n          </React.Fragment>\r\n        ) : null}\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ auth, qaLaboratoryTest }) => {\r\n  const { token } = auth;\r\n  const { loading, showReportHistoryModal, selectedLaboratoryTest } =\r\n    qaLaboratoryTest;\r\n\r\n  return {\r\n    token,\r\n    loading,\r\n    showReportHistoryModal,\r\n    selectedLaboratoryTest,\r\n  };\r\n};\r\n\r\nconst mapActionsToProps = {\r\n  toggleReportHistoryModal,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionsToProps\r\n)(LaboratoryTestReportHistoryModal);\r\n","import { Button, TextField } from \"@material-ui/core\";\r\nimport {\r\n  Col,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport { Document, Page, pdfjs } from \"react-pdf\";\r\nimport { Form, Formik } from \"formik\";\r\nimport React, { PureComponent } from \"react\";\r\nimport {\r\n  downloadLaboratoryTestAttachment,\r\n  receiveLaboratoryTestRequest,\r\n  toggleReceiveRequestModal,\r\n} from \"../../redux/actions\";\r\nimport { LoadingSpinner } from \"../../components/Miscellaneous\";\r\nimport { SizeMe } from \"react-sizeme\";\r\nimport { backEndUrl } from \"../../constants/defaultValues\";\r\nimport { connect } from \"react-redux\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { laboratoryTestRequestReceiveFormValidationSchema } from \"../../constants/validationSchemas\";\r\nimport moment from \"moment\";\r\nimport {\r\n  toastRequestReceiveDateMustBeBigger,\r\n  toastEstimationCloseDateMustBeBigger,\r\n} from \"../../components/Toasts\";\r\nimport { AttachmentOutlined } from \"@material-ui/icons\";\r\npdfjs.GlobalWorkerOptions.workerSrc = `${backEndUrl}/assets/js/pdf.worker.min.js`;\r\n\r\nclass ReceiveLaboratoryTestRequestModal extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      requestDate: \"\",\r\n      requestReceiveDate: \"\",\r\n      workdayEstimation: \"\",\r\n      estimationCloseDate: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, _prevState) {\r\n    const { showReceiveRequestModal, selectedLaboratoryTest } = this.props;\r\n\r\n    if (\r\n      showReceiveRequestModal !== prevProps.showReceiveRequestModal &&\r\n      showReceiveRequestModal &&\r\n      selectedLaboratoryTest\r\n    ) {\r\n      const { requestDate } = selectedLaboratoryTest;\r\n      const today = moment().format(\"YYYY-MM-DD\");\r\n\r\n      this.setState({\r\n        requestDate: requestDate?.substring(0, 10),\r\n        requestReceiveDate: today,\r\n        workdayEstimation: 0,\r\n        estimationCloseDate: today,\r\n      });\r\n    }\r\n  }\r\n\r\n  triggerDownloadLaboratoryTestAttachment() {\r\n    const { selectedLaboratoryTest, downloadLaboratoryTestAttachment } =\r\n      this.props;\r\n    const { requestAttachmentFileName } = selectedLaboratoryTest;\r\n\r\n    downloadLaboratoryTestAttachment({ fileName: requestAttachmentFileName });\r\n  }\r\n\r\n  triggerReceiveLaboratoryTestRequest = (values) => {\r\n    const {\r\n      token,\r\n      loading,\r\n      selectedLaboratoryTest,\r\n      receiveLaboratoryTestRequest,\r\n    } = this.props;\r\n    const userId = jwt_decode(token).id;\r\n    const { id } = selectedLaboratoryTest;\r\n    let { requestDate, requestReceiveDate, estimationCloseDate } = values;\r\n    let laboratoryTest = new FormData();\r\n\r\n    if (!loading) {\r\n      requestDate = new Date(requestDate);\r\n      requestReceiveDate = new Date(requestReceiveDate);\r\n      estimationCloseDate = new Date(estimationCloseDate);\r\n      if (requestDate > requestReceiveDate) {\r\n        toastRequestReceiveDateMustBeBigger();\r\n      } else if (requestReceiveDate > estimationCloseDate) {\r\n        toastEstimationCloseDateMustBeBigger();\r\n      } else if (\r\n        requestDate <= requestReceiveDate &&\r\n        requestReceiveDate <= estimationCloseDate\r\n      ) {\r\n        laboratoryTest.append(\"requestReceiver\", userId);\r\n        laboratoryTest.append(\"requestDate\", values.requestDate);\r\n        laboratoryTest.append(\"requestReceiveDate\", values.requestReceiveDate);\r\n        laboratoryTest.append(\r\n          \"estimationCloseDate\",\r\n          values.estimationCloseDate\r\n        );\r\n        receiveLaboratoryTestRequest(id, laboratoryTest);\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      loading,\r\n      showReceiveRequestModal,\r\n      selectedLaboratoryTest,\r\n      toggleReceiveRequestModal,\r\n    } = this.props;\r\n    const {\r\n      requestDate,\r\n      requestReceiveDate,\r\n      workdayEstimation,\r\n      estimationCloseDate,\r\n    } = this.state;\r\n    const { requestIds, requestAttachmentFileName } =\r\n      selectedLaboratoryTest ?? {};\r\n    let laboratoryTestRequestReceiveFormInitialValues = {};\r\n\r\n    if (showReceiveRequestModal) {\r\n      laboratoryTestRequestReceiveFormInitialValues = {\r\n        requestDate,\r\n        requestReceiveDate,\r\n        workdayEstimation,\r\n        estimationCloseDate,\r\n      };\r\n    }\r\n\r\n    return (\r\n      <Modal\r\n        className={`modal-form-l`}\r\n        isOpen={showReceiveRequestModal}\r\n        toggle={toggleReceiveRequestModal}\r\n        backdrop={true}\r\n      >\r\n        {showReceiveRequestModal && selectedLaboratoryTest ? (\r\n          <React.Fragment>\r\n            <Formik\r\n              initialValues={laboratoryTestRequestReceiveFormInitialValues}\r\n              onSubmit={this.triggerReceiveLaboratoryTestRequest}\r\n              validationSchema={\r\n                laboratoryTestRequestReceiveFormValidationSchema\r\n              }\r\n            >\r\n              {({ values, touched, errors, handleChange, setFieldValue }) => (\r\n                <Form autoComplete=\"off\">\r\n                  <ModalHeader>Receive Laboratory Test Request</ModalHeader>\r\n                  <ModalBody>\r\n                    <SizeMe>\r\n                      {({ size }) => (\r\n                        <div>\r\n                          <Document\r\n                            file={`${backEndUrl}/temp/QA Laboratory Test Request ${\r\n                              requestIds[requestIds?.length - 1]\r\n                            }.pdf`}\r\n                          >\r\n                            <Page\r\n                              pageNumber={1}\r\n                              width={size.width ? size.width : 1}\r\n                            />\r\n                          </Document>\r\n                          <div\r\n                            style={{\r\n                              border: \"2.65px solid\",\r\n                              borderColor: \"#000000\",\r\n                              marginLeft: \"65px\",\r\n                              marginRight: \"50px\",\r\n                              padding: \"10px\",\r\n                            }}\r\n                          >\r\n                            <Row\r\n                              style={{\r\n                                paddingBottom: \"20px\",\r\n                              }}\r\n                            >\r\n                              <Col>\r\n                                <div\r\n                                  style={{\r\n                                    fontSize: 18,\r\n                                    fontWeight: \"bold\",\r\n                                    paddingBottom: \"10px\",\r\n                                    paddingTop: \"10px\",\r\n                                    textDecorationLine: \"underline\",\r\n                                  }}\r\n                                >\r\n                                  Request Date:\r\n                                </div>\r\n                                <TextField\r\n                                  error={\r\n                                    errors.requestDate && touched.requestDate\r\n                                  }\r\n                                  fullWidth\r\n                                  helperText={\r\n                                    errors.requestDate &&\r\n                                    touched.requestDate &&\r\n                                    errors.requestDate\r\n                                  }\r\n                                  InputLabelProps={{ shrink: false }}\r\n                                  name=\"requestDate\"\r\n                                  onChange={handleChange}\r\n                                  type=\"date\"\r\n                                  value={values.requestDate}\r\n                                />\r\n                              </Col>\r\n                              <Col>\r\n                                <div\r\n                                  style={{\r\n                                    fontSize: 18,\r\n                                    fontWeight: \"bold\",\r\n                                    paddingBottom: \"10px\",\r\n                                    paddingTop: \"10px\",\r\n                                    textDecorationLine: \"underline\",\r\n                                  }}\r\n                                >\r\n                                  Sample Receive Date:\r\n                                </div>\r\n                                <TextField\r\n                                  error={\r\n                                    errors.requestReceiveDate &&\r\n                                    touched.requestReceiveDate\r\n                                  }\r\n                                  fullWidth\r\n                                  helperText={\r\n                                    errors.requestReceiveDate &&\r\n                                    touched.requestReceiveDate &&\r\n                                    errors.requestReceiveDate\r\n                                  }\r\n                                  InputLabelProps={{ shrink: false }}\r\n                                  name=\"requestReceiveDate\"\r\n                                  onChange={(event) => {\r\n                                    const requestDate = new Date(\r\n                                      values.requestDate\r\n                                    );\r\n                                    const requestReceiveDate = new Date(\r\n                                      event.target.value\r\n                                    );\r\n                                    const estimationCloseDate = new Date(\r\n                                      values.estimationCloseDate\r\n                                    );\r\n                                    if (\r\n                                      requestReceiveDate >= requestDate &&\r\n                                      estimationCloseDate >= requestReceiveDate\r\n                                    ) {\r\n                                      const workdayEstimation = Math.round(\r\n                                        Math.abs(\r\n                                          (requestReceiveDate -\r\n                                            estimationCloseDate) /\r\n                                            (24 * 60 * 60 * 1000)\r\n                                        )\r\n                                      );\r\n                                      setFieldValue(\r\n                                        \"requestReceiveDate\",\r\n                                        event.target.value\r\n                                      );\r\n                                      setFieldValue(\r\n                                        \"workdayEstimation\",\r\n                                        workdayEstimation\r\n                                      );\r\n                                    } else if (\r\n                                      requestReceiveDate >= requestDate &&\r\n                                      estimationCloseDate < requestReceiveDate\r\n                                    ) {\r\n                                      setFieldValue(\r\n                                        \"requestReceiveDate\",\r\n                                        event.target.value\r\n                                      );\r\n                                      setFieldValue(\"workdayEstimation\", 0);\r\n                                      setFieldValue(\r\n                                        \"estimationCloseDate\",\r\n                                        event.target.value\r\n                                      );\r\n                                    } else if (\r\n                                      requestDate > requestReceiveDate\r\n                                    ) {\r\n                                      toastRequestReceiveDateMustBeBigger();\r\n                                    }\r\n                                  }}\r\n                                  type=\"date\"\r\n                                  value={values.requestReceiveDate}\r\n                                />\r\n                              </Col>\r\n                            </Row>\r\n                            <Row\r\n                              style={{\r\n                                paddingBottom: \"20px\",\r\n                              }}\r\n                            >\r\n                              <Col>\r\n                                <div\r\n                                  style={{\r\n                                    fontSize: 18,\r\n                                    fontWeight: \"bold\",\r\n                                    paddingBottom: \"10px\",\r\n                                    paddingTop: \"10px\",\r\n                                    textDecorationLine: \"underline\",\r\n                                  }}\r\n                                >\r\n                                  Workday Estimation:\r\n                                </div>\r\n                                <TextField\r\n                                  error={\r\n                                    errors.workdayEstimation &&\r\n                                    touched.workdayEstimation\r\n                                  }\r\n                                  fullWidth\r\n                                  helperText={\r\n                                    errors.workdayEstimation &&\r\n                                    touched.workdayEstimation &&\r\n                                    errors.workdayEstimation\r\n                                  }\r\n                                  InputLabelProps={{ shrink: false }}\r\n                                  min=\"1\"\r\n                                  name=\"workdayEstimation\"\r\n                                  onChange={(event) => {\r\n                                    const workdayEstimation =\r\n                                      event.target.value;\r\n\r\n                                    if (\r\n                                      workdayEstimation >= 0 &&\r\n                                      /^\\d+$/.test(workdayEstimation) &&\r\n                                      parseInt(workdayEstimation) < 1000\r\n                                    ) {\r\n                                      const requestReceiveDate = new Date(\r\n                                        values.requestReceiveDate\r\n                                      );\r\n                                      const estimationCloseDate =\r\n                                        requestReceiveDate;\r\n                                      estimationCloseDate.setDate(\r\n                                        estimationCloseDate.getDate() +\r\n                                          parseInt(workdayEstimation)\r\n                                      );\r\n                                      setFieldValue(\r\n                                        \"workdayEstimation\",\r\n                                        workdayEstimation\r\n                                      );\r\n                                      setFieldValue(\r\n                                        \"estimationCloseDate\",\r\n                                        estimationCloseDate\r\n                                          .toISOString()\r\n                                          .split(\"T\")[0]\r\n                                      );\r\n                                    }\r\n                                  }}\r\n                                  step=\"1\"\r\n                                  type=\"number\"\r\n                                  value={values.workdayEstimation}\r\n                                />\r\n                              </Col>\r\n                              <Col>\r\n                                <div\r\n                                  style={{\r\n                                    fontSize: 18,\r\n                                    fontWeight: \"bold\",\r\n                                    paddingBottom: \"10px\",\r\n                                    paddingTop: \"10px\",\r\n                                    textDecorationLine: \"underline\",\r\n                                  }}\r\n                                >\r\n                                  Estimation Close Date:\r\n                                </div>\r\n                                <TextField\r\n                                  error={\r\n                                    errors.estimationCloseDate &&\r\n                                    touched.estimationCloseDate\r\n                                  }\r\n                                  fullWidth\r\n                                  helperText={\r\n                                    errors.estimationCloseDate &&\r\n                                    touched.estimationCloseDate &&\r\n                                    errors.estimationCloseDate\r\n                                  }\r\n                                  InputLabelProps={{ shrink: false }}\r\n                                  name=\"estimationCloseDate\"\r\n                                  onChange={(event) => {\r\n                                    const requestReceiveDate = new Date(\r\n                                      values.requestReceiveDate\r\n                                    );\r\n                                    const estimationCloseDate = new Date(\r\n                                      event.target.value\r\n                                    );\r\n                                    if (\r\n                                      estimationCloseDate >= requestReceiveDate\r\n                                    ) {\r\n                                      const oneDay = 24 * 60 * 60 * 1000;\r\n                                      const workdayEstimation = Math.round(\r\n                                        Math.abs(\r\n                                          (requestReceiveDate -\r\n                                            estimationCloseDate) /\r\n                                            oneDay\r\n                                        )\r\n                                      );\r\n                                      setFieldValue(\r\n                                        \"estimationCloseDate\",\r\n                                        event.target.value\r\n                                      );\r\n                                      setFieldValue(\r\n                                        \"workdayEstimation\",\r\n                                        workdayEstimation\r\n                                      );\r\n                                    } else {\r\n                                      toastEstimationCloseDateMustBeBigger();\r\n                                    }\r\n                                  }}\r\n                                  type=\"date\"\r\n                                  value={values.estimationCloseDate}\r\n                                />\r\n                              </Col>\r\n                            </Row>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </SizeMe>\r\n                  </ModalBody>\r\n                  <ModalFooter>\r\n                    <Button\r\n                      className={`btn-shadow btn-multiple-state ${\r\n                        loading ? \"show-spinner\" : \"\"\r\n                      }`}\r\n                      color=\"secondary\"\r\n                      onClick={\r\n                        !loading\r\n                          ? () => {\r\n                              toggleReceiveRequestModal({});\r\n                            }\r\n                          : null\r\n                      }\r\n                      type=\"button\"\r\n                      variant=\"contained\"\r\n                    >\r\n                      <LoadingSpinner />\r\n                      <span className=\"label\">Cancel</span>\r\n                    </Button>\r\n                    {requestAttachmentFileName ? (\r\n                      <Button\r\n                        className={`btn-shadow btn-multiple-state ${\r\n                          loading ? \"show-spinner\" : \"\"\r\n                        }`}\r\n                        color=\"primary\"\r\n                        onClick={\r\n                          !loading\r\n                            ? () => {\r\n                                this.triggerDownloadLaboratoryTestAttachment();\r\n                              }\r\n                            : null\r\n                        }\r\n                        type=\"button\"\r\n                        variant=\"contained\"\r\n                      >\r\n                        <LoadingSpinner />\r\n                        <span className=\"label\">\r\n                          <AttachmentOutlined />\r\n                        </span>\r\n                      </Button>\r\n                    ) : null}\r\n                    <Button\r\n                      className={`btn-shadow btn-multiple-state ${\r\n                        loading ? \"show-spinner\" : \"\"\r\n                      }`}\r\n                      color=\"primary\"\r\n                      type={!loading ? \"submit\" : \"button\"}\r\n                      variant=\"contained\"\r\n                    >\r\n                      <LoadingSpinner />\r\n                      <span className=\"label\">Receive</span>\r\n                    </Button>\r\n                  </ModalFooter>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </React.Fragment>\r\n        ) : null}\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ auth, qaLaboratoryTest }) => {\r\n  const { token } = auth;\r\n  const { loading, showReceiveRequestModal, selectedLaboratoryTest } =\r\n    qaLaboratoryTest;\r\n\r\n  return {\r\n    token,\r\n    loading,\r\n    showReceiveRequestModal,\r\n    selectedLaboratoryTest,\r\n  };\r\n};\r\n\r\nconst mapActionsToProps = {\r\n  toggleReceiveRequestModal,\r\n  downloadLaboratoryTestAttachment,\r\n  receiveLaboratoryTestRequest,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionsToProps\r\n)(ReceiveLaboratoryTestRequestModal);\r\n","import { Button, IconButton, Input, TextField } from \"@material-ui/core\";\r\nimport {\r\n  Col,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport { Document, Page, pdfjs } from \"react-pdf\";\r\nimport { EditorState, convertFromRaw, convertToRaw } from \"draft-js\";\r\nimport { Form, Formik } from \"formik\";\r\nimport React, { PureComponent } from \"react\";\r\nimport {\r\n  downloadLaboratoryTestAttachment,\r\n  reviseLaboratoryTestReport,\r\n  toggleReviseReportModal,\r\n} from \"../../redux/actions\";\r\nimport { DeleteOutline as DeleteOutlineIcon } from \"@material-ui/icons\";\r\nimport { Editor } from \"react-draft-wysiwyg\";\r\nimport { LoadingSpinner } from \"../../components/Miscellaneous\";\r\nimport { SizeMe } from \"react-sizeme\";\r\nimport { backEndUrl } from \"../../constants/defaultValues\";\r\nimport { connect } from \"react-redux\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { laboratoryTestReportFormValidationSchema } from \"../../constants/validationSchemas\";\r\nimport { stateToHTML } from \"draft-js-export-html\";\r\npdfjs.GlobalWorkerOptions.workerSrc = `${backEndUrl}/assets/js/pdf.worker.min.js`;\r\n\r\nclass ReviseLaboratoryTestReportModal extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      reportDate: \"\",\r\n      reportNumber: \"\",\r\n      reportAttachmentFileName: null,\r\n      reportAttachmentFileOriginalName: null,\r\n      selectedFile: null,\r\n      deleteAttachment: false,\r\n      defaultEditorState: EditorState.createEmpty(),\r\n      editorState: EditorState.createEmpty(),\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, _prevState) {\r\n    const { showReviseReportModal, selectedLaboratoryTest } = this.props;\r\n\r\n    if (\r\n      showReviseReportModal !== prevProps.showReviseReportModal &&\r\n      showReviseReportModal\r\n    ) {\r\n      const {\r\n        reportDate,\r\n        reportNumber,\r\n        reportAttachmentFileName,\r\n        reportAttachmentFileOriginalName,\r\n        testResult,\r\n      } = selectedLaboratoryTest;\r\n\r\n      this.setState({\r\n        reportDate: reportDate?.substring(0, 10),\r\n        reportNumber,\r\n        reportAttachmentFileName,\r\n        reportAttachmentFileOriginalName,\r\n        selectedFile: null,\r\n        deleteAttachment: false,\r\n        defaultEditorState: EditorState.createWithContent(\r\n          convertFromRaw(JSON.parse(testResult))\r\n        ),\r\n        editorState: EditorState.createWithContent(\r\n          convertFromRaw(JSON.parse(testResult))\r\n        ),\r\n      });\r\n    }\r\n  }\r\n\r\n  onFileChange = (event) => {\r\n    this.setState({\r\n      selectedFile: event.target.files[0],\r\n      deleteAttachment: false,\r\n    });\r\n  };\r\n\r\n  deleteAttachment = () => {\r\n    this.setState({\r\n      deleteAttachment: true,\r\n    });\r\n  };\r\n\r\n  onTestResultChange = (editorState) => {\r\n    this.setState({ editorState });\r\n  };\r\n\r\n  triggerDownloadLaboratoryTestAttachment() {\r\n    const { selectedLaboratoryTest, downloadLaboratoryTestAttachment } =\r\n      this.props;\r\n    const { reportAttachmentFileName } = selectedLaboratoryTest;\r\n\r\n    downloadLaboratoryTestAttachment({ fileName: reportAttachmentFileName });\r\n  }\r\n\r\n  triggerReviseLaboratoryTestReport = (values) => {\r\n    const {\r\n      token,\r\n      loading,\r\n      selectedLaboratoryTest,\r\n      reviseLaboratoryTestReport,\r\n    } = this.props;\r\n    const {\r\n      selectedFile,\r\n      editorState,\r\n      reportAttachmentFileName,\r\n      reportAttachmentFileOriginalName,\r\n      deleteAttachment,\r\n    } = this.state;\r\n    const userId = jwt_decode(token).id;\r\n    const { id } = selectedLaboratoryTest;\r\n    const { reportDate, reportNumber } = values;\r\n    let laboratoryTest = new FormData();\r\n\r\n    if (!loading) {\r\n      laboratoryTest.append(\"reporter\", userId);\r\n      laboratoryTest.append(\"reportDate\", reportDate);\r\n      laboratoryTest.append(\"reportNumber\", reportNumber?.trim());\r\n      laboratoryTest.append(\r\n        \"testResult\",\r\n        JSON.stringify(convertToRaw(editorState.getCurrentContent()))\r\n      );\r\n      laboratoryTest.append(\r\n        \"testResultHtml\",\r\n        stateToHTML(editorState.getCurrentContent())\r\n      );\r\n      if (reportAttachmentFileName) {\r\n        laboratoryTest.append(\r\n          \"reportAttachmentFileName\",\r\n          reportAttachmentFileName\r\n        );\r\n        laboratoryTest.append(\r\n          \"reportAttachmentFileOriginalName\",\r\n          reportAttachmentFileOriginalName\r\n        );\r\n      }\r\n      if (selectedFile) {\r\n        laboratoryTest.append(\"file\", selectedFile);\r\n      }\r\n      if (deleteAttachment) {\r\n        laboratoryTest.append(\"file\", null);\r\n      }\r\n      reviseLaboratoryTestReport(id, laboratoryTest);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      loading,\r\n      showReviseReportModal,\r\n      selectedLaboratoryTest,\r\n      toggleReviseReportModal,\r\n    } = this.props;\r\n    const {\r\n      reportDate,\r\n      reportNumber,\r\n      reportAttachmentFileOriginalName,\r\n      deleteAttachment,\r\n      defaultEditorState,\r\n      editorState,\r\n    } = this.state;\r\n    const { requestIds } = selectedLaboratoryTest ?? {};\r\n    let laboratoryTestReportFormInitialValues = {};\r\n\r\n    if (showReviseReportModal) {\r\n      laboratoryTestReportFormInitialValues = {\r\n        reportDate,\r\n        reportNumber,\r\n      };\r\n    }\r\n    return (\r\n      <Modal\r\n        backdrop={true}\r\n        className={`modal-form-l`}\r\n        isOpen={showReviseReportModal}\r\n        toggle={toggleReviseReportModal}\r\n      >\r\n        {showReviseReportModal && selectedLaboratoryTest ? (\r\n          <React.Fragment>\r\n            <Formik\r\n              initialValues={laboratoryTestReportFormInitialValues}\r\n              onSubmit={this.triggerReviseLaboratoryTestReport}\r\n              validationSchema={laboratoryTestReportFormValidationSchema}\r\n            >\r\n              {({ values, touched, errors, handleChange }) => (\r\n                <Form autoComplete=\"off\">\r\n                  <ModalHeader>Revise Laboratory Test Report</ModalHeader>\r\n                  <ModalBody>\r\n                    <SizeMe>\r\n                      {({ size }) => (\r\n                        <div>\r\n                          <Document\r\n                            file={`${backEndUrl}/temp/QA Laboratory Test Request ${\r\n                              requestIds[requestIds?.length - 1]\r\n                            }.pdf`}\r\n                          >\r\n                            <Page\r\n                              pageNumber={1}\r\n                              width={size.width ? size.width : 1}\r\n                            />\r\n                          </Document>\r\n                          <div\r\n                            style={{\r\n                              border: \"2.65px solid\",\r\n                              borderColor: \"#000000\",\r\n                              marginLeft: \"65px\",\r\n                              marginRight: \"50px\",\r\n                              padding: \"10px\",\r\n                            }}\r\n                          >\r\n                            <Row\r\n                              style={{\r\n                                paddingBottom: \"20px\",\r\n                              }}\r\n                            >\r\n                              <Col>\r\n                                <div\r\n                                  style={{\r\n                                    fontSize: 18,\r\n                                    fontWeight: \"bold\",\r\n                                    paddingBottom: \"10px\",\r\n                                    paddingTop: \"10px\",\r\n                                    textDecorationLine: \"underline\",\r\n                                  }}\r\n                                >\r\n                                  Report Date:\r\n                                </div>\r\n                                <TextField\r\n                                  error={\r\n                                    errors.reportDate && touched.reportDate\r\n                                  }\r\n                                  fullWidth\r\n                                  helperText={\r\n                                    errors.reportDate &&\r\n                                    touched.reportDate &&\r\n                                    errors.reportDate\r\n                                  }\r\n                                  InputLabelProps={{ shrink: false }}\r\n                                  name=\"reportDate\"\r\n                                  onChange={handleChange}\r\n                                  type=\"date\"\r\n                                  value={values.reportDate}\r\n                                />\r\n                              </Col>\r\n                              <Col>\r\n                                <div\r\n                                  style={{\r\n                                    fontSize: 18,\r\n                                    fontWeight: \"bold\",\r\n                                    paddingBottom: \"10px\",\r\n                                    paddingTop: \"10px\",\r\n                                    textDecorationLine: \"underline\",\r\n                                  }}\r\n                                >\r\n                                  Report Number:\r\n                                </div>\r\n                                <TextField\r\n                                  error={\r\n                                    errors.reportNumber && touched.reportNumber\r\n                                  }\r\n                                  fullWidth\r\n                                  helperText={\r\n                                    errors.reportNumber &&\r\n                                    touched.reportNumber &&\r\n                                    errors.reportNumber\r\n                                  }\r\n                                  InputLabelProps={{ shrink: false }}\r\n                                  name=\"reportNumber\"\r\n                                  onChange={handleChange}\r\n                                  type=\"text\"\r\n                                  value={values.reportNumber}\r\n                                />\r\n                              </Col>\r\n                            </Row>\r\n                            <Row\r\n                              style={{\r\n                                paddingBottom: \"20px\",\r\n                              }}\r\n                            >\r\n                              <Col>\r\n                                {reportAttachmentFileOriginalName &&\r\n                                !deleteAttachment ? (\r\n                                  <div>\r\n                                    <span\r\n                                      style={{\r\n                                        fontSize: 18,\r\n                                        fontWeight: \"bold\",\r\n                                        paddingRight: \"10px\",\r\n                                        paddingTop: \"10px\",\r\n                                        textDecorationLine: \"underline\",\r\n                                      }}\r\n                                    >\r\n                                      Attachment File | Uploaded :\r\n                                    </span>{\" \"}\r\n                                    <Button\r\n                                      onClick={\r\n                                        !loading\r\n                                          ? () => {\r\n                                              this.triggerDownloadLaboratoryTestAttachment();\r\n                                            }\r\n                                          : null\r\n                                      }\r\n                                      size=\"small\"\r\n                                      variant=\"outlined\"\r\n                                    >\r\n                                      {reportAttachmentFileOriginalName}\r\n                                    </Button>\r\n                                    <IconButton\r\n                                      aria-label=\"delete\"\r\n                                      onClick={this.deleteAttachment}\r\n                                    >\r\n                                      <DeleteOutlineIcon fontSize=\"small\" />\r\n                                    </IconButton>\r\n                                  </div>\r\n                                ) : (\r\n                                  <div>\r\n                                    <span\r\n                                      style={{\r\n                                        fontSize: 18,\r\n                                        fontWeight: \"bold\",\r\n                                        paddingRight: \"10px\",\r\n                                        paddingTop: \"10px\",\r\n                                        textDecorationLine: \"underline\",\r\n                                      }}\r\n                                    >\r\n                                      Attachment File | Uploaded :\r\n                                    </span>\r\n                                    <label\r\n                                      style={{\r\n                                        fontSize: 18,\r\n                                      }}\r\n                                    >\r\n                                      No File Uploaded\r\n                                    </label>\r\n                                  </div>\r\n                                )}\r\n                                <Input\r\n                                  disableUnderline\r\n                                  label=\"Attachment File\"\r\n                                  onChange={this.onFileChange}\r\n                                  style={{\r\n                                    paddingBottom: \"20px\",\r\n                                  }}\r\n                                  type=\"file\"\r\n                                />\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <div\r\n                                  style={{\r\n                                    fontSize: 18,\r\n                                    fontWeight: \"bold\",\r\n                                    paddingBottom: \"10px\",\r\n                                    textDecorationLine: \"underline\",\r\n                                  }}\r\n                                >\r\n                                  Description of Test Results:\r\n                                </div>\r\n                                <Editor\r\n                                  defaultEditorState={defaultEditorState}\r\n                                  editorState={editorState}\r\n                                  onEditorStateChange={this.onTestResultChange}\r\n                                  toolbar={{\r\n                                    options: [\"inline\", \"list\", \"history\"],\r\n                                  }}\r\n                                />\r\n                              </Col>\r\n                            </Row>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </SizeMe>\r\n                  </ModalBody>\r\n                  <ModalFooter>\r\n                    <Button\r\n                      className={`btn-shadow btn-multiple-state ${\r\n                        loading ? \"show-spinner\" : \"\"\r\n                      }`}\r\n                      color=\"secondary\"\r\n                      onClick={\r\n                        !loading\r\n                          ? () => {\r\n                              toggleReviseReportModal({});\r\n                            }\r\n                          : null\r\n                      }\r\n                      type=\"button\"\r\n                      variant=\"contained\"\r\n                    >\r\n                      <LoadingSpinner />\r\n                      <span className=\"label\">Cancel</span>\r\n                    </Button>\r\n                    <Button\r\n                      className={`btn-shadow btn-multiple-state ${\r\n                        loading ? \"show-spinner\" : \"\"\r\n                      }`}\r\n                      color=\"primary\"\r\n                      type={!loading ? \"submit\" : \"button\"}\r\n                      variant=\"contained\"\r\n                    >\r\n                      <LoadingSpinner />\r\n                      <span className=\"label\">Submit</span>\r\n                    </Button>\r\n                  </ModalFooter>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </React.Fragment>\r\n        ) : null}\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ auth, qaLaboratoryTest }) => {\r\n  const { token } = auth;\r\n  const { loading, showReviseReportModal, selectedLaboratoryTest } =\r\n    qaLaboratoryTest;\r\n\r\n  return {\r\n    token,\r\n    loading,\r\n    showReviseReportModal,\r\n    selectedLaboratoryTest,\r\n  };\r\n};\r\n\r\nconst mapActionsToProps = {\r\n  toggleReviseReportModal,\r\n  downloadLaboratoryTestAttachment,\r\n  reviseLaboratoryTestReport,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionsToProps\r\n)(ReviseLaboratoryTestReportModal);\r\n","import { Button, Input, TextField } from \"@material-ui/core\";\r\nimport {\r\n  Col,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport { Document, Page, pdfjs } from \"react-pdf\";\r\nimport { EditorState, convertToRaw } from \"draft-js\";\r\nimport { Form, Formik } from \"formik\";\r\nimport React, { PureComponent } from \"react\";\r\nimport {\r\n  submitLaboratoryTestReport,\r\n  toggleSubmitReportModal,\r\n} from \"../../redux/actions\";\r\nimport { Editor } from \"react-draft-wysiwyg\";\r\nimport { LoadingSpinner } from \"../../components/Miscellaneous\";\r\nimport { SizeMe } from \"react-sizeme\";\r\nimport { backEndUrl } from \"../../constants/defaultValues\";\r\nimport { connect } from \"react-redux\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { laboratoryTestReportFormValidationSchema } from \"../../constants/validationSchemas\";\r\nimport moment from \"moment\";\r\nimport { stateToHTML } from \"draft-js-export-html\";\r\npdfjs.GlobalWorkerOptions.workerSrc = `${backEndUrl}/assets/js/pdf.worker.min.js`;\r\n\r\nclass SubmitLaboratoryTestReportModal extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      reportDate: \"\",\r\n      reportNumber: \"\",\r\n      selectedFile: null,\r\n      editorState: EditorState.createEmpty(),\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, _prevState) {\r\n    const { showSubmitReportModal, selectedLaboratoryTest } = this.props;\r\n\r\n    if (\r\n      showSubmitReportModal !== prevProps.showSubmitReportModal &&\r\n      showSubmitReportModal\r\n    ) {\r\n      const { tempReportNumber } = selectedLaboratoryTest;\r\n      const date = moment().format(\"YYYY-MM-DD\");\r\n\r\n      this.setState({\r\n        reportDate: date,\r\n        reportNumber: tempReportNumber,\r\n        selectedFile: null,\r\n        editorState: EditorState.createEmpty(),\r\n      });\r\n    }\r\n  }\r\n\r\n  onFileChange = (event) => {\r\n    this.setState({\r\n      selectedFile: event.target.files[0],\r\n    });\r\n  };\r\n\r\n  onTestResultChange = (editorState) => {\r\n    this.setState({ editorState });\r\n  };\r\n\r\n  triggerSubmitLaboratoryTestReport = (values) => {\r\n    const {\r\n      token,\r\n      loading,\r\n      selectedLaboratoryTest,\r\n      submitLaboratoryTestReport,\r\n    } = this.props;\r\n    const { selectedFile, editorState } = this.state;\r\n    const userId = jwt_decode(token).id;\r\n    const { id } = selectedLaboratoryTest;\r\n    const { reportDate, reportNumber } = values;\r\n    let laboratoryTest = new FormData();\r\n\r\n    if (!loading) {\r\n      laboratoryTest.append(\"reporter\", userId);\r\n      laboratoryTest.append(\"reportDate\", reportDate);\r\n      laboratoryTest.append(\"reportNumber\", reportNumber?.trim());\r\n      laboratoryTest.append(\r\n        \"testResult\",\r\n        JSON.stringify(convertToRaw(editorState?.getCurrentContent()))\r\n      );\r\n      laboratoryTest.append(\r\n        \"testResultHtml\",\r\n        stateToHTML(editorState?.getCurrentContent())\r\n      );\r\n      if (selectedFile) {\r\n        laboratoryTest.append(\"file\", selectedFile);\r\n      }\r\n      submitLaboratoryTestReport(id, laboratoryTest);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      loading,\r\n      showSubmitReportModal,\r\n      selectedLaboratoryTest,\r\n      toggleSubmitReportModal,\r\n    } = this.props;\r\n    const { reportDate, reportNumber, editorState } = this.state;\r\n    const { requestIds } = selectedLaboratoryTest ?? {};\r\n    let laboratoryTestReportFormInitialValues = {};\r\n\r\n    if (showSubmitReportModal) {\r\n      laboratoryTestReportFormInitialValues = {\r\n        reportDate,\r\n        reportNumber,\r\n      };\r\n    }\r\n    return (\r\n      <Modal\r\n        backdrop={true}\r\n        className={`modal-form-l`}\r\n        isOpen={showSubmitReportModal}\r\n        toggle={toggleSubmitReportModal}\r\n      >\r\n        {showSubmitReportModal && selectedLaboratoryTest ? (\r\n          <React.Fragment>\r\n            <Formik\r\n              initialValues={laboratoryTestReportFormInitialValues}\r\n              onSubmit={this.triggerSubmitLaboratoryTestReport}\r\n              validationSchema={laboratoryTestReportFormValidationSchema}\r\n            >\r\n              {({ values, touched, errors, handleChange }) => (\r\n                <Form autoComplete=\"off\">\r\n                  <ModalHeader>Submit Laboratory Test Report</ModalHeader>\r\n                  <ModalBody>\r\n                    <SizeMe>\r\n                      {({ size }) => (\r\n                        <div>\r\n                          <Document\r\n                            file={`${backEndUrl}/temp/QA Laboratory Test Request ${\r\n                              requestIds[requestIds?.length - 1]\r\n                            }.pdf`}\r\n                          >\r\n                            <Page\r\n                              pageNumber={1}\r\n                              width={size.width ? size.width : 1}\r\n                            />\r\n                          </Document>\r\n                          <div\r\n                            style={{\r\n                              border: \"2.65px solid\",\r\n                              borderColor: \"#000000\",\r\n                              marginLeft: \"65px\",\r\n                              marginRight: \"50px\",\r\n                              padding: \"10px\",\r\n                            }}\r\n                          >\r\n                            <Row\r\n                              style={{\r\n                                paddingBottom: \"20px\",\r\n                              }}\r\n                            >\r\n                              <Col>\r\n                                <div\r\n                                  style={{\r\n                                    fontSize: 18,\r\n                                    fontWeight: \"bold\",\r\n                                    paddingBottom: \"10px\",\r\n                                    paddingTop: \"10px\",\r\n                                    textDecorationLine: \"underline\",\r\n                                  }}\r\n                                >\r\n                                  Report Date:\r\n                                </div>\r\n                                <TextField\r\n                                  InputLabelProps={{ shrink: false }}\r\n                                  fullWidth\r\n                                  helperText={\r\n                                    errors.reportDate &&\r\n                                    touched.reportDate &&\r\n                                    errors.reportDate\r\n                                  }\r\n                                  name=\"reportDate\"\r\n                                  onChange={handleChange}\r\n                                  type=\"date\"\r\n                                  value={values.reportDate}\r\n                                  error={\r\n                                    errors.reportDate && touched.reportDate\r\n                                  }\r\n                                />\r\n                              </Col>\r\n                              <Col>\r\n                                <Row>\r\n                                  <Col>\r\n                                    <div\r\n                                      style={{\r\n                                        fontSize: 18,\r\n                                        fontWeight: \"bold\",\r\n                                        paddingBottom: \"10px\",\r\n                                        paddingTop: \"10px\",\r\n                                        textDecorationLine: \"underline\",\r\n                                      }}\r\n                                    >\r\n                                      Report Number:\r\n                                    </div>\r\n                                    <TextField\r\n                                      disabled\r\n                                      error={\r\n                                        errors.reportNumber &&\r\n                                        touched.reportNumber\r\n                                      }\r\n                                      fullWidth\r\n                                      helperText={\r\n                                        errors.reportNumber &&\r\n                                        touched.reportNumber &&\r\n                                        errors.reportNumber\r\n                                      }\r\n                                      InputLabelProps={{ shrink: false }}\r\n                                      name=\"reportNumber\"\r\n                                      onChange={handleChange}\r\n                                      type=\"text\"\r\n                                      value={values.reportNumber}\r\n                                    />\r\n                                  </Col>\r\n                                </Row>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row\r\n                              style={{\r\n                                paddingBottom: \"20px\",\r\n                              }}\r\n                            >\r\n                              <Col>\r\n                                <div\r\n                                  style={{\r\n                                    fontSize: 18,\r\n                                    fontWeight: \"bold\",\r\n                                    paddingRight: \"10px\",\r\n                                    paddingTop: \"10px\",\r\n                                    textDecorationLine: \"underline\",\r\n                                  }}\r\n                                >\r\n                                  Attachment File | Uploaded :\r\n                                </div>\r\n                                <Input\r\n                                  disableUnderline\r\n                                  label=\"Attachment File\"\r\n                                  onChange={this.onFileChange}\r\n                                  style={{\r\n                                    paddingBottom: \"20px\",\r\n                                  }}\r\n                                  type=\"file\"\r\n                                />\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <div\r\n                                  style={{\r\n                                    fontSize: 18,\r\n                                    fontWeight: \"bold\",\r\n                                    paddingBottom: \"10px\",\r\n                                    textDecorationLine: \"underline\",\r\n                                  }}\r\n                                >\r\n                                  Description of Test Results:\r\n                                </div>\r\n                                <Editor\r\n                                  editorState={editorState}\r\n                                  onEditorStateChange={this.onTestResultChange}\r\n                                  toolbar={{\r\n                                    options: [\"inline\", \"list\", \"history\"],\r\n                                  }}\r\n                                />\r\n                              </Col>\r\n                            </Row>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </SizeMe>\r\n                  </ModalBody>\r\n                  <ModalFooter>\r\n                    <Button\r\n                      className={`btn-shadow btn-multiple-state ${\r\n                        loading ? \"show-spinner\" : \"\"\r\n                      }`}\r\n                      color=\"secondary\"\r\n                      onClick={\r\n                        !loading\r\n                          ? () => {\r\n                              toggleSubmitReportModal({});\r\n                            }\r\n                          : null\r\n                      }\r\n                      type=\"button\"\r\n                      variant=\"contained\"\r\n                    >\r\n                      <LoadingSpinner />\r\n                      <span className=\"label\">Cancel</span>\r\n                    </Button>\r\n                    <Button\r\n                      className={`btn-shadow btn-multiple-state ${\r\n                        loading ? \"show-spinner\" : \"\"\r\n                      }`}\r\n                      color=\"primary\"\r\n                      type={!loading ? \"submit\" : \"button\"}\r\n                      variant=\"contained\"\r\n                    >\r\n                      <LoadingSpinner />\r\n                      <span className=\"label\">Submit</span>\r\n                    </Button>\r\n                  </ModalFooter>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </React.Fragment>\r\n        ) : null}\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ auth, qaLaboratoryTest }) => {\r\n  const { token } = auth;\r\n  const { loading, showSubmitReportModal, selectedLaboratoryTest } =\r\n    qaLaboratoryTest;\r\n\r\n  return {\r\n    token,\r\n    loading,\r\n    showSubmitReportModal,\r\n    selectedLaboratoryTest,\r\n  };\r\n};\r\n\r\nconst mapActionsToProps = {\r\n  submitLaboratoryTestReport,\r\n  toggleSubmitReportModal,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionsToProps\r\n)(SubmitLaboratoryTestReportModal);\r\n","import { Button, Checkbox, Input, TextField } from \"@material-ui/core\";\r\nimport {\r\n  CheckBox as CheckBoxIcon,\r\n  CheckBoxOutlineBlank as CheckBoxOutlineBlankIcon,\r\n} from \"@material-ui/icons\";\r\nimport {\r\n  Col,\r\n  Container,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport { Form, Formik } from \"formik\";\r\nimport React, { PureComponent } from \"react\";\r\nimport {\r\n  conditionsBondingAndComposite,\r\n  conditionsDefault,\r\n  conditionsKimia,\r\n  conditionsMetallurgy,\r\n  conditionsProcessControl,\r\n  conditionsSolutionControl,\r\n  laboratories,\r\n  manufacturersBondingAndComposite,\r\n  manufacturersDefault,\r\n  manufacturersKimia,\r\n  manufacturersMetallurgy,\r\n  manufacturersProcessControl,\r\n  manufacturersSolutionControl,\r\n  materialsBondingAndComposite,\r\n  materialsDefault,\r\n  materialsKimia,\r\n  materialsMetallurgy,\r\n  materialsProcessControl,\r\n  materialsSolutionControl,\r\n  organizationUnitsBondingAndComposite,\r\n  organizationUnitsDefault,\r\n  organizationUnitsKimia,\r\n  organizationUnitsMetallurgy,\r\n  organizationUnitsProcessControl,\r\n  organizationUnitsSolutionControl,\r\n  programsBondingAndComposite,\r\n  programsDefault,\r\n  programsKimia,\r\n  programsMetallurgy,\r\n  programsProcessControl,\r\n  programsSolutionControl,\r\n  reasonOfTestBondingAndComposite,\r\n  reasonOfTestsDefault,\r\n  reasonOfTestsKimia,\r\n  reasonOfTestsMetallurgy,\r\n  reasonOfTestsProcessControl,\r\n  reasonOfTestsSolutionControl,\r\n  requestNumbersBondingAndCompositeACS,\r\n  requestNumbersBondingAndCompositeMDME,\r\n  requestNumbersBondingAndCompositeQC1300,\r\n  requestNumbersBondingAndCompositeQC1500,\r\n  requestNumbersBondingAndCompositeQC3100,\r\n  requestNumbersBondingAndCompositeQC3300,\r\n  requestNumbersBondingAndCompositeQC3500,\r\n  requestNumbersBondingAndCompositeQC4000,\r\n  requestNumbersBondingAndCompositeQC4100,\r\n  requestNumbersBondingAndCompositeQC4400,\r\n  requestNumbersBondingAndCompositeQC5300,\r\n  requestNumbersBondingAndCompositeQC5500,\r\n  requestNumbersBondingAndCompositeTraining,\r\n  requestNumbersDefault,\r\n  requestNumbersMetallurgyMDME,\r\n  requestNumbersMetallurgyQA3100,\r\n  requestNumbersMetallurgyQA3400,\r\n  requestNumbersMetallurgyQC1400,\r\n  requestNumbersMetallurgyQC3500,\r\n  requestNumbersProcessControlDM6000,\r\n  requestNumbersProcessControlDM6100,\r\n  requestNumbersProcessControlDM6200,\r\n  requestNumbersProcessControlMPD,\r\n  requestNumbersProcessControlQA3100,\r\n  requestNumbersProcessControlQC3400,\r\n  requestNumbersProcessControlQC3500,\r\n  requestNumbersProcessControlQC5300,\r\n  requestNumbersSolutionControlDM6000,\r\n  requestNumbersSolutionControlDM6100,\r\n  requestNumbersSolutionControlDM6200,\r\n  requestNumbersSolutionControlMPD,\r\n  requestNumbersSolutionControlQA3100,\r\n  requestNumbersSolutionControlQC3400,\r\n  requestNumbersSolutionControlQC3500,\r\n  requestNumbersSolutionControlQC5300,\r\n  specificationsBondingAndComposite,\r\n  specificationsDefault,\r\n  specificationsKimia,\r\n  specificationsMetallurgy,\r\n  specificationsProcessControl,\r\n  specificationsSolutionControl,\r\n  typeOfTests,\r\n  typesBondingAndComposite,\r\n  typesDefault,\r\n  typesKimia,\r\n  typesMetallurgy,\r\n  typesProcessControl,\r\n  typesSolutionControl,\r\n  units,\r\n} from \"../../constants/laboratoryTestValues\";\r\nimport {\r\n  submitLaboratoryTestRequest,\r\n  toggleSubmitRequestModal,\r\n} from \"../../redux/actions\";\r\n\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport { LoadingSpinner } from \"../../components/Miscellaneous\";\r\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport { connect } from \"react-redux\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { laboratoryTestRequestFormValidationSchema } from \"../../constants/validationSchemas\";\r\nimport match from \"autosuggest-highlight/match\";\r\nimport parse from \"autosuggest-highlight/parse\";\r\n\r\nclass SubmitLaboratoryTestRequestModal extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      organizationUnits: [],\r\n      requestNumbers: [],\r\n      materials: [],\r\n      types: [],\r\n      specifications: [],\r\n      programs: [],\r\n      reasonOfTests: [],\r\n      manufacturers: [],\r\n      conditions: [],\r\n      testAccordingToSpecifications: [],\r\n      laboratory: \"\",\r\n      organizationUnit: \"\",\r\n      requestNumber: \"\",\r\n      material: \"\",\r\n      type: \"\",\r\n      specification: \"\",\r\n      program: \"\",\r\n      budgetNumber: \"\",\r\n      reasonOfTest: \"\",\r\n      manufacturer: \"\",\r\n      manufacturingDate: \"\",\r\n      expiryDate: \"\",\r\n      batchNumber: \"\",\r\n      sample: \"\",\r\n      condition: \"\",\r\n      unit: \"\",\r\n      quantity: \"\",\r\n      typeOfTest: \"\",\r\n      testAccordingToSpecification: \"\",\r\n      selectedFile: null,\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, _prevState) {\r\n    const { showSubmitRequestModal } = this.props;\r\n\r\n    if (\r\n      showSubmitRequestModal !== prevProps.showSubmitRequestModal &&\r\n      showSubmitRequestModal\r\n    ) {\r\n      this.setState({\r\n        selectedFile: null,\r\n      });\r\n    }\r\n  }\r\n\r\n  onFileChange = (event) => {\r\n    this.setState({\r\n      selectedFile: event.target.files[0],\r\n    });\r\n  };\r\n\r\n  triggerSubmitLaboratoryTestRequest = (values) => {\r\n    const { token, loading, submitLaboratoryTestRequest } = this.props;\r\n    const { selectedFile } = this.state;\r\n    const { id } = jwt_decode(token);\r\n    const {\r\n      laboratory,\r\n      organizationUnit,\r\n      requestNumber,\r\n      budgetNumber,\r\n      reasonOfTest,\r\n      material,\r\n      type,\r\n      specification,\r\n      manufacturer,\r\n      manufacturingDate,\r\n      expiryDate,\r\n      program,\r\n      batchNumber,\r\n      sample,\r\n      condition,\r\n      unit,\r\n      quantity,\r\n      typeOfTest,\r\n      testAccordingToSpecification,\r\n    } = values;\r\n    let laboratoryTest = new FormData();\r\n\r\n    if (!loading) {\r\n      laboratoryTest.append(\"requester\", id);\r\n      laboratoryTest.append(\"laboratory\", laboratory?.trim());\r\n      laboratoryTest.append(\"organizationUnit\", organizationUnit?.trim());\r\n      laboratoryTest.append(\"requestNumber\", requestNumber?.trim());\r\n      laboratoryTest.append(\"budgetNumber\", budgetNumber?.trim());\r\n      laboratoryTest.append(\"reasonOfTest\", reasonOfTest?.trim());\r\n      laboratoryTest.append(\"material\", material);\r\n      laboratoryTest.append(\"type\", type);\r\n      laboratoryTest.append(\"specification\", specification);\r\n      laboratoryTest.append(\"manufacturer\", manufacturer?.trim());\r\n      laboratoryTest.append(\"manufacturingDate\", manufacturingDate?.trim());\r\n      laboratoryTest.append(\"expiryDate\", expiryDate?.trim());\r\n      laboratoryTest.append(\"program\", program?.trim());\r\n      laboratoryTest.append(\"batchNumber\", batchNumber?.trim());\r\n      laboratoryTest.append(\"sample\", sample?.trim());\r\n      laboratoryTest.append(\"condition\", condition?.trim());\r\n      laboratoryTest.append(\"unit\", unit?.trim());\r\n      laboratoryTest.append(\"quantity\", quantity?.trim());\r\n      laboratoryTest.append(\"typeOfTest\", typeOfTest);\r\n      laboratoryTest.append(\r\n        \"testAccordingToSpecification\",\r\n        testAccordingToSpecification?.trim()\r\n      );\r\n      if (selectedFile) {\r\n        laboratoryTest.append(\"file\", selectedFile);\r\n      }\r\n      submitLaboratoryTestRequest(laboratoryTest);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { loading, showSubmitRequestModal, toggleSubmitRequestModal } =\r\n      this.props;\r\n    const {\r\n      organizationUnits,\r\n      requestNumbers,\r\n      materials,\r\n      types,\r\n      specifications,\r\n      programs,\r\n      reasonOfTests,\r\n      manufacturers,\r\n      conditions,\r\n      testAccordingToSpecifications,\r\n      laboratory,\r\n      organizationUnit,\r\n      requestNumber,\r\n      budgetNumber,\r\n      reasonOfTest,\r\n      material,\r\n      type,\r\n      specification,\r\n      manufacturer,\r\n      manufacturingDate,\r\n      expiryDate,\r\n      program,\r\n      batchNumber,\r\n      sample,\r\n      condition,\r\n      unit,\r\n      quantity,\r\n      typeOfTest,\r\n      testAccordingToSpecification,\r\n    } = this.state;\r\n    let laboratoryTestRequestFormInitialValues = {};\r\n\r\n    if (showSubmitRequestModal) {\r\n      laboratoryTestRequestFormInitialValues = {\r\n        laboratory,\r\n        organizationUnit,\r\n        requestNumber,\r\n        budgetNumber,\r\n        reasonOfTest,\r\n        material,\r\n        type,\r\n        specification,\r\n        manufacturer,\r\n        manufacturingDate,\r\n        expiryDate,\r\n        program,\r\n        batchNumber,\r\n        sample,\r\n        condition,\r\n        unit,\r\n        quantity,\r\n        typeOfTest,\r\n        testAccordingToSpecification,\r\n      };\r\n    }\r\n    return (\r\n      <Modal\r\n        backdrop={true}\r\n        className={`modal-form-xl`}\r\n        isOpen={showSubmitRequestModal}\r\n        toggle={toggleSubmitRequestModal}\r\n      >\r\n        {showSubmitRequestModal ? (\r\n          <React.Fragment>\r\n            <Formik\r\n              initialValues={laboratoryTestRequestFormInitialValues}\r\n              onSubmit={this.triggerSubmitLaboratoryTestRequest}\r\n              validationSchema={laboratoryTestRequestFormValidationSchema}\r\n            >\r\n              {({ setFieldValue, values, touched, errors, handleChange }) => (\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Form autoComplete=\"off\">\r\n                    <ModalHeader>\r\n                      Create a New Laboratory Test Request\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                      <Container>\r\n                        <Row className=\"mb-4 pb-4 mt-4 pt-4\">\r\n                          <Col>\r\n                            <Autocomplete\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              onChange={(_event, value) => {\r\n                                setFieldValue(\"laboratory\", value);\r\n                                switch (value) {\r\n                                  case \"QA 3100 - Solution Control\":\r\n                                    this.setState(() => ({\r\n                                      organizationUnits:\r\n                                        organizationUnitsSolutionControl,\r\n                                      requestNumbers: requestNumbersDefault,\r\n                                      programs: programsSolutionControl,\r\n                                      materials: materialsSolutionControl,\r\n                                      types: typesSolutionControl,\r\n                                      specifications:\r\n                                        specificationsSolutionControl,\r\n                                      manufacturers:\r\n                                        manufacturersSolutionControl,\r\n                                      reasonOfTests:\r\n                                        reasonOfTestsSolutionControl,\r\n                                      conditions: conditionsSolutionControl,\r\n                                    }));\r\n                                    break;\r\n                                  case \"QA 3100 - Process Control\":\r\n                                    this.setState(() => ({\r\n                                      organizationUnits:\r\n                                        organizationUnitsProcessControl,\r\n                                      requestNumbers: requestNumbersDefault,\r\n                                      programs: programsProcessControl,\r\n                                      materials: materialsProcessControl,\r\n                                      types: typesProcessControl,\r\n                                      specifications:\r\n                                        specificationsProcessControl,\r\n                                      manufacturers:\r\n                                        manufacturersProcessControl,\r\n                                      reasonOfTests:\r\n                                        reasonOfTestsProcessControl,\r\n                                      conditions: conditionsProcessControl,\r\n                                    }));\r\n                                    break;\r\n                                  case \"QA 3100 - Kimia\":\r\n                                    this.setState(() => ({\r\n                                      organizationUnits: organizationUnitsKimia,\r\n                                      requestNumbers: requestNumbersDefault,\r\n                                      programs: programsKimia,\r\n                                      materials: materialsKimia,\r\n                                      types: typesKimia,\r\n                                      specifications: specificationsKimia,\r\n                                      manufacturers: manufacturersKimia,\r\n                                      reasonOfTests: reasonOfTestsKimia,\r\n                                      conditions: conditionsKimia,\r\n                                    }));\r\n                                    break;\r\n                                  case \"QA 3200 - Bonding & Composite\":\r\n                                    this.setState(() => ({\r\n                                      organizationUnits:\r\n                                        organizationUnitsBondingAndComposite,\r\n                                      requestNumbers: requestNumbersDefault,\r\n                                      programs: programsBondingAndComposite,\r\n                                      materials: materialsBondingAndComposite,\r\n                                      types: typesBondingAndComposite,\r\n                                      specifications:\r\n                                        specificationsBondingAndComposite,\r\n                                      manufacturers:\r\n                                        manufacturersBondingAndComposite,\r\n                                      reasonOfTests:\r\n                                        reasonOfTestBondingAndComposite,\r\n                                      conditions: conditionsBondingAndComposite,\r\n                                    }));\r\n                                    break;\r\n                                  case \"QA 3200 - Metallurgy\":\r\n                                    this.setState(() => ({\r\n                                      organizationUnits:\r\n                                        organizationUnitsMetallurgy,\r\n                                      requestNumbers: requestNumbersDefault,\r\n                                      programs: programsMetallurgy,\r\n                                      materials: materialsMetallurgy,\r\n                                      types: typesMetallurgy,\r\n                                      specifications: specificationsMetallurgy,\r\n                                      manufacturers: manufacturersMetallurgy,\r\n                                      reasonOfTests: reasonOfTestsMetallurgy,\r\n                                      conditions: conditionsMetallurgy,\r\n                                    }));\r\n                                    break;\r\n                                  default:\r\n                                    this.setState(() => ({\r\n                                      organizationUnits:\r\n                                        organizationUnitsDefault,\r\n                                      requestNumbers: requestNumbersDefault,\r\n                                      programs: programsDefault,\r\n                                      materials: materialsDefault,\r\n                                      types: typesDefault,\r\n                                      specifications: specificationsDefault,\r\n                                      manufacturers: manufacturersDefault,\r\n                                      reasonOfTests: reasonOfTestsDefault,\r\n                                      conditions: conditionsDefault,\r\n                                    }));\r\n                                }\r\n                              }}\r\n                              openOnFocus\r\n                              options={laboratories}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  name=\"laboratory\"\r\n                                  label=\"Request for Laboratory\"\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  error={\r\n                                    errors.laboratory && touched.laboratory\r\n                                  }\r\n                                  helperText={\r\n                                    errors.laboratory &&\r\n                                    touched.laboratory &&\r\n                                    errors.laboratory\r\n                                  }\r\n                                  value={values.laboratory}\r\n                                />\r\n                              )}\r\n                              renderOption={(option, { inputValue }) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <div>\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </div>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <Autocomplete\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              onInputChange={(_event, value) => {\r\n                                setFieldValue(\"organizationUnit\", value);\r\n                                switch (values.laboratory) {\r\n                                  case \"QA 3100 - Solution Control\":\r\n                                    switch (value) {\r\n                                      case \"DM 6000\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersSolutionControlDM6000,\r\n                                        }));\r\n                                        break;\r\n                                      case \"DM 6100\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersSolutionControlDM6100,\r\n                                        }));\r\n                                        break;\r\n                                      case \"DM 6200\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersSolutionControlDM6200,\r\n                                        }));\r\n                                        break;\r\n                                      case \"MPD\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersSolutionControlMPD,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QA 3100\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersSolutionControlQA3100,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 3400\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersSolutionControlQC3400,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 3500\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersSolutionControlQC3500,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 5300\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersSolutionControlQC5300,\r\n                                        }));\r\n                                        break;\r\n                                      default:\r\n                                        this.setState(() => ({\r\n                                          requestNumbers: requestNumbersDefault,\r\n                                        }));\r\n                                    }\r\n                                    break;\r\n                                  case \"QA 3100 - Process Control\":\r\n                                    switch (value) {\r\n                                      case \"DM 6000\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersProcessControlDM6000,\r\n                                        }));\r\n                                        break;\r\n                                      case \"DM 6100\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersProcessControlDM6100,\r\n                                        }));\r\n                                        break;\r\n                                      case \"DM 6200\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersProcessControlDM6200,\r\n                                        }));\r\n                                        break;\r\n                                      case \"MPD\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersProcessControlMPD,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QA 3100\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersProcessControlQA3100,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 3400\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersProcessControlQC3400,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 3500\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersProcessControlQC3500,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 5300\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersProcessControlQC5300,\r\n                                        }));\r\n                                        break;\r\n                                      default:\r\n                                        this.setState(() => ({\r\n                                          requestNumbers: requestNumbersDefault,\r\n                                        }));\r\n                                    }\r\n                                    break;\r\n                                  case \"QA 3200 - Bonding & Composite\":\r\n                                    switch (value) {\r\n                                      case \"QC 1300\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeQC1300,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 1500\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeQC1500,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 3100\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeQC3100,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 3300\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeQC3300,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 3500\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeQC3500,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 4000\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeQC4000,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 4100\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeQC4100,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 4400\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeQC4400,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 5300\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeQC5300,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 5500\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeQC5500,\r\n                                        }));\r\n                                        break;\r\n                                      case \"ACS\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeACS,\r\n                                        }));\r\n                                        break;\r\n                                      case \"MD - ME\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeMDME,\r\n                                        }));\r\n                                        break;\r\n                                      case \"Training\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersBondingAndCompositeTraining,\r\n                                        }));\r\n                                        break;\r\n                                      default:\r\n                                        this.setState(() => ({\r\n                                          requestNumbers: requestNumbersDefault,\r\n                                        }));\r\n                                    }\r\n                                    break;\r\n                                  case \"QA 3200 - Metallurgy\":\r\n                                    switch (value) {\r\n                                      case \"QA 3100\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersMetallurgyQA3100,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QA 3400\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersMetallurgyQA3400,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 1400\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersMetallurgyQC1400,\r\n                                        }));\r\n                                        break;\r\n                                      case \"QC 3500\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersMetallurgyQC3500,\r\n                                        }));\r\n                                        break;\r\n                                      case \"MD - ME\":\r\n                                        this.setState(() => ({\r\n                                          requestNumbers:\r\n                                            requestNumbersMetallurgyMDME,\r\n                                        }));\r\n                                        break;\r\n                                      default:\r\n                                        this.setState(() => ({\r\n                                          requestNumbers: requestNumbersDefault,\r\n                                        }));\r\n                                    }\r\n                                    break;\r\n                                  default:\r\n                                    this.setState(() => ({\r\n                                      requestNumbers: requestNumbersDefault,\r\n                                    }));\r\n                                }\r\n                              }}\r\n                              openOnFocus\r\n                              options={organizationUnits}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  name=\"organizationUnit\"\r\n                                  label=\"Organization Unit\"\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  value={values.organizationUnit}\r\n                                  error={\r\n                                    errors.organizationUnit &&\r\n                                    touched.organizationUnit\r\n                                  }\r\n                                  helperText={\r\n                                    errors.organizationUnit &&\r\n                                    touched.organizationUnit &&\r\n                                    errors.organizationUnit\r\n                                  }\r\n                                />\r\n                              )}\r\n                              renderOption={(option, { inputValue }) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <div>\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </div>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <Autocomplete\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              onInputChange={(_event, value) => {\r\n                                setFieldValue(\"requestNumber\", value);\r\n                              }}\r\n                              openOnFocus\r\n                              options={requestNumbers}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  error={\r\n                                    errors.requestNumber &&\r\n                                    touched.requestNumber\r\n                                  }\r\n                                  helperText={\r\n                                    errors.requestNumber &&\r\n                                    touched.requestNumber &&\r\n                                    errors.requestNumber\r\n                                  }\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  label=\"Request Number\"\r\n                                  name=\"requestNumber\"\r\n                                  value={values.requestNumber}\r\n                                />\r\n                              )}\r\n                              renderOption={(option, { inputValue }) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <div>\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </div>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className=\"mb-4 pb-4 mt-4 pt-4\">\r\n                          <Col>\r\n                            <Autocomplete\r\n                              disableCloseOnSelect\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              multiple\r\n                              onChange={(_event, value) => {\r\n                                setFieldValue(\"material\", value.join(\", \"));\r\n                              }}\r\n                              openOnFocus\r\n                              options={materials}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  error={errors.material && touched.material}\r\n                                  helperText={\r\n                                    errors.material &&\r\n                                    touched.material &&\r\n                                    errors.material\r\n                                  }\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  label=\"Material*\"\r\n                                  name=\"material\"\r\n                                  value={values.material}\r\n                                />\r\n                              )}\r\n                              renderOption={(\r\n                                option,\r\n                                { inputValue, selected }\r\n                              ) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <React.Fragment>\r\n                                    <Checkbox\r\n                                      checked={selected}\r\n                                      checkedIcon={\r\n                                        <CheckBoxIcon fontSize=\"small\" />\r\n                                      }\r\n                                      icon={\r\n                                        <CheckBoxOutlineBlankIcon fontSize=\"small\" />\r\n                                      }\r\n                                      style={{ marginRight: 8 }}\r\n                                    />\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </React.Fragment>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <Autocomplete\r\n                              disableCloseOnSelect\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              multiple\r\n                              onChange={(_event, value) => {\r\n                                setFieldValue(\"type\", value.join(\", \"));\r\n                              }}\r\n                              openOnFocus\r\n                              options={types}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  error={errors.type && touched.type}\r\n                                  helperText={\r\n                                    errors.type && touched.type && errors.type\r\n                                  }\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  label=\"Type / Code*\"\r\n                                  name=\"type\"\r\n                                  value={values.type}\r\n                                />\r\n                              )}\r\n                              renderOption={(\r\n                                option,\r\n                                { inputValue, selected }\r\n                              ) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <React.Fragment>\r\n                                    <Checkbox\r\n                                      checked={selected}\r\n                                      checkedIcon={\r\n                                        <CheckBoxIcon fontSize=\"small\" />\r\n                                      }\r\n                                      icon={\r\n                                        <CheckBoxOutlineBlankIcon fontSize=\"small\" />\r\n                                      }\r\n                                      style={{ marginRight: 8 }}\r\n                                    />\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </React.Fragment>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <Autocomplete\r\n                              disableCloseOnSelect\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              multiple\r\n                              onChange={(_event, value) => {\r\n                                setFieldValue(\r\n                                  \"specification\",\r\n                                  value.join(\", \")\r\n                                );\r\n                                this.setState(() => ({\r\n                                  testAccordingToSpecifications: [\r\n                                    value.join(\", \"),\r\n                                  ],\r\n                                }));\r\n                              }}\r\n                              openOnFocus\r\n                              options={specifications}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  error={\r\n                                    errors.specification &&\r\n                                    touched.specification\r\n                                  }\r\n                                  helperText={\r\n                                    errors.specification &&\r\n                                    touched.specification &&\r\n                                    errors.specification\r\n                                  }\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  label=\"Material Specification*\"\r\n                                  name=\"specification\"\r\n                                  value={values.specification}\r\n                                />\r\n                              )}\r\n                              renderOption={(\r\n                                option,\r\n                                { inputValue, selected }\r\n                              ) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <React.Fragment>\r\n                                    <Checkbox\r\n                                      checked={selected}\r\n                                      checkedIcon={\r\n                                        <CheckBoxIcon fontSize=\"small\" />\r\n                                      }\r\n                                      icon={\r\n                                        <CheckBoxOutlineBlankIcon fontSize=\"small\" />\r\n                                      }\r\n                                      style={{ marginRight: 8 }}\r\n                                    />\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </React.Fragment>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className=\"mb-4 pb-4 mt-4 pt-4\">\r\n                          <Col>\r\n                            <Autocomplete\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              onInputChange={(_event, value) => {\r\n                                setFieldValue(\"program\", value);\r\n                              }}\r\n                              openOnFocus\r\n                              options={programs}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  error={errors.program && touched.program}\r\n                                  helperText={\r\n                                    errors.program &&\r\n                                    touched.program &&\r\n                                    errors.program\r\n                                  }\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  label=\"Program\"\r\n                                  name=\"program\"\r\n                                  value={values.program}\r\n                                />\r\n                              )}\r\n                              renderOption={(option, { inputValue }) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <div>\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </div>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <TextField\r\n                              error={\r\n                                errors.budgetNumber && touched.budgetNumber\r\n                              }\r\n                              fullWidth\r\n                              helperText={\r\n                                errors.budgetNumber &&\r\n                                touched.budgetNumber &&\r\n                                errors.budgetNumber\r\n                              }\r\n                              InputLabelProps={{ shrink: true }}\r\n                              label=\"Budget No. / RV No. / JID No.\"\r\n                              name=\"budgetNumber\"\r\n                              onChange={handleChange}\r\n                              type=\"text\"\r\n                              value={values.budgetNumber}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <Autocomplete\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              onInputChange={(_event, value) => {\r\n                                setFieldValue(\"reasonOfTest\", value);\r\n                              }}\r\n                              openOnFocus\r\n                              options={reasonOfTests}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  error={\r\n                                    errors.reasonOfTest && touched.reasonOfTest\r\n                                  }\r\n                                  helperText={\r\n                                    errors.reasonOfTest &&\r\n                                    touched.reasonOfTest &&\r\n                                    errors.reasonOfTest\r\n                                  }\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  label=\"Reason Of Test\"\r\n                                  name=\"reasonOfTest\"\r\n                                  value={values.reasonOfTest}\r\n                                />\r\n                              )}\r\n                              renderOption={(option, { inputValue }) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <div>\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </div>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className=\"mb-4 pb-4 mt-4 pt-4\">\r\n                          <Col>\r\n                            <Autocomplete\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              onInputChange={(_event, value) => {\r\n                                setFieldValue(\"manufacturer\", value);\r\n                              }}\r\n                              openOnFocus\r\n                              options={manufacturers}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  name=\"manufacturer\"\r\n                                  label=\"Manufactured\"\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  value={values.manufacturer}\r\n                                  error={\r\n                                    errors.manufacturer && touched.manufacturer\r\n                                  }\r\n                                  helperText={\r\n                                    errors.manufacturer &&\r\n                                    touched.manufacturer &&\r\n                                    errors.manufacturer\r\n                                  }\r\n                                />\r\n                              )}\r\n                              renderOption={(option, { inputValue }) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <div>\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </div>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <TextField\r\n                              error={\r\n                                errors.manufacturingDate &&\r\n                                touched.manufacturingDate\r\n                              }\r\n                              fullWidth\r\n                              helperText={\r\n                                errors.manufacturingDate &&\r\n                                touched.manufacturingDate &&\r\n                                errors.manufacturingDate\r\n                              }\r\n                              InputLabelProps={{ shrink: true }}\r\n                              label=\"Manufacturing Date\"\r\n                              name=\"manufacturingDate\"\r\n                              onChange={handleChange}\r\n                              type=\"text\"\r\n                              value={values.manufacturingDate}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <TextField\r\n                              error={errors.expiryDate && touched.expiryDate}\r\n                              fullWidth\r\n                              helperText={\r\n                                errors.expiryDate &&\r\n                                touched.expiryDate &&\r\n                                errors.expiryDate\r\n                              }\r\n                              InputLabelProps={{ shrink: true }}\r\n                              label=\"Expire Date\"\r\n                              name=\"expiryDate\"\r\n                              onChange={handleChange}\r\n                              type=\"text\"\r\n                              value={values.expiryDate}\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className=\"mb-4 pb-4 mt-4 pt-4\">\r\n                          <Col>\r\n                            <TextField\r\n                              error={errors.batchNumber && touched.batchNumber}\r\n                              fullWidth\r\n                              helperText={\r\n                                errors.batchNumber &&\r\n                                touched.batchNumber &&\r\n                                errors.batchNumber\r\n                              }\r\n                              InputLabelProps={{ shrink: true }}\r\n                              label=\"Batch / Roll Number\"\r\n                              name=\"batchNumber\"\r\n                              onChange={handleChange}\r\n                              type=\"text\"\r\n                              value={values.batchNumber}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <TextField\r\n                              error={errors.sample && touched.sample}\r\n                              fullWidth\r\n                              helperText={\r\n                                errors.sample && touched.sample && errors.sample\r\n                              }\r\n                              InputLabelProps={{ shrink: true }}\r\n                              label=\"Quantity of Sample\"\r\n                              name=\"sample\"\r\n                              onChange={handleChange}\r\n                              type=\"text\"\r\n                              value={values.sample}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <Autocomplete\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              onInputChange={(_event, value) => {\r\n                                setFieldValue(\"condition\", value);\r\n                              }}\r\n                              openOnFocus\r\n                              options={conditions}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  error={errors.condition && touched.condition}\r\n                                  helperText={\r\n                                    errors.condition &&\r\n                                    touched.condition &&\r\n                                    errors.condition\r\n                                  }\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  label=\"Condition\"\r\n                                  name=\"condition\"\r\n                                  value={values.condition}\r\n                                />\r\n                              )}\r\n                              renderOption={(option, { inputValue }) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <div>\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </div>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <Autocomplete\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              onInputChange={(_event, value) => {\r\n                                setFieldValue(\"unit\", value);\r\n                              }}\r\n                              openOnFocus\r\n                              options={units}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  error={errors.unit && touched.unit}\r\n                                  helperText={\r\n                                    errors.unit && touched.unit && errors.unit\r\n                                  }\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  label=\"Unit\"\r\n                                  name=\"unit\"\r\n                                  value={values.unit}\r\n                                />\r\n                              )}\r\n                              renderOption={(option, { inputValue }) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <div>\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </div>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <TextField\r\n                              error={errors.quantity && touched.quantity}\r\n                              fullWidth\r\n                              helperText={\r\n                                errors.quantity &&\r\n                                touched.quantity &&\r\n                                errors.quantity\r\n                              }\r\n                              InputLabelProps={{ shrink: true }}\r\n                              label=\"Quantity of Material\"\r\n                              name=\"quantity\"\r\n                              onChange={handleChange}\r\n                              type=\"text\"\r\n                              value={values.quantity}\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className=\"mb-4 pb-4 mt-4 pt-4\">\r\n                          <Col>\r\n                            <Autocomplete\r\n                              disableCloseOnSelect\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              multiple\r\n                              onChange={(_event, value) => {\r\n                                setFieldValue(\"typeOfTest\", value.join(\", \"));\r\n                              }}\r\n                              openOnFocus\r\n                              options={typeOfTests}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  error={\r\n                                    errors.typeOfTest && touched.typeOfTest\r\n                                  }\r\n                                  helperText={\r\n                                    errors.typeOfTest &&\r\n                                    touched.typeOfTest &&\r\n                                    errors.typeOfTest\r\n                                  }\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  label=\"Type of Test*\"\r\n                                  name=\"typeOfTest\"\r\n                                  value={values.typeOfTest}\r\n                                />\r\n                              )}\r\n                              renderOption={(\r\n                                option,\r\n                                { inputValue, selected }\r\n                              ) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <React.Fragment>\r\n                                    <Checkbox\r\n                                      checked={selected}\r\n                                      checkedIcon={\r\n                                        <CheckBoxIcon fontSize=\"small\" />\r\n                                      }\r\n                                      icon={\r\n                                        <CheckBoxOutlineBlankIcon fontSize=\"small\" />\r\n                                      }\r\n                                      style={{ marginRight: 8 }}\r\n                                    />\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </React.Fragment>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className=\"mb-4 pb-4 mt-4 pt-4\">\r\n                          <Col>\r\n                            <Autocomplete\r\n                              freeSolo\r\n                              fullWidth\r\n                              getOptionLabel={(option) => option}\r\n                              onInputChange={(_event, value) => {\r\n                                setFieldValue(\r\n                                  \"testAccordingToSpecification\",\r\n                                  value\r\n                                );\r\n                              }}\r\n                              openOnFocus\r\n                              options={testAccordingToSpecifications}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  error={\r\n                                    errors.testAccordingToSpecification &&\r\n                                    touched.testAccordingToSpecification\r\n                                  }\r\n                                  helperText={\r\n                                    errors.testAccordingToSpecification &&\r\n                                    touched.testAccordingToSpecification &&\r\n                                    errors.testAccordingToSpecification\r\n                                  }\r\n                                  InputLabelProps={{ shrink: true }}\r\n                                  label=\"Test According to Specification\"\r\n                                  name=\"testAccordingToSpecification\"\r\n                                  value={values.testAccordingToSpecification}\r\n                                />\r\n                              )}\r\n                              renderOption={(option, { inputValue }) => {\r\n                                const matches = match(option, inputValue);\r\n                                const parts = parse(option, matches);\r\n                                return (\r\n                                  <div>\r\n                                    {parts.map((part, index) => (\r\n                                      <span\r\n                                        key={index}\r\n                                        style={{\r\n                                          fontWeight: part.highlight\r\n                                            ? 700\r\n                                            : 400,\r\n                                        }}\r\n                                      >\r\n                                        {part.text}\r\n                                      </span>\r\n                                    ))}\r\n                                  </div>\r\n                                );\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                          <Col>\r\n                            <div className=\"label\">\r\n                              Attachment File | Uploaded :\r\n                            </div>\r\n                            <Input\r\n                              disableUnderline\r\n                              label=\"Attachment File\"\r\n                              onChange={this.onFileChange}\r\n                              type=\"file\"\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                      </Container>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                      <Button\r\n                        className={`btn-shadow btn-multiple-state ${\r\n                          loading ? \"show-spinner\" : \"\"\r\n                        }`}\r\n                        color=\"secondary\"\r\n                        onClick={\r\n                          !loading\r\n                            ? () => {\r\n                                toggleSubmitRequestModal();\r\n                              }\r\n                            : null\r\n                        }\r\n                        type=\"button\"\r\n                        variant=\"contained\"\r\n                      >\r\n                        <LoadingSpinner />\r\n                        <span className=\"label\">Cancel</span>\r\n                      </Button>\r\n                      <Button\r\n                        className={`btn-shadow btn-multiple-state ${\r\n                          loading ? \"show-spinner\" : \"\"\r\n                        }`}\r\n                        color=\"primary\"\r\n                        type={loading ? \"button\" : \"submit\"}\r\n                        variant=\"contained\"\r\n                      >\r\n                        <LoadingSpinner />\r\n                        <span className=\"label\">Submit</span>\r\n                      </Button>\r\n                    </ModalFooter>\r\n                  </Form>\r\n                </MuiPickersUtilsProvider>\r\n              )}\r\n            </Formik>\r\n          </React.Fragment>\r\n        ) : null}\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ auth, qaLaboratoryTest }) => {\r\n  const { token } = auth;\r\n  const { loading, showSubmitRequestModal } = qaLaboratoryTest;\r\n\r\n  return {\r\n    token,\r\n    loading,\r\n    showSubmitRequestModal,\r\n  };\r\n};\r\n\r\nconst mapActionsToProps = {\r\n  toggleSubmitRequestModal,\r\n  submitLaboratoryTestRequest,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionsToProps\r\n)(SubmitLaboratoryTestRequestModal);\r\n","import React, { PureComponent, Fragment, Suspense } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { CloudDownloadOutlined as CloudDownloadOutlinedIcon } from \"@material-ui/icons\";\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Chip,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  ArchiveOutlined as ArchiveOutlinedIcon,\r\n  DeleteForever as DeleteForeverIcon,\r\n  DoneAllOutlined as DoneAllOutlinedIcon,\r\n  EditOutlined as EditOutlinedIcon,\r\n  InsertDriveFileOutlined as InsertDriveFileOutlinedIcon,\r\n  UpdateOutlined as UpdateOutlinedIcon,\r\n  CheckOutlined as CheckOutlinedIcon,\r\n  LocalShippingOutlined as LocalShippingOutlinedIcon,\r\n  DonutLargeOutlined as DonutLargeOutlinedIcon,\r\n  SupervisorAccountOutlined as SupervisorAccountOutlinedIcon,\r\n} from \"@material-ui/icons\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport {\r\n  changeSelectedLaboratoryTestYear,\r\n  getLaboratoryTests,\r\n  getUsers,\r\n  toggleApproveReportModal,\r\n  toggleApproveRequestModal,\r\n  toggleDeleteRequestModal,\r\n  toggleDownloadDocumentModal,\r\n  toggleEditReportModal,\r\n  toggleEditRequestModal,\r\n  toggleReceiveRequestModal,\r\n  toggleReportHistoryModal,\r\n  toggleReviseReportModal,\r\n  toggleSubmitReportModal,\r\n  toggleSubmitRequestModal,\r\n} from \"../../redux/actions\";\r\nimport Breadcrumb from \"../../containers/navs/Breadcrumb\";\r\nimport ApproveLaboratoryTestReportModal from \"../../containers/modals/ApproveLaboratoryTestReportModal\";\r\nimport ApproveLaboratoryTestRequestModal from \"../../containers/modals/ApproveLaboratoryTestRequestModal\";\r\nimport DeleteLaboratoryTestRequestModal from \"../../containers/modals/DeleteLaboratoryTestRequestModal\";\r\nimport DownloadLaboratoryTestDocumentModal from \"../../containers/modals/DownloadLaboratoryTestDocumentModal\";\r\nimport EditLaboratoryTestReportModal from \"../../containers/modals/EditLaboratoryTestReportModal\";\r\nimport EditLaboratoryTestRequestModal from \"../../containers/modals/EditLaboratoryTestRequestModal\";\r\nimport LaboratoryTestReportHistoryModal from \"../../containers/modals/LaboratoryTestReportHistoryModal\";\r\nimport ReceiveLaboratoryTestRequestModal from \"../../containers/modals/ReceiveLaboratoryTestRequestModal\";\r\nimport ReviseLaboratoryTestReportModal from \"../../containers/modals/ReviseLaboratoryTestReportModal\";\r\nimport SubmitLaboratoryTestReportModal from \"../../containers/modals/SubmitLaboratoryTestReportModal\";\r\nimport SubmitLaboratoryTestRequestModal from \"../../containers/modals/SubmitLaboratoryTestRequestModal\";\r\nimport { Separator } from \"../../components/Layouts\";\r\nimport { laboratoryTestTableOptions } from \"../../constants/tableOptions\";\r\nimport { appLaunchYear, backEndUrl } from \"../../constants/defaultValues\";\r\n\r\nclass QaLaboratoryTest extends PureComponent {\r\n  componentDidMount = () => {\r\n    const { selectedLaboratoryTestYear, getLaboratoryTests, getUsers } =\r\n      this.props;\r\n\r\n    this._isMounted = true;\r\n    getLaboratoryTests(selectedLaboratoryTestYear);\r\n    getUsers();\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  render() {\r\n    const { _isMounted } = this;\r\n    const {\r\n      match,\r\n      token,\r\n      loading,\r\n      selectedLaboratoryTestYear,\r\n      laboratoryTests,\r\n      changeSelectedLaboratoryTestYear,\r\n      toggleSubmitRequestModal,\r\n      toggleEditRequestModal,\r\n      toggleApproveRequestModal,\r\n      toggleDeleteRequestModal,\r\n      toggleReceiveRequestModal,\r\n      toggleSubmitReportModal,\r\n      toggleEditReportModal,\r\n      toggleApproveReportModal,\r\n      toggleReviseReportModal,\r\n      toggleDownloadDocumentModal,\r\n      toggleReportHistoryModal,\r\n    } = this.props;\r\n    const { organization, authorization } = jwt_decode(token);\r\n    const usersOrganization = organization?.substring(0, 3);\r\n    const {\r\n      superAdmin,\r\n      laboratoryTestAdmin,\r\n      laboratoryTestRequest,\r\n      laboratoryTestApproveRequest,\r\n      laboratoryTestReceiveRequest,\r\n      laboratoryTestReport,\r\n      laboratoryTestApproveReport,\r\n    } = authorization;\r\n    const yearPicker = [];\r\n    let laboratoryTestTableColumns = [\r\n      {\r\n        label: \"Actions\",\r\n        name: \"id\",\r\n        options: {\r\n          download: false,\r\n          empty: true,\r\n          filter: false,\r\n          print: false,\r\n          searchable: false,\r\n          sort: false,\r\n          customBodyRender: (value) => {\r\n            let rowData;\r\n\r\n            for (let i = 0; i < laboratoryTests.length; i++) {\r\n              if (laboratoryTests[i].id === value) {\r\n                rowData = laboratoryTests[i];\r\n              }\r\n            }\r\n\r\n            return (\r\n              <div>\r\n                <ButtonGroup size=\"small\" variant=\"contained\">\r\n                  {(superAdmin || laboratoryTestApproveRequest) &&\r\n                  rowData.requesterName &&\r\n                  !rowData.requestApproverName &&\r\n                  (superAdmin ||\r\n                    usersOrganization ===\r\n                      rowData.requesterOrganization?.substring(0, 3)) ? (\r\n                    <Button\r\n                      onClick={() => {\r\n                        toggleApproveRequestModal(rowData);\r\n                      }}\r\n                      style={{ backgroundColor: \"#ff9800\" }}\r\n                    >\r\n                      <DoneAllOutlinedIcon\r\n                        fontSize=\"small\"\r\n                        style={{ color: \"white\" }}\r\n                      />\r\n                    </Button>\r\n                  ) : null}\r\n\r\n                  {(superAdmin || laboratoryTestReceiveRequest) &&\r\n                  rowData.requestApproverName &&\r\n                  !rowData.requestReceiverName ? (\r\n                    <Button\r\n                      onClick={() => {\r\n                        toggleReceiveRequestModal(rowData);\r\n                      }}\r\n                      style={{ backgroundColor: \"#f57c00\" }}\r\n                    >\r\n                      <DoneAllOutlinedIcon\r\n                        fontSize=\"small\"\r\n                        style={{ color: \"white\" }}\r\n                      />\r\n                    </Button>\r\n                  ) : null}\r\n\r\n                  {(superAdmin || laboratoryTestReport) &&\r\n                  rowData.requestReceiverName &&\r\n                  !rowData.reporterName ? (\r\n                    <Button\r\n                      onClick={() => {\r\n                        toggleSubmitReportModal(rowData);\r\n                      }}\r\n                      style={{ backgroundColor: \"#2196f3\" }}\r\n                    >\r\n                      <DoneAllOutlinedIcon\r\n                        fontSize=\"small\"\r\n                        style={{ color: \"white\" }}\r\n                      />\r\n                    </Button>\r\n                  ) : null}\r\n\r\n                  {(superAdmin || laboratoryTestApproveReport) &&\r\n                  rowData.reporterName &&\r\n                  !rowData.reportApproverName ? (\r\n                    <Button\r\n                      onClick={() => {\r\n                        toggleApproveReportModal(rowData);\r\n                      }}\r\n                      style={{ backgroundColor: \"#4caf50\" }}\r\n                    >\r\n                      <DoneAllOutlinedIcon\r\n                        fontSize=\"small\"\r\n                        style={{ color: \"white\" }}\r\n                      />\r\n                    </Button>\r\n                  ) : null}\r\n\r\n                  {(superAdmin &&\r\n                    rowData.requesterName &&\r\n                    !rowData.requestApproverName) ||\r\n                  (laboratoryTestRequest &&\r\n                    rowData.requesterName &&\r\n                    !rowData.requestApproverName &&\r\n                    usersOrganization ===\r\n                      rowData.requesterOrganization?.substring(0, 3)) ? (\r\n                    <Button\r\n                      onClick={() => {\r\n                        toggleEditRequestModal(rowData);\r\n                      }}\r\n                      style={{ backgroundColor: \"#ff9800\" }}\r\n                    >\r\n                      <EditOutlinedIcon\r\n                        fontSize=\"small\"\r\n                        style={{ color: \"white\" }}\r\n                      />\r\n                    </Button>\r\n                  ) : null}\r\n\r\n                  {(superAdmin || laboratoryTestReport) &&\r\n                  rowData.reporterName &&\r\n                  !rowData.reportApproverName ? (\r\n                    <Button\r\n                      onClick={() => {\r\n                        toggleEditReportModal(rowData);\r\n                      }}\r\n                      style={{ backgroundColor: \"#4caf50\" }}\r\n                    >\r\n                      <EditOutlinedIcon\r\n                        fontSize=\"small\"\r\n                        style={{ color: \"white\" }}\r\n                      />\r\n                    </Button>\r\n                  ) : null}\r\n\r\n                  {(superAdmin || laboratoryTestAdmin) &&\r\n                  rowData.reportApproverName ? (\r\n                    <Button\r\n                      onClick={() => {\r\n                        toggleEditRequestModal(rowData);\r\n                      }}\r\n                      style={{ backgroundColor: \"#388e3c\" }}\r\n                    >\r\n                      <EditOutlinedIcon\r\n                        fontSize=\"small\"\r\n                        style={{ color: \"white\" }}\r\n                      />\r\n                    </Button>\r\n                  ) : null}\r\n\r\n                  {(superAdmin || laboratoryTestReport) &&\r\n                  rowData.reportApproverName ? (\r\n                    <Button\r\n                      onClick={() => {\r\n                        toggleReviseReportModal(rowData);\r\n                      }}\r\n                      style={{ backgroundColor: \"#388e3c\" }}\r\n                    >\r\n                      <UpdateOutlinedIcon\r\n                        fontSize=\"small\"\r\n                        style={{ color: \"white\" }}\r\n                      />\r\n                    </Button>\r\n                  ) : null}\r\n\r\n                  {(superAdmin || laboratoryTestAdmin) &&\r\n                  rowData.requestApproverName &&\r\n                  !rowData.requestReceiverName ? (\r\n                    <Button\r\n                      onClick={() => {\r\n                        toggleEditRequestModal(rowData);\r\n                      }}\r\n                      style={{ backgroundColor: \"#f57c00\" }}\r\n                    >\r\n                      <EditOutlinedIcon\r\n                        fontSize=\"small\"\r\n                        style={{ color: \"white\" }}\r\n                      />\r\n                    </Button>\r\n                  ) : null}\r\n\r\n                  {((superAdmin || laboratoryTestAdmin) &&\r\n                    rowData.requestApproverName &&\r\n                    !rowData.requestReceiverName) ||\r\n                  (laboratoryTestApproveRequest &&\r\n                    rowData.requestApproverName &&\r\n                    !rowData.requestReceiverName &&\r\n                    usersOrganization ===\r\n                      rowData.requesterOrganization?.substring(0, 3)) ? (\r\n                    <Button\r\n                      onClick={() => {\r\n                        toggleDeleteRequestModal(rowData);\r\n                      }}\r\n                      style={{ backgroundColor: \"#f57c00\" }}\r\n                    >\r\n                      <DeleteForeverIcon\r\n                        fontSize=\"small\"\r\n                        style={{ color: \"white\" }}\r\n                      />\r\n                    </Button>\r\n                  ) : null}\r\n\r\n                  {rowData.requesterName && !rowData.requestApproverName ? (\r\n                    <Button\r\n                      onClick={() => {\r\n                        toggleDownloadDocumentModal(rowData);\r\n                      }}\r\n                      style={{ backgroundColor: \"#ff9800\" }}\r\n                    >\r\n                      <InsertDriveFileOutlinedIcon\r\n                        fontSize=\"small\"\r\n                        style={{ color: \"white\" }}\r\n                      />\r\n                    </Button>\r\n                  ) : null}\r\n\r\n                  {rowData.requestApproverName &&\r\n                  !rowData.requestReceiverName ? (\r\n                    <Button\r\n                      onClick={() => {\r\n                        toggleDownloadDocumentModal(rowData);\r\n                      }}\r\n                      style={{ backgroundColor: \"#f57c00\" }}\r\n                    >\r\n                      <InsertDriveFileOutlinedIcon\r\n                        fontSize=\"small\"\r\n                        style={{ color: \"white\" }}\r\n                      />\r\n                    </Button>\r\n                  ) : null}\r\n\r\n                  {rowData.requestReceiverName && !rowData.reporterName ? (\r\n                    <Button\r\n                      onClick={() => {\r\n                        toggleDownloadDocumentModal(rowData);\r\n                      }}\r\n                      style={{ backgroundColor: \"#2196f3\" }}\r\n                    >\r\n                      <InsertDriveFileOutlinedIcon\r\n                        fontSize=\"small\"\r\n                        style={{ color: \"white\" }}\r\n                      />\r\n                    </Button>\r\n                  ) : null}\r\n\r\n                  {rowData.reporterName && !rowData.reportApproverName ? (\r\n                    <Button\r\n                      onClick={() => {\r\n                        toggleDownloadDocumentModal(rowData);\r\n                      }}\r\n                      style={{ backgroundColor: \"#4caf50\" }}\r\n                    >\r\n                      <InsertDriveFileOutlinedIcon\r\n                        fontSize=\"small\"\r\n                        style={{ color: \"white\" }}\r\n                      />\r\n                    </Button>\r\n                  ) : null}\r\n\r\n                  {rowData.reportApproverName ? (\r\n                    <Button\r\n                      onClick={() => {\r\n                        toggleDownloadDocumentModal(rowData);\r\n                      }}\r\n                      style={{ backgroundColor: \"#388e3c\" }}\r\n                    >\r\n                      <InsertDriveFileOutlinedIcon\r\n                        fontSize=\"small\"\r\n                        style={{ color: \"white\" }}\r\n                      />\r\n                    </Button>\r\n                  ) : null}\r\n\r\n                  {rowData?.reportIds?.length > 1 &&\r\n                  !rowData.reportApproverName ? (\r\n                    <Button\r\n                      onClick={() => {\r\n                        toggleReportHistoryModal(rowData);\r\n                      }}\r\n                      style={{ backgroundColor: \"#4caf50\" }}\r\n                    >\r\n                      <ArchiveOutlinedIcon\r\n                        fontSize=\"small\"\r\n                        style={{ color: \"white\" }}\r\n                      />\r\n                    </Button>\r\n                  ) : null}\r\n\r\n                  {rowData?.reportIds?.length > 1 &&\r\n                  rowData.reportApproverName ? (\r\n                    <Button\r\n                      onClick={() => {\r\n                        toggleReportHistoryModal(rowData);\r\n                      }}\r\n                      style={{ backgroundColor: \"#388e3c\" }}\r\n                    >\r\n                      <ArchiveOutlinedIcon\r\n                        fontSize=\"small\"\r\n                        style={{ color: \"white\" }}\r\n                      />\r\n                    </Button>\r\n                  ) : null}\r\n                </ButtonGroup>\r\n              </div>\r\n            );\r\n          },\r\n        },\r\n      },\r\n      {\r\n        label: \"Status\",\r\n        name: \"status\",\r\n        options: {\r\n          sortThirdClickReset: true,\r\n          customBodyRender: (value) => {\r\n            switch (value) {\r\n              case \"Completed\":\r\n                return (\r\n                  <div>\r\n                    <Chip\r\n                      label={value}\r\n                      size=\"small\"\r\n                      icon={<CheckOutlinedIcon style={{ color: \"white\" }} />}\r\n                      style={{ backgroundColor: \"#388e3c\", color: \"white\" }}\r\n                    />\r\n                  </div>\r\n                );\r\n\r\n              case \"Report Awaiting Approval\":\r\n                return (\r\n                  <div>\r\n                    <Chip\r\n                      label={value}\r\n                      size=\"small\"\r\n                      icon={\r\n                        <SupervisorAccountOutlinedIcon\r\n                          style={{ color: \"white\" }}\r\n                        />\r\n                      }\r\n                      style={{ backgroundColor: \"#4caf50\", color: \"white\" }}\r\n                    />\r\n                  </div>\r\n                );\r\n              case \"On Process\":\r\n                return (\r\n                  <div>\r\n                    <Chip\r\n                      label={value}\r\n                      size=\"small\"\r\n                      icon={\r\n                        <DonutLargeOutlinedIcon style={{ color: \"white\" }} />\r\n                      }\r\n                      style={{ backgroundColor: \"#2196f3\", color: \"white\" }}\r\n                    />\r\n                  </div>\r\n                );\r\n              case \"Awaiting Sample\":\r\n                return (\r\n                  <div>\r\n                    <Chip\r\n                      label={value}\r\n                      size=\"small\"\r\n                      icon={\r\n                        <LocalShippingOutlinedIcon style={{ color: \"white\" }} />\r\n                      }\r\n                      style={{ backgroundColor: \"#f57c00\", color: \"white\" }}\r\n                    />\r\n                  </div>\r\n                );\r\n              case \"Request Awaiting Approval\":\r\n                return (\r\n                  <div>\r\n                    <Chip\r\n                      label={value}\r\n                      size=\"small\"\r\n                      icon={\r\n                        <SupervisorAccountOutlinedIcon\r\n                          style={{ color: \"white\" }}\r\n                        />\r\n                      }\r\n                      style={{ backgroundColor: \"#ff9800\", color: \"white\" }}\r\n                    />\r\n                  </div>\r\n                );\r\n              default:\r\n                return (\r\n                  <div>\r\n                    <Chip label=\"No Status\" size=\"small\" />\r\n                  </div>\r\n                );\r\n            }\r\n          },\r\n        },\r\n      },\r\n      {\r\n        label: \"Request Date\",\r\n        name: \"requestDateFormated\",\r\n        options: {\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Request Number\",\r\n        name: \"requestNumber\",\r\n        options: {\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Requester\",\r\n        name: \"requesterName\",\r\n        options: {\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Request Approver\",\r\n        name: \"requestApproverName\",\r\n        options: {\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Sample Receive Date\",\r\n        name: \"requestReceiveDateFormated\",\r\n        options: {\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Sample Receiver\",\r\n        name: \"requestReceiverName\",\r\n        options: {\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Estimation Close Date\",\r\n        name: \"estimationCloseDateFormated\",\r\n        options: {\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Report Date\",\r\n        name: \"reportDateFormated\",\r\n        options: {\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Report Number\",\r\n        name: \"reportNumber\",\r\n        options: {\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Reporter\",\r\n        name: \"reporterName\",\r\n        options: {\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Report approver\",\r\n        name: \"reportApproverName\",\r\n        options: {\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Request for Laboratory\",\r\n        name: \"laboratory\",\r\n        options: {\r\n          display: \"false\",\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Material\",\r\n        name: \"material\",\r\n        options: {\r\n          display: \"false\",\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Type / Code / Model\",\r\n        name: \"type\",\r\n        options: {\r\n          display: \"false\",\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Material Specification\",\r\n        name: \"specification\",\r\n        options: {\r\n          display: \"false\",\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Manufactured by\",\r\n        name: \"manufacturer\",\r\n        options: {\r\n          display: \"false\",\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Condition\",\r\n        name: \"condition\",\r\n        options: {\r\n          display: \"false\",\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Unit\",\r\n        name: \"unit\",\r\n        options: {\r\n          display: \"false\",\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Batch / Roll Number\",\r\n        name: \"batchNumber\",\r\n        options: {\r\n          display: \"false\",\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Manufacturing Date\",\r\n        name: \"manufacturingDate\",\r\n        options: {\r\n          display: \"false\",\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Expired Date\",\r\n        name: \"expiryDate\",\r\n        options: {\r\n          display: \"false\",\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Program\",\r\n        name: \"program\",\r\n        options: {\r\n          display: \"false\",\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Budget No. / RV No. / JID No.\",\r\n        name: \"budgetNumber\",\r\n        options: {\r\n          display: \"false\",\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Quantity of Sample\",\r\n        name: \"sample\",\r\n        options: {\r\n          display: \"false\",\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Quantity of Material\",\r\n        name: \"quantity\",\r\n        options: {\r\n          display: \"false\",\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Reason of Test\",\r\n        name: \"reasonOfTest\",\r\n        options: {\r\n          display: \"false\",\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Type of Test\",\r\n        name: \"typeOfTest\",\r\n        options: {\r\n          display: \"false\",\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Test According to Specification\",\r\n        name: \"testAccordingToSpecification\",\r\n        options: {\r\n          display: \"false\",\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Organization\",\r\n        name: \"organization\",\r\n        options: {\r\n          display: \"excluded\",\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n    ];\r\n\r\n    for (let year = appLaunchYear; year <= new Date().getFullYear(); year++) {\r\n      yearPicker.push(year);\r\n    }\r\n\r\n    laboratoryTestTableOptions.textLabels = {\r\n      body: {\r\n        noMatch:\r\n          !loading && _isMounted\r\n            ? \"❌ There is no matching data to display\"\r\n            : \"⏳ Loading...\",\r\n      },\r\n    };\r\n\r\n    return (\r\n      <Suspense fallback={<div className=\"loading\" />}>\r\n        <Fragment>\r\n          <Grid container>\r\n            <Grid item xs={12}>\r\n              <span>\r\n                <Breadcrumb heading=\"F-DP 704.04\" match={match} />\r\n                {superAdmin || laboratoryTestAdmin ? (\r\n                  <IconButton\r\n                    aria-label=\"download history\"\r\n                    color=\"primary\"\r\n                    onClick={() =>\r\n                      (window.location.href = `${backEndUrl}/api/qa/laboratory-tests/excel`)\r\n                    }\r\n                    variant=\"contained\"\r\n                    style={{ marginBottom: 12 }}\r\n                  >\r\n                    <CloudDownloadOutlinedIcon />\r\n                  </IconButton>\r\n                ) : null}\r\n              </span>\r\n\r\n              <span className=\"top-right-button-container\">\r\n                <FormControl>\r\n                  <Select\r\n                    value={selectedLaboratoryTestYear}\r\n                    onChange={(event) =>\r\n                      changeSelectedLaboratoryTestYear(event.target.value)\r\n                    }\r\n                  >\r\n                    {yearPicker.map((year) => {\r\n                      return (\r\n                        <MenuItem key={year} value={year}>{`${\r\n                          +year - 1\r\n                        } - ${+year}`}</MenuItem>\r\n                      );\r\n                    })}\r\n                  </Select>\r\n                </FormControl>\r\n                {superAdmin || laboratoryTestRequest ? (\r\n                  <Button\r\n                    className=\"text-zero ml-4\"\r\n                    color=\"primary\"\r\n                    onClick={toggleSubmitRequestModal}\r\n                    variant=\"contained\"\r\n                  >\r\n                    New Request\r\n                  </Button>\r\n                ) : null}\r\n              </span>\r\n              <Separator className=\"mb-5\" />\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Card className=\"pt-5  pl-2 pr-2 pb-2\" elevation={4}>\r\n            <CardContent>\r\n              <div\r\n                style={{\r\n                  alignItems: \"center\",\r\n                  display: \"flex\",\r\n                  fontSize: 24,\r\n                  justifyContent: \"center\",\r\n                  minHeight: 0,\r\n                  minWidth: 0,\r\n                  padding: 0,\r\n                }}\r\n              >\r\n                LABORATORY TESTS\r\n              </div>\r\n            </CardContent>\r\n            <CardContent>\r\n              <MUIDataTable\r\n                columns={laboratoryTestTableColumns}\r\n                data={!loading && _isMounted ? laboratoryTests : []}\r\n                options={laboratoryTestTableOptions}\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Grid container>\r\n            <Separator className=\"mb-5\" />\r\n          </Grid>\r\n        </Fragment>\r\n\r\n        {_isMounted ? <SubmitLaboratoryTestRequestModal /> : null}\r\n        {_isMounted ? <EditLaboratoryTestRequestModal /> : null}\r\n        {_isMounted ? <ApproveLaboratoryTestRequestModal /> : null}\r\n        {_isMounted ? <DeleteLaboratoryTestRequestModal /> : null}\r\n        {_isMounted ? <ReceiveLaboratoryTestRequestModal /> : null}\r\n        {_isMounted ? <SubmitLaboratoryTestReportModal /> : null}\r\n        {_isMounted ? <EditLaboratoryTestReportModal /> : null}\r\n        {_isMounted ? <ApproveLaboratoryTestReportModal /> : null}\r\n        {_isMounted ? <ReviseLaboratoryTestReportModal /> : null}\r\n        {_isMounted ? <DownloadLaboratoryTestDocumentModal /> : null}\r\n        {_isMounted ? <LaboratoryTestReportHistoryModal /> : null}\r\n      </Suspense>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ auth, qaLaboratoryTest }) => {\r\n  const { token } = auth;\r\n  const { loading, selectedLaboratoryTestYear, laboratoryTests } =\r\n    qaLaboratoryTest;\r\n  return {\r\n    token,\r\n    loading,\r\n    selectedLaboratoryTestYear,\r\n    laboratoryTests,\r\n  };\r\n};\r\nconst mapActionsToProps = {\r\n  getLaboratoryTests,\r\n  getUsers,\r\n  toggleSubmitRequestModal,\r\n  toggleEditRequestModal,\r\n  toggleApproveRequestModal,\r\n  toggleDeleteRequestModal,\r\n  toggleReceiveRequestModal,\r\n  toggleSubmitReportModal,\r\n  toggleEditReportModal,\r\n  toggleApproveReportModal,\r\n  toggleReviseReportModal,\r\n  toggleDownloadDocumentModal,\r\n  toggleReportHistoryModal,\r\n  changeSelectedLaboratoryTestYear,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapActionsToProps)(QaLaboratoryTest);\r\n"],"sourceRoot":""}