{"version":3,"sources":["containers/navs/Breadcrumb.js","components/Layouts.js","constants/tableOptions.js","components/Material.js","views/app/userManagement.js"],"names":["BreadcrumbContainer","heading","match","Separator","props","className","style","backgroundColor","organizationUnitTableOptions","download","elevation","filter","filterType","print","responsive","rowsPerPage","rowsPerPageOptions","searchPlaceholder","selectableRows","laboratoryTestUserTableOptions","chemicalSolutionControlUserTableOptions","electroplatingChemicalProcessControlUserTableOptions","laboratoryTestTableOptions","downloadOptions","filename","separator","draggableColumns","enabled","transitionTime","expandableRows","expandableRowsHeader","expandableRowsOnClick","filterList","renderExpandableRow","rowData","colSpan","length","chemicalSolutionControlWorksheetsTableOptions","selectableRowsHideCheckboxes","chemicalSolutionControlTableOptions","pagination","search","viewColumns","solutionTargetLimitsTableOptions","specificationReferencesTableOptions","chemicalSolutionAnalysisTableOptions","electroplatingChemicalProcessControlTableOptions","UserAuthorizationSwitch","withStyles","switchBase","green","thumb","boxShadow","red","track","checked","Switch","UserManagement","componentDidMount","getUsers","_isMounted","state","laboratoryTestUsers","chemicalSolutionControlUsers","electroplatingChemicalProcessControlUsers","this","token","getUsersLoading","changeUserAuthorization","jwt_decode","userId","id","authorization","superAdmin","chemicalSolutionControlAdmin","laboratoryTestAdmin","electroplatingChemicalProcessControlAdmin","laboratoryTestUserColumns","name","options","display","searchable","label","sortThirdClickReset","customHeadRender","borderBottom","customBodyRender","_value","tableMeta","Avatar","src","backEndUrl","height","width","variant","value","disabled","onChange","authorizationId","index","findIndex","x","setState","laboratoryTestView","laboratoryTestObserve","laboratoryTestRequest","laboratoryTestApproveRequest","laboratoryTestReceiveRequest","laboratoryTestReport","laboratoryTestApproveReport","chemicalSolutionControlUserColumns","chemicalSolutionControlView","chemicalSolutionControlCreateWorksheet","chemicalSolutionControlCreateRecord","chemicalSolutionControlVerifyRecord","electroplatingChemicalProcessControlUserColumns","electroplatingChemicalProcessControlView","electroplatingChemicalProcessControlOperator","electroplatingChemicalProcessControlInspector","electroplatingChemicalProcessControlLabPersonnel","electroplatingChemicalProcessControlVerifier","textLabels","body","noMatch","fallback","Grid","container","item","xs","Breadcrumb","Card","CardContent","columns","data","title","PureComponent","mapActionsToProps","connect","auth","userManagement"],"mappings":"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","file":"static/js/22.a609731d.chunk.js","sourcesContent":["// import { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport React, { Fragment } from \"react\";\r\n\r\n// import IntlMessages from '../../helpers/IntlMessages';\r\n// import { NavLink } from 'react-router-dom';\r\n\r\n// const getMenuTitle = (sub) => {\r\n// \treturn <IntlMessages id={`menu.sidebar.${sub}`} />;\r\n// };\r\n\r\n// const getUrl = (path, sub, index) => {\r\n// \tif (index === 0) {\r\n// \t\treturn '';\r\n// \t} else {\r\n// \t\treturn path.split(sub)[0] + sub;\r\n// \t}\r\n// };\r\n\r\nconst BreadcrumbContainer = ({ heading, match }) => {\r\n  return (\r\n    <Fragment>\r\n      {heading && (\r\n        <h1>\r\n          {/* <IntlMessages id={heading} /> */}\r\n          {heading}\r\n        </h1>\r\n      )}\r\n      {/* <BreadcrumbItems match={match} /> */}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport const BreadcrumbItems = ({ match }) => {\r\n  const path = match.path.substr(1);\r\n  let paths = path.split(\"/\");\r\n\r\n  if (paths[paths.length - 1].indexOf(\":\") > -1) {\r\n    paths = paths.filter((x) => x.indexOf(\":\") === -1);\r\n  }\r\n  return (\r\n    <Fragment>\r\n      {/* <Breadcrumb className='pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block'>\r\n\t\t\t\t{paths.map((sub, index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<BreadcrumbItem key={index} active={paths.length === index + 1}>\r\n\t\t\t\t\t\t\t{paths.length !== index + 1 ? (\r\n\t\t\t\t\t\t\t\t<NavLink to={'/' + getUrl(path, sub, index)}>\r\n\t\t\t\t\t\t\t\t\t{getMenuTitle(sub)}\r\n\t\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\tgetMenuTitle(sub)\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</BreadcrumbItem>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</Breadcrumb> */}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbContainer;\r\n","import { Col } from 'reactstrap';\r\n\r\nconst Colxx = (props) => (\r\n  <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\r\n);\r\n\r\nconst Separator = (props) => (\r\n  <div\r\n    className={`separator ${props.className}`}\r\n    style={{ backgroundColor: 'transparent' }}\r\n  ></div>\r\n);\r\n\r\nexport { Colxx, Separator };\r\n","import { TableCell, TableRow } from \"@material-ui/core\";\r\n\r\nconst mediaVideoTableOptions = {\r\n  download: false,\r\n  elevation: 0,\r\n  filter: false,\r\n  filterType: \"multiselect\",\r\n  print: false,\r\n  responsive: \"standard\",\r\n  rowsPerPage: 3,\r\n  rowsPerPageOptions: [3],\r\n  selectableRows: \"none\",\r\n  viewColumns: false,\r\n};\r\n\r\nconst organizationUnitTableOptions = {\r\n  download: false,\r\n  elevation: 0,\r\n  filter: true,\r\n  filterType: \"multiselect\",\r\n  print: false,\r\n  responsive: \"vertical\",\r\n  rowsPerPage: 5,\r\n  rowsPerPageOptions: [5, 10, 25, 50],\r\n  searchPlaceholder:\r\n    \"NIK / Name / Gender Education / Major / Organization / Email / Phone No.\",\r\n  selectableRows: \"none\",\r\n};\r\n\r\nconst laboratoryTestUserTableOptions = {\r\n  download: false,\r\n  elevation: 0,\r\n  filter: true,\r\n  filterType: \"multiselect\",\r\n  print: false,\r\n  responsive: \"vertical\",\r\n  rowsPerPage: 5,\r\n  rowsPerPageOptions: [5, 10, 25, 50],\r\n  selectableRows: \"none\",\r\n};\r\n\r\nconst chemicalSolutionControlUserTableOptions = {\r\n  download: false,\r\n  elevation: 0,\r\n  filter: true,\r\n  filterType: \"multiselect\",\r\n  print: false,\r\n  responsive: \"vertical\",\r\n  rowsPerPage: 5,\r\n  rowsPerPageOptions: [5, 10, 25, 50],\r\n  selectableRows: \"none\",\r\n};\r\n\r\nconst electroplatingChemicalProcessControlUserTableOptions = {\r\n  download: false,\r\n  elevation: 0,\r\n  filter: true,\r\n  filterType: \"multiselect\",\r\n  print: false,\r\n  responsive: \"vertical\",\r\n  rowsPerPage: 5,\r\n  rowsPerPageOptions: [5, 10, 25, 50],\r\n  selectableRows: \"none\",\r\n};\r\n\r\nconst laboratoryTestTableOptions = {\r\n  downloadOptions: { filename: \"Laboratory Test.csv\", separator: \",\" },\r\n  draggableColumns: { enabled: true, transitionTime: 1 },\r\n  elevation: 0,\r\n  expandableRows: true,\r\n  expandableRowsHeader: true,\r\n  expandableRowsOnClick: false,\r\n  filter: true,\r\n  filterType: \"multiselect\",\r\n  filterList: [[\"PE8000\"], [], [], [], []],\r\n  print: false,\r\n  responsive: \"vertical\",\r\n  rowsPerPage: 100,\r\n  rowsPerPageOptions: [5, 10, 25, 50, 100, 250, 500],\r\n  selectableRows: \"none\",\r\n  renderExpandableRow: (rowData) => {\r\n    return (\r\n      <TableRow>\r\n        <TableCell colSpan={3}>\r\n          <b>Request for Laboratory</b>\r\n          <br />\r\n          <b>Material</b>\r\n          <br />\r\n          <b>Type / Code / Model</b>\r\n          <br />\r\n          <b>Material Specification</b>\r\n          <br />\r\n          <b>Manufactured by</b>\r\n          <br />\r\n          <b>Condition</b>\r\n          <br />\r\n          <b>Unit</b>\r\n          <br />\r\n          <b>Batch / Roll Number</b>\r\n          <br />\r\n          <b>Manufacturing Date</b>\r\n          <br />\r\n          <b>Expired Date</b>\r\n          <br />\r\n          <b>Program</b>\r\n          <br />\r\n          <b>Budget No. / RV No. / JID No.</b>\r\n          <br />\r\n          <b>Quantity of Sample</b>\r\n          <br />\r\n          <b>Quantity of Material</b>\r\n          <br />\r\n          <b>Reason of Test</b>\r\n          <br />\r\n          <b>Type of Test</b>\r\n          <br />\r\n          <b>Test According to Specification</b>\r\n          <br />\r\n        </TableCell>\r\n        <TableCell colSpan={rowData.length - 2}>\r\n          {rowData[13]}\r\n          <br />\r\n          {rowData[14]}\r\n          <br />\r\n          {rowData[15]}\r\n          <br />\r\n          {rowData[16]}\r\n          <br />\r\n          {rowData[17]}\r\n          <br />\r\n          {rowData[18]}\r\n          <br />\r\n          {rowData[19]}\r\n          <br />\r\n          {rowData[20]}\r\n          <br />\r\n          {rowData[21]}\r\n          <br />\r\n          {rowData[22]}\r\n          <br />\r\n          {rowData[23]}\r\n          <br />\r\n          {rowData[24]}\r\n          <br />\r\n          {rowData[25]}\r\n          <br />\r\n          {rowData[26]}\r\n          <br />\r\n          {rowData[27]}\r\n          <br />\r\n          {rowData[28]}\r\n          <br />\r\n          {rowData[29]}\r\n          <br />\r\n        </TableCell>\r\n      </TableRow>\r\n    );\r\n  },\r\n};\r\n\r\nconst chemicalSolutionControlWorksheetsTableOptions = {\r\n  downloadOptions: {\r\n    filename: \"Chemical Solution Control Worksheets.csv\",\r\n    separator: \",\",\r\n  },\r\n  elevation: 0,\r\n  filter: true,\r\n  filterType: \"multiselect\",\r\n  print: false,\r\n  responsive: \"vertical\",\r\n  rowsPerPage: 250,\r\n  rowsPerPageOptions: [5, 10, 25, 50, 100, 250, 500],\r\n  selectableRows: \"single\",\r\n  selectableRowsHideCheckboxes: true,\r\n};\r\n\r\nconst chemicalSolutionControlTableOptions = {\r\n  download: false,\r\n  draggableColumns: {\r\n    enabled: false,\r\n    transitionTime: 1,\r\n  },\r\n  elevation: 0,\r\n  filter: false,\r\n  pagination: false,\r\n  print: false,\r\n  responsive: \"vertical\",\r\n  rowsPerPage: 15,\r\n  rowsPerPageOptions: [15],\r\n  search: false,\r\n  selectableRows: \"none\",\r\n  viewColumns: false,\r\n};\r\n\r\nconst solutionTargetLimitsTableOptions = {\r\n  downloadOptions: {\r\n    filename: \"Chemical Solution Control Worksheet Solution Target Limits.csv\",\r\n    separator: \",\",\r\n  },\r\n  draggableColumns: {\r\n    enabled: false,\r\n    transitionTime: 1,\r\n  },\r\n  elevation: 0,\r\n  filter: false,\r\n  pagination: false,\r\n  print: false,\r\n  responsive: \"vertical\",\r\n  rowsPerPage: 15,\r\n  rowsPerPageOptions: [15],\r\n  search: false,\r\n  selectableRows: \"none\",\r\n};\r\n\r\nconst specificationReferencesTableOptions = {\r\n  downloadOptions: {\r\n    filename:\r\n      \"Chemical Solution Control Worksheet Specification References.csv\",\r\n    separator: \",\",\r\n  },\r\n  draggableColumns: {\r\n    enabled: false,\r\n    transitionTime: 1,\r\n  },\r\n  elevation: 0,\r\n  filter: false,\r\n  pagination: false,\r\n  print: false,\r\n  responsive: \"vertical\",\r\n  rowsPerPage: 15,\r\n  rowsPerPageOptions: [15],\r\n  search: false,\r\n  selectableRows: \"none\",\r\n};\r\n\r\nconst chemicalSolutionAnalysisTableOptions = {\r\n  downloadOptions: {\r\n    filename: \"Chemical Solution Control Records.csv\",\r\n    separator: \",\",\r\n  },\r\n  draggableColumns: {\r\n    enabled: false,\r\n    transitionTime: 1,\r\n  },\r\n  elevation: 0,\r\n  filter: false,\r\n  print: false,\r\n  responsive: \"vertical\",\r\n  rowsPerPage: 5,\r\n  rowsPerPageOptions: [5, 10, 25, 50, 100, 250, 500],\r\n  search: false,\r\n  selectableRows: \"none\",\r\n};\r\n\r\nconst electroplatingChemicalProcessControlTableOptions = {\r\n  downloadOptions: {\r\n    filename: \"Control of Electroplating and Chemical Processes.csv\",\r\n    separator: \",\",\r\n  },\r\n  elevation: 0,\r\n  filter: true,\r\n  filterType: \"multiselect\",\r\n  print: false,\r\n  responsive: \"vertical\",\r\n  rowsPerPage: 100,\r\n  rowsPerPageOptions: [5, 10, 25, 50, 100, 250, 500],\r\n  selectableRows: \"single\",\r\n  selectableRowsHideCheckboxes: true,\r\n};\r\n\r\nexport {\r\n  mediaVideoTableOptions,\r\n  organizationUnitTableOptions,\r\n  laboratoryTestUserTableOptions,\r\n  chemicalSolutionControlUserTableOptions,\r\n  electroplatingChemicalProcessControlUserTableOptions,\r\n  laboratoryTestTableOptions,\r\n  chemicalSolutionControlWorksheetsTableOptions,\r\n  chemicalSolutionControlTableOptions,\r\n  solutionTargetLimitsTableOptions,\r\n  specificationReferencesTableOptions,\r\n  chemicalSolutionAnalysisTableOptions,\r\n  electroplatingChemicalProcessControlTableOptions,\r\n};\r\n","import { Switch } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { red, green } from '@material-ui/core/colors';\r\n\r\nconst UserAuthorizationSwitch = withStyles({\r\n  switchBase: {\r\n    '&$checked + $track': {\r\n      backgroundColor: green[300],\r\n    },\r\n  },\r\n  thumb: {\r\n    boxShadow: 'none',\r\n    backgroundColor: red[500],\r\n  },\r\n  track: {\r\n    backgroundColor: red[300],\r\n  },\r\n  checked: {\r\n    '& $thumb': {\r\n      backgroundColor: green[500],\r\n    },\r\n  },\r\n})(Switch);\r\n\r\nexport { UserAuthorizationSwitch };\r\n","import React, { PureComponent, Fragment, Suspense } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { Avatar, Card, CardContent, Grid } from \"@material-ui/core\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport { changeUserAuthorization, getUsers } from \"../../redux/actions\";\r\nimport Breadcrumb from \"../../containers/navs/Breadcrumb\";\r\nimport { Separator } from \"../../components/Layouts\";\r\nimport { UserAuthorizationSwitch } from \"../../components/Material\";\r\nimport { backEndUrl } from \"../../constants/defaultValues\";\r\nimport {\r\n  laboratoryTestUserTableOptions,\r\n  chemicalSolutionControlUserTableOptions,\r\n  electroplatingChemicalProcessControlUserTableOptions,\r\n} from \"../../constants/tableOptions\";\r\n\r\nclass UserManagement extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      laboratoryTestUsers: [],\r\n      chemicalSolutionControlUsers: [],\r\n      electroplatingChemicalProcessControlUsers: [],\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromProps(props) {\r\n    const {\r\n      laboratoryTestUsers,\r\n      chemicalSolutionControlUsers,\r\n      electroplatingChemicalProcessControlUsers,\r\n    } = props;\r\n\r\n    return {\r\n      laboratoryTestUsers,\r\n      chemicalSolutionControlUsers,\r\n      electroplatingChemicalProcessControlUsers,\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const { getUsers } = this.props;\r\n\r\n    this._isMounted = true;\r\n    getUsers();\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  render() {\r\n    const { _isMounted } = this;\r\n    const { match, token, getUsersLoading, changeUserAuthorization } =\r\n      this.props;\r\n    const {\r\n      laboratoryTestUsers,\r\n      chemicalSolutionControlUsers,\r\n      electroplatingChemicalProcessControlUsers,\r\n    } = this.state;\r\n    const { id: userId, authorization } = jwt_decode(token);\r\n    const {\r\n      superAdmin,\r\n      chemicalSolutionControlAdmin,\r\n      laboratoryTestAdmin,\r\n      electroplatingChemicalProcessControlAdmin,\r\n    } = authorization;\r\n    const laboratoryTestUserColumns = [\r\n      {\r\n        name: \"id\",\r\n        options: {\r\n          display: \"excluded\",\r\n          filter: false,\r\n          searchable: false,\r\n        },\r\n      },\r\n      {\r\n        name: \"authorizationId\",\r\n        options: {\r\n          display: \"excluded\",\r\n          filter: false,\r\n          searchable: false,\r\n        },\r\n      },\r\n      {\r\n        label: \"Photo\",\r\n        name: \"photo\",\r\n        options: {\r\n          filter: false,\r\n          searchable: false,\r\n          sortThirdClickReset: true,\r\n          customHeadRender: () => (\r\n            <th\r\n              key={0}\r\n              style={{ borderBottom: \"1px solid rgba(224, 224, 224, 1)\" }}\r\n            />\r\n          ),\r\n          customBodyRender: (_value, tableMeta) => {\r\n            return (\r\n              <Avatar\r\n                src={`${backEndUrl}/assets/img/user/portrait/minified/${tableMeta.rowData[3]}.jpg`}\r\n                style={{ height: \"120px\", width: \"90px\" }}\r\n                variant=\"rounded\"\r\n              />\r\n            );\r\n          },\r\n        },\r\n      },\r\n      {\r\n        label: \"NIK\",\r\n        name: \"nik\",\r\n        options: {\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Name\",\r\n        name: \"name\",\r\n        options: {\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Organization\",\r\n        name: \"organization\",\r\n        options: {\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Administrator\",\r\n        name: \"laboratoryTestAdmin\",\r\n        options: {\r\n          searchable: false,\r\n          sortThirdClickReset: true,\r\n          customBodyRender: (value, tableMeta) => {\r\n            return (\r\n              <UserAuthorizationSwitch\r\n                checked={value ? true : false}\r\n                value={value ? \"Administrator: On\" : \"Administrator: Off\"}\r\n                disabled={tableMeta.rowData[0] === userId}\r\n                onChange={() => {\r\n                  const authorizationId = tableMeta.rowData[1];\r\n                  const authorization = { laboratoryTestAdmin: !value };\r\n                  const index = laboratoryTestUsers.findIndex(\r\n                    (x) => x.authorizationId === authorizationId\r\n                  );\r\n\r\n                  changeUserAuthorization(authorizationId, authorization);\r\n                  laboratoryTestUsers[index].laboratoryTestAdmin = value;\r\n                  this.setState({ laboratoryTestUsers });\r\n                }}\r\n              />\r\n            );\r\n          },\r\n        },\r\n      },\r\n      {\r\n        label: \"View\",\r\n        name: \"laboratoryTestView\",\r\n        options: {\r\n          searchable: false,\r\n          sortThirdClickReset: true,\r\n          customBodyRender: (value, tableMeta) => {\r\n            return (\r\n              <UserAuthorizationSwitch\r\n                checked={value ? value : false}\r\n                value={value ? \"View: On\" : \"View: Off\"}\r\n                onChange={() => {\r\n                  const authorizationId = tableMeta.rowData[1];\r\n                  const authorization = { laboratoryTestView: !value };\r\n                  const index = laboratoryTestUsers.findIndex(\r\n                    (x) => x.authorizationId === authorizationId\r\n                  );\r\n\r\n                  changeUserAuthorization(authorizationId, authorization);\r\n                  laboratoryTestUsers[index].laboratoryTestView = value;\r\n                  this.setState({ laboratoryTestUsers });\r\n                }}\r\n              />\r\n            );\r\n          },\r\n        },\r\n      },\r\n      {\r\n        label: \"Observe\",\r\n        name: \"laboratoryTestObserve\",\r\n        options: {\r\n          searchable: false,\r\n          sortThirdClickReset: true,\r\n          customBodyRender: (value, tableMeta) => {\r\n            return (\r\n              <UserAuthorizationSwitch\r\n                checked={value ? value : false}\r\n                value={value ? \"Observe: On\" : \"Observe: Off\"}\r\n                onChange={() => {\r\n                  const authorizationId = tableMeta.rowData[1];\r\n                  const authorization = { laboratoryTestObserve: !value };\r\n                  const index = laboratoryTestUsers.findIndex(\r\n                    (x) => x.authorizationId === authorizationId\r\n                  );\r\n\r\n                  changeUserAuthorization(authorizationId, authorization);\r\n                  laboratoryTestUsers[index].laboratoryTestObserve = value;\r\n                  this.setState({ laboratoryTestUsers });\r\n                }}\r\n              />\r\n            );\r\n          },\r\n        },\r\n      },\r\n      {\r\n        label: \"Request\",\r\n        name: \"laboratoryTestRequest\",\r\n        options: {\r\n          searchable: false,\r\n          sortThirdClickReset: true,\r\n          customBodyRender: (value, tableMeta) => {\r\n            return (\r\n              <UserAuthorizationSwitch\r\n                checked={value ? value : false}\r\n                value={value ? \"Request: On\" : \"Request: Off\"}\r\n                onChange={() => {\r\n                  const authorizationId = tableMeta.rowData[1];\r\n                  const authorization = { laboratoryTestRequest: !value };\r\n                  const index = laboratoryTestUsers.findIndex(\r\n                    (x) => x.authorizationId === authorizationId\r\n                  );\r\n\r\n                  changeUserAuthorization(authorizationId, authorization);\r\n                  laboratoryTestUsers[index].laboratoryTestRequest = value;\r\n                  this.setState({ laboratoryTestUsers });\r\n                }}\r\n              />\r\n            );\r\n          },\r\n        },\r\n      },\r\n      {\r\n        label: \"Approve Request\",\r\n        name: \"laboratoryTestApproveRequest\",\r\n        options: {\r\n          searchable: false,\r\n          sortThirdClickReset: true,\r\n          customBodyRender: (value, tableMeta) => {\r\n            return (\r\n              <UserAuthorizationSwitch\r\n                checked={value ? value : false}\r\n                value={value ? \"Approve Request: On\" : \"Approve Request: Off\"}\r\n                onChange={() => {\r\n                  const authorizationId = tableMeta.rowData[1];\r\n                  const authorization = {\r\n                    laboratoryTestApproveRequest: !value,\r\n                  };\r\n                  const index = laboratoryTestUsers.findIndex(\r\n                    (x) => x.authorizationId === authorizationId\r\n                  );\r\n\r\n                  changeUserAuthorization(authorizationId, authorization);\r\n                  laboratoryTestUsers[index].laboratoryTestApproveRequest =\r\n                    value;\r\n                  this.setState({ laboratoryTestUsers });\r\n                }}\r\n              />\r\n            );\r\n          },\r\n        },\r\n      },\r\n      {\r\n        label: \"Receive Request\",\r\n        name: \"laboratoryTestReceiveRequest\",\r\n        options: {\r\n          searchable: false,\r\n          sortThirdClickReset: true,\r\n          customBodyRender: (value, tableMeta) => {\r\n            return (\r\n              <UserAuthorizationSwitch\r\n                checked={value ? value : false}\r\n                value={value ? \"Receive Request: On\" : \"Receive Request: Off\"}\r\n                onChange={() => {\r\n                  const authorizationId = tableMeta.rowData[1];\r\n                  const authorization = {\r\n                    laboratoryTestReceiveRequest: !value,\r\n                  };\r\n                  const index = laboratoryTestUsers.findIndex(\r\n                    (x) => x.authorizationId === authorizationId\r\n                  );\r\n\r\n                  changeUserAuthorization(authorizationId, authorization);\r\n                  laboratoryTestUsers[index].laboratoryTestReceiveRequest =\r\n                    value;\r\n                  this.setState({ laboratoryTestUsers });\r\n                }}\r\n              />\r\n            );\r\n          },\r\n        },\r\n      },\r\n      {\r\n        label: \"Report\",\r\n        name: \"laboratoryTestReport\",\r\n        options: {\r\n          searchable: false,\r\n          sortThirdClickReset: true,\r\n          customBodyRender: (value, tableMeta) => {\r\n            return (\r\n              <UserAuthorizationSwitch\r\n                checked={value ? value : false}\r\n                value={value ? \"Report: On\" : \"Report: Off\"}\r\n                onChange={() => {\r\n                  const authorizationId = tableMeta.rowData[1];\r\n                  const authorization = { laboratoryTestReport: !value };\r\n                  const index = laboratoryTestUsers.findIndex(\r\n                    (x) => x.authorizationId === authorizationId\r\n                  );\r\n\r\n                  changeUserAuthorization(authorizationId, authorization);\r\n                  laboratoryTestUsers[index].laboratoryTestReport = value;\r\n                  this.setState({ laboratoryTestUsers });\r\n                }}\r\n              />\r\n            );\r\n          },\r\n        },\r\n      },\r\n      {\r\n        name: \"laboratoryTestApproveReport\",\r\n        label: \"Approve Report\",\r\n        options: {\r\n          sortThirdClickReset: true,\r\n          searchable: false,\r\n          customBodyRender: (value, tableMeta) => {\r\n            return (\r\n              <UserAuthorizationSwitch\r\n                checked={value ? value : false}\r\n                value={value ? \"Approve Report: On\" : \"Approve Report: Off\"}\r\n                onChange={() => {\r\n                  const authorizationId = tableMeta.rowData[1];\r\n                  const authorization = { laboratoryTestApproveReport: !value };\r\n                  const index = laboratoryTestUsers.findIndex(\r\n                    (x) => x.authorizationId === authorizationId\r\n                  );\r\n\r\n                  changeUserAuthorization(authorizationId, authorization);\r\n                  laboratoryTestUsers[index].laboratoryTestApproveReport =\r\n                    value;\r\n                  this.setState({ laboratoryTestUsers });\r\n                }}\r\n              />\r\n            );\r\n          },\r\n        },\r\n      },\r\n    ];\r\n    const chemicalSolutionControlUserColumns = [\r\n      {\r\n        name: \"id\",\r\n        options: {\r\n          display: \"excluded\",\r\n          filter: false,\r\n          searchable: false,\r\n        },\r\n      },\r\n      {\r\n        name: \"authorizationId\",\r\n        options: {\r\n          display: \"excluded\",\r\n          filter: false,\r\n          searchable: false,\r\n        },\r\n      },\r\n      {\r\n        label: \"Photo\",\r\n        name: \"photo\",\r\n        options: {\r\n          filter: false,\r\n          searchable: false,\r\n          sortThirdClickReset: true,\r\n          customHeadRender: () => (\r\n            <th\r\n              key={0}\r\n              style={{ borderBottom: \"1px solid rgba(224, 224, 224, 1)\" }}\r\n            />\r\n          ),\r\n          customBodyRender: (_value, tableMeta) => {\r\n            return (\r\n              <Avatar\r\n                src={`${backEndUrl}/assets/img/user/portrait/minified/${tableMeta.rowData[3]}.jpg`}\r\n                style={{ height: \"120px\", width: \"90px\" }}\r\n                variant=\"rounded\"\r\n              />\r\n            );\r\n          },\r\n        },\r\n      },\r\n      {\r\n        label: \"NIK\",\r\n        name: \"nik\",\r\n        options: {\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Name\",\r\n        name: \"name\",\r\n        options: {\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Organization\",\r\n        name: \"organization\",\r\n        options: {\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Administrator\",\r\n        name: \"chemicalSolutionControlAdmin\",\r\n        options: {\r\n          searchable: false,\r\n          sortThirdClickReset: true,\r\n          customBodyRender: (value, tableMeta) => {\r\n            return (\r\n              <UserAuthorizationSwitch\r\n                checked={value ? value : false}\r\n                value={value ? \"Administrator: On\" : \"Administrator: Off\"}\r\n                disabled={tableMeta.rowData[0] === userId}\r\n                onChange={() => {\r\n                  const authorizationId = tableMeta.rowData[1];\r\n                  const authorization = {\r\n                    chemicalSolutionControlAdmin: !value,\r\n                  };\r\n                  const index = chemicalSolutionControlUsers.findIndex(\r\n                    (x) => x.authorizationId === authorizationId\r\n                  );\r\n\r\n                  changeUserAuthorization(authorizationId, authorization);\r\n                  chemicalSolutionControlUsers[\r\n                    index\r\n                  ].chemicalSolutionControlAdmin = value;\r\n                  this.setState({ chemicalSolutionControlUsers });\r\n                }}\r\n              />\r\n            );\r\n          },\r\n        },\r\n      },\r\n      {\r\n        label: \"View\",\r\n        name: \"chemicalSolutionControlView\",\r\n        options: {\r\n          searchable: false,\r\n          sortThirdClickReset: true,\r\n          customBodyRender: (value, tableMeta) => {\r\n            return (\r\n              <UserAuthorizationSwitch\r\n                checked={value ? value : false}\r\n                value={value ? \"View: On\" : \"View: Off\"}\r\n                onChange={() => {\r\n                  const authorizationId = tableMeta.rowData[1];\r\n                  const authorization = { chemicalSolutionControlView: !value };\r\n                  const index = chemicalSolutionControlUsers.findIndex(\r\n                    (x) => x.authorizationId === authorizationId\r\n                  );\r\n\r\n                  changeUserAuthorization(authorizationId, authorization);\r\n                  chemicalSolutionControlUsers[\r\n                    index\r\n                  ].chemicalSolutionControlView = value;\r\n                  this.setState({ chemicalSolutionControlUsers });\r\n                }}\r\n              />\r\n            );\r\n          },\r\n        },\r\n      },\r\n      {\r\n        label: \"Create Worksheet\",\r\n        name: \"chemicalSolutionControlCreateWorksheet\",\r\n        options: {\r\n          searchable: false,\r\n          sortThirdClickReset: true,\r\n          customBodyRender: (value, tableMeta) => {\r\n            return (\r\n              <UserAuthorizationSwitch\r\n                checked={value ? value : false}\r\n                value={value ? \"Create Worksheet: On\" : \"Create Worksheet: Off\"}\r\n                onChange={() => {\r\n                  const authorizationId = tableMeta.rowData[1];\r\n                  const authorization = {\r\n                    chemicalSolutionControlCreateWorksheet: !value,\r\n                  };\r\n                  const index = chemicalSolutionControlUsers.findIndex(\r\n                    (x) => x.authorizationId === authorizationId\r\n                  );\r\n\r\n                  changeUserAuthorization(authorizationId, authorization);\r\n                  chemicalSolutionControlUsers[\r\n                    index\r\n                  ].chemicalSolutionControlCreateWorksheet = value;\r\n                  this.setState({ chemicalSolutionControlUsers });\r\n                }}\r\n              />\r\n            );\r\n          },\r\n        },\r\n      },\r\n      {\r\n        label: \"Create Record\",\r\n        name: \"chemicalSolutionControlCreateRecord\",\r\n        options: {\r\n          searchable: false,\r\n          sortThirdClickReset: true,\r\n          customBodyRender: (value, tableMeta) => {\r\n            return (\r\n              <UserAuthorizationSwitch\r\n                checked={value ? value : false}\r\n                value={value ? \"Create Record: On\" : \"Create Record: Off\"}\r\n                onChange={() => {\r\n                  const authorizationId = tableMeta.rowData[1];\r\n                  const authorization = {\r\n                    chemicalSolutionControlCreateRecord: !value,\r\n                  };\r\n                  const index = chemicalSolutionControlUsers.findIndex(\r\n                    (x) => x.authorizationId === authorizationId\r\n                  );\r\n\r\n                  changeUserAuthorization(authorizationId, authorization);\r\n                  chemicalSolutionControlUsers[\r\n                    index\r\n                  ].chemicalSolutionControlCreateRecord = value;\r\n                  this.setState({ chemicalSolutionControlUsers });\r\n                }}\r\n              />\r\n            );\r\n          },\r\n        },\r\n      },\r\n      {\r\n        label: \"Verify Record\",\r\n        name: \"chemicalSolutionControlVerifyRecord\",\r\n        options: {\r\n          searchable: false,\r\n          sortThirdClickReset: true,\r\n          customBodyRender: (value, tableMeta) => {\r\n            return (\r\n              <UserAuthorizationSwitch\r\n                checked={value ? value : false}\r\n                value={value ? \"Verify Record: On\" : \"Verify Record: Off\"}\r\n                onChange={() => {\r\n                  const authorizationId = tableMeta.rowData[1];\r\n                  const authorization = {\r\n                    chemicalSolutionControlVerifyRecord: !value,\r\n                  };\r\n                  const index = chemicalSolutionControlUsers.findIndex(\r\n                    (x) => x.authorizationId === authorizationId\r\n                  );\r\n\r\n                  changeUserAuthorization(authorizationId, authorization);\r\n                  chemicalSolutionControlUsers[\r\n                    index\r\n                  ].chemicalSolutionControlVerifyRecord = value;\r\n                  this.setState({ chemicalSolutionControlUsers });\r\n                }}\r\n              />\r\n            );\r\n          },\r\n        },\r\n      },\r\n    ];\r\n    const electroplatingChemicalProcessControlUserColumns = [\r\n      {\r\n        name: \"id\",\r\n        options: {\r\n          display: \"excluded\",\r\n          filter: false,\r\n          searchable: false,\r\n        },\r\n      },\r\n      {\r\n        name: \"authorizationId\",\r\n        options: {\r\n          display: \"excluded\",\r\n          filter: false,\r\n          searchable: false,\r\n        },\r\n      },\r\n      {\r\n        label: \"Photo\",\r\n        name: \"photo\",\r\n        options: {\r\n          filter: false,\r\n          searchable: false,\r\n          sortThirdClickReset: true,\r\n          customHeadRender: () => (\r\n            <th\r\n              key={0}\r\n              style={{ borderBottom: \"1px solid rgba(224, 224, 224, 1)\" }}\r\n            />\r\n          ),\r\n          customBodyRender: (_value, tableMeta) => {\r\n            return (\r\n              <Avatar\r\n                src={`${backEndUrl}/assets/img/user/portrait/minified/${tableMeta.rowData[3]}.jpg`}\r\n                style={{ height: \"120px\", width: \"90px\" }}\r\n                variant=\"rounded\"\r\n              />\r\n            );\r\n          },\r\n        },\r\n      },\r\n      {\r\n        label: \"NIK\",\r\n        name: \"nik\",\r\n        options: {\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Name\",\r\n        name: \"name\",\r\n        options: {\r\n          filter: false,\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Organization\",\r\n        name: \"organization\",\r\n        options: {\r\n          sortThirdClickReset: true,\r\n        },\r\n      },\r\n      {\r\n        label: \"Administrator\",\r\n        name: \"electroplatingChemicalProcessControlAdmin\",\r\n        options: {\r\n          searchable: false,\r\n          sortThirdClickReset: true,\r\n          customBodyRender: (value, tableMeta) => {\r\n            return (\r\n              <UserAuthorizationSwitch\r\n                checked={value ? value : false}\r\n                value={value ? \"Administrator: On\" : \"Administrator: Off\"}\r\n                disabled={tableMeta.rowData[0] === userId}\r\n                onChange={() => {\r\n                  const authorizationId = tableMeta.rowData[1];\r\n                  const authorization = {\r\n                    electroplatingChemicalProcessControlAdmin: !value,\r\n                  };\r\n                  const index =\r\n                    electroplatingChemicalProcessControlUsers.findIndex(\r\n                      (x) => x.authorizationId === authorizationId\r\n                    );\r\n\r\n                  changeUserAuthorization(authorizationId, authorization);\r\n                  electroplatingChemicalProcessControlUsers[\r\n                    index\r\n                  ].electroplatingChemicalProcessControlAdmin = value;\r\n                  this.setState({ electroplatingChemicalProcessControlUsers });\r\n                }}\r\n              />\r\n            );\r\n          },\r\n        },\r\n      },\r\n      {\r\n        label: \"View\",\r\n        name: \"electroplatingChemicalProcessControlView\",\r\n        options: {\r\n          searchable: false,\r\n          sortThirdClickReset: true,\r\n          customBodyRender: (value, tableMeta) => {\r\n            return (\r\n              <UserAuthorizationSwitch\r\n                checked={value ? value : false}\r\n                value={value ? \"View: On\" : \"View: Off\"}\r\n                onChange={() => {\r\n                  const authorizationId = tableMeta.rowData[1];\r\n                  const authorization = {\r\n                    electroplatingChemicalProcessControlView: !value,\r\n                  };\r\n                  const index =\r\n                    electroplatingChemicalProcessControlUsers.findIndex(\r\n                      (x) => x.authorizationId === authorizationId\r\n                    );\r\n\r\n                  changeUserAuthorization(authorizationId, authorization);\r\n                  electroplatingChemicalProcessControlUsers[\r\n                    index\r\n                  ].electroplatingChemicalProcessControlView = value;\r\n                  this.setState({ electroplatingChemicalProcessControlUsers });\r\n                }}\r\n              />\r\n            );\r\n          },\r\n        },\r\n      },\r\n      {\r\n        label: \"Operator\",\r\n        name: \"electroplatingChemicalProcessControlOperator\",\r\n        options: {\r\n          searchable: false,\r\n          sortThirdClickReset: true,\r\n          customBodyRender: (value, tableMeta) => {\r\n            return (\r\n              <UserAuthorizationSwitch\r\n                checked={value ? value : false}\r\n                value={value ? \"Operator: On\" : \"Operator: Off\"}\r\n                onChange={() => {\r\n                  const authorizationId = tableMeta.rowData[1];\r\n                  const authorization = {\r\n                    electroplatingChemicalProcessControlOperator: !value,\r\n                  };\r\n                  const index =\r\n                    electroplatingChemicalProcessControlUsers.findIndex(\r\n                      (x) => x.authorizationId === authorizationId\r\n                    );\r\n\r\n                  changeUserAuthorization(authorizationId, authorization);\r\n                  electroplatingChemicalProcessControlUsers[\r\n                    index\r\n                  ].electroplatingChemicalProcessControlOperator = value;\r\n                  this.setState({ electroplatingChemicalProcessControlUsers });\r\n                }}\r\n              />\r\n            );\r\n          },\r\n        },\r\n      },\r\n      {\r\n        label: \"Inspector\",\r\n        name: \"electroplatingChemicalProcessControlInspector\",\r\n        options: {\r\n          searchable: false,\r\n          sortThirdClickReset: true,\r\n          customBodyRender: (value, tableMeta) => {\r\n            return (\r\n              <UserAuthorizationSwitch\r\n                checked={value ? value : false}\r\n                value={value ? \"Inspector: On\" : \"Inspector: Off\"}\r\n                onChange={() => {\r\n                  const authorizationId = tableMeta.rowData[1];\r\n                  const authorization = {\r\n                    electroplatingChemicalProcessControlInspector: !value,\r\n                  };\r\n                  const index =\r\n                    electroplatingChemicalProcessControlUsers.findIndex(\r\n                      (x) => x.authorizationId === authorizationId\r\n                    );\r\n\r\n                  changeUserAuthorization(authorizationId, authorization);\r\n                  electroplatingChemicalProcessControlUsers[\r\n                    index\r\n                  ].electroplatingChemicalProcessControlInspector = value;\r\n                  this.setState({ electroplatingChemicalProcessControlUsers });\r\n                }}\r\n              />\r\n            );\r\n          },\r\n        },\r\n      },\r\n      {\r\n        label: \"Lab Personnel\",\r\n        name: \"electroplatingChemicalProcessControlLabPersonnel\",\r\n        options: {\r\n          searchable: false,\r\n          sortThirdClickReset: true,\r\n          customBodyRender: (value, tableMeta) => {\r\n            return (\r\n              <UserAuthorizationSwitch\r\n                checked={value ? value : false}\r\n                value={value ? \"Lab Personnel: On\" : \"Lab Personnel: Off\"}\r\n                onChange={() => {\r\n                  const authorizationId = tableMeta.rowData[1];\r\n                  const authorization = {\r\n                    electroplatingChemicalProcessControlLabPersonnel: !value,\r\n                  };\r\n                  const index =\r\n                    electroplatingChemicalProcessControlUsers.findIndex(\r\n                      (x) => x.authorizationId === authorizationId\r\n                    );\r\n\r\n                  changeUserAuthorization(authorizationId, authorization);\r\n                  electroplatingChemicalProcessControlUsers[\r\n                    index\r\n                  ].electroplatingChemicalProcessControlLabPersonnel = value;\r\n                  this.setState({ electroplatingChemicalProcessControlUsers });\r\n                }}\r\n              />\r\n            );\r\n          },\r\n        },\r\n      },\r\n      {\r\n        label: \"Verifier\",\r\n        name: \"electroplatingChemicalProcessControlVerifier\",\r\n        options: {\r\n          searchable: false,\r\n          sortThirdClickReset: true,\r\n          customBodyRender: (value, tableMeta) => {\r\n            return (\r\n              <UserAuthorizationSwitch\r\n                checked={value ? value : false}\r\n                value={value ? \"Verifier: On\" : \"Verifier: Off\"}\r\n                onChange={() => {\r\n                  const authorizationId = tableMeta.rowData[1];\r\n                  const authorization = {\r\n                    electroplatingChemicalProcessControlVerifier: !value,\r\n                  };\r\n                  const index =\r\n                    electroplatingChemicalProcessControlUsers.findIndex(\r\n                      (x) => x.authorizationId === authorizationId\r\n                    );\r\n\r\n                  changeUserAuthorization(authorizationId, authorization);\r\n                  electroplatingChemicalProcessControlUsers[\r\n                    index\r\n                  ].electroplatingChemicalProcessControlVerifier = value;\r\n                  this.setState({ electroplatingChemicalProcessControlUsers });\r\n                }}\r\n              />\r\n            );\r\n          },\r\n        },\r\n      },\r\n    ];\r\n\r\n    laboratoryTestUserTableOptions.textLabels = {\r\n      body: {\r\n        noMatch:\r\n          !getUsersLoading && _isMounted\r\n            ? \"❌ There is no matching data to display\"\r\n            : \"⏳ Loading...\",\r\n      },\r\n    };\r\n    chemicalSolutionControlUserTableOptions.textLabels = {\r\n      body: {\r\n        noMatch:\r\n          !getUsersLoading && _isMounted\r\n            ? \"❌ There is no matching data to display\"\r\n            : \"⏳ Loading...\",\r\n      },\r\n    };\r\n    electroplatingChemicalProcessControlUserTableOptions.textLabels = {\r\n      body: {\r\n        noMatch:\r\n          !getUsersLoading && _isMounted\r\n            ? \"❌ There is no matching data to display\"\r\n            : \"⏳ Loading...\",\r\n      },\r\n    };\r\n\r\n    return (\r\n      <Suspense fallback={<div className=\"loading\" />}>\r\n        <Fragment>\r\n          <Grid container>\r\n            <Grid item xs={12}>\r\n              <Breadcrumb heading=\"User Management\" match={match} />\r\n              <Separator className=\"mb-5\" />\r\n            </Grid>\r\n          </Grid>\r\n\r\n          {superAdmin || laboratoryTestAdmin ? (\r\n            <Card className=\"pt-5 pl-2 pr-2 pb-2 mb-5\" elevation={4}>\r\n              <CardContent>\r\n                <MUIDataTable\r\n                  columns={laboratoryTestUserColumns}\r\n                  data={\r\n                    !getUsersLoading && _isMounted ? laboratoryTestUsers : []\r\n                  }\r\n                  options={laboratoryTestUserTableOptions}\r\n                  title={\"F-DP 704.04: Laboratory Tests\"}\r\n                />\r\n              </CardContent>\r\n            </Card>\r\n          ) : null}\r\n\r\n          {superAdmin || chemicalSolutionControlAdmin ? (\r\n            <Card className=\"pt-5 pl-2 pr-2 pb-2 mb-5\" elevation={4}>\r\n              <CardContent>\r\n                <MUIDataTable\r\n                  columns={chemicalSolutionControlUserColumns}\r\n                  data={\r\n                    !getUsersLoading && _isMounted\r\n                      ? chemicalSolutionControlUsers\r\n                      : []\r\n                  }\r\n                  options={chemicalSolutionControlUserTableOptions}\r\n                  title={\r\n                    \"F-DP 704.05.01: Chemical Solution Control and Records\"\r\n                  }\r\n                />\r\n              </CardContent>\r\n            </Card>\r\n          ) : null}\r\n\r\n          {superAdmin || electroplatingChemicalProcessControlAdmin ? (\r\n            <Card className=\"pt-5 pl-2 pr-2 pb-2\" elevation={4}>\r\n              <CardContent>\r\n                <MUIDataTable\r\n                  columns={electroplatingChemicalProcessControlUserColumns}\r\n                  data={\r\n                    !getUsersLoading && _isMounted\r\n                      ? electroplatingChemicalProcessControlUsers\r\n                      : []\r\n                  }\r\n                  options={electroplatingChemicalProcessControlUserTableOptions}\r\n                  title={\r\n                    \"F-DP 704.05.04: Control of Electroplating and Chemical Processes\"\r\n                  }\r\n                />\r\n              </CardContent>\r\n            </Card>\r\n          ) : null}\r\n\r\n          <Grid container>\r\n            <Separator className=\"mb-5\" />\r\n          </Grid>\r\n        </Fragment>\r\n      </Suspense>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ auth, userManagement }) => {\r\n  const { token } = auth;\r\n  const {\r\n    getUsersLoading,\r\n    laboratoryTestUsers,\r\n    chemicalSolutionControlUsers,\r\n    electroplatingChemicalProcessControlUsers,\r\n  } = userManagement;\r\n\r\n  return {\r\n    token,\r\n    getUsersLoading,\r\n    laboratoryTestUsers,\r\n    chemicalSolutionControlUsers,\r\n    electroplatingChemicalProcessControlUsers,\r\n  };\r\n};\r\nconst mapActionsToProps = { changeUserAuthorization, getUsers };\r\n\r\nexport default connect(mapStateToProps, mapActionsToProps)(UserManagement);\r\n"],"sourceRoot":""}